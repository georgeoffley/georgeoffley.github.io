<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>I make great projects using Python, C#, PHP, and JavaScript. Currently learning about AWS, Go, C++, and the graphics pipeline. I also love writing and well made movies. Check out my blog and my twitter to contact me!</description>
    <link>https://georgeoffley.com/</link>
    <atom:link href="https://georgeoffley.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 11 Jun 2022 13:54:36 -0400</pubDate>
    <lastBuildDate>Sat, 11 Jun 2022 13:54:36 -0400</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>Adventures In TypeScript: Destructuring and Code Organization</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-11-adventures-in-typescript-destructuring-and-code-organization/cover.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#destructuring&quot;&gt;Destructuring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#destructuring-imports&quot;&gt;Destructuring Imports&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#destructuring-imports&quot;&gt;A Cleaner Way To Destructure Imports&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#my-conclusions&quot;&gt;My Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I’ve been diving deep into the JavaScript ecosystem via TypeScript. One thing I’m observing in the more established engineering culture I’m part of now is the idea of cleaner code using things like destructuring. I am still new to this type of stack, so I wanted to talk about it and understand how we can better organize code.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This is a bait and switch since we’re talking about organizational principles in JavaScript. Both have the word ‘Script’ in the name, so I will stick with it.&lt;/p&gt;

&lt;p&gt;Just a warning: &lt;em&gt;&lt;strong&gt;I am new to this world. I don’t have a lot of expertise (yet) about what is or not cool in the ESM spec. So some info here might need further study.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;destructuring-&quot;&gt;Destructuring &lt;a name=&quot;destructuring&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Destructuring objects is a simple syntax that yields some helpful behavior. Destructuring allows you to unpack properties and values for arrays, objects, and classes. This is useful in organizing our code because we can avoid things like calling class or object names before their properties.&lt;/p&gt;

&lt;p&gt;So we can go from doing things like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-11-adventures-in-typescript-destructuring-and-code-organization/objectname-property.png&quot; alt=&quot;Object Name&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To something a little cleaner like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-11-adventures-in-typescript-destructuring-and-code-organization/destructuredproperty.png&quot; alt=&quot;Destructured Property&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also do this in a way to avoid naming collisions for commonly named code that we will discuss further down.&lt;/p&gt;

&lt;p&gt;Let’s see what this looks like.&lt;/p&gt;

&lt;p&gt;First, we set up a new project and made some stuff to export.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-11-adventures-in-typescript-destructuring-and-code-organization/primenums-ts.png&quot; alt=&quot;Prime Numbers module. See there's TypeScript right there! Why are you yelling at me?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-11-adventures-in-typescript-destructuring-and-code-organization/roundnums-ts.png&quot; alt=&quot;Round Numbers module. And here's even more TypeScript! OK, there's no types. You're a genius, we get it.&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;destructuring-imports-&quot;&gt;Destructuring Imports &lt;a name=&quot;destructuring-imports&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;So let’s destruct some of these.&lt;/p&gt;

&lt;p&gt;So the first thing I wanted to try was importing and destructuring these imports all in one line. So I was able to get something like this to work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-11-adventures-in-typescript-destructuring-and-code-organization/require-destructur.png&quot; alt=&quot;Require Destructure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So first, we make constants that match the incoming object names. Then we utilize the &lt;code class=&quot;highlighter-rouge&quot;&gt;require()&lt;/code&gt; syntax to pull in our objects. This assigns the &lt;code class=&quot;highlighter-rouge&quot;&gt;two&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;three&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;five&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;seven&lt;/code&gt; names to the constants we pulled in through the &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;This works for the demo project I was messing with, but it’s not the cleanest solution. You undoubtedly noticed the note above and TypeScript yelling at me by underlining words.&lt;/p&gt;

&lt;p&gt;Regardless, we have access to the imported values.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-11-adventures-in-typescript-destructuring-and-code-organization/primenums-console.png&quot; alt=&quot;Prime Numbers Console&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-cleaner-way-to-destructure-imports-&quot;&gt;A Cleaner Way to Destructure Imports &lt;a name=&quot;a-cleaner-way-to-destructure-imports&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The cleaner way I’ve observed is something closer to this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-11-adventures-in-typescript-destructuring-and-code-organization/cleaner-destructure.png&quot; alt=&quot;Cleaner Destructur&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So these values are imported using the &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; syntax with a default import and then use a standard destructure syntax where you create constants matching the name of the objects you’re importing. So now we get this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-11-adventures-in-typescript-destructuring-and-code-organization/roundnums-console.png&quot; alt=&quot;Round Numbers Console&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;Default imports are when you have things being exported via the &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; keyword like this &lt;code class=&quot;highlighter-rouge&quot;&gt;import DefaultObj from ‘ObjMod’&lt;/code&gt;, where a named import is when you’re naming the things you’re importing via something like &lt;code class=&quot;highlighter-rouge&quot;&gt;import { ObjName } from ‘ObjMod’&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This has been the convention I’ve seen most often. I like it; clean, easy to read, and TypeScript isn’t yelling at me.&lt;/p&gt;

&lt;h3 id=&quot;my-conclusions-&quot;&gt;My Conclusions &lt;a name=&quot;my-conclusions&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I will do things the cleaner way, but it comes down to what tool works best for that specific situation.&lt;/p&gt;

&lt;p&gt;One thing I would note is including proper naming for object imports. Since we’re talking about taking away the class prefix, it might make sense to do something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-11-adventures-in-typescript-destructuring-and-code-organization/good-naming.png&quot; alt=&quot;Good Naming&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This combines my preferred way of destructuring along with syntax to rename the imported objects. This practice will help reduce the likelihood of collision bugs if I have several things named like config or something like that.&lt;/p&gt;

&lt;p&gt;Destructuring is an excellent practice for clean code. Not like &lt;strong&gt;THE&lt;/strong&gt; clean code, just code I think is well written and easy for the next person to read.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://playcode.io/904693&quot;&gt;Full Demo Code&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Jun 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/adventures-in-typescript-destructuring-and-code-organization.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/adventures-in-typescript-destructuring-and-code-organization.html</guid>
        
        <category>TypeScript</category>
        
        <category>JavaScript</category>
        
        <category>Destructuring</category>
        
        <category>Newbie</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Adventures In TypeScript</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Typescript_logo_2020.svg/768px-Typescript_logo_2020.svg.png?20210506173343&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ts-so-far&quot;&gt;TypeScript So Far&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#type-definitions-in-functions&quot;&gt;Type Definitions In Functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#generics&quot;&gt;Generics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#union-types&quot;&gt;Union Types&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I started a new job, and the stack is entirely different from what I know. Allow me a moment to break it down.&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;First Engineering job stack: PHP, HTML/CSS, VBScript, C#,.Net, and MySQL. No JavaScript&lt;/li&gt;
  &lt;li&gt;Second job stack: Python, Go, MySQL, Flux (custom functional language). Still, no JavaScript.&lt;/li&gt;
  &lt;li&gt;New job: &lt;strong&gt;It’s all JavaScript&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/KupdfnqWwV7J6/giphy.gif&quot; alt=&quot;Terrifying Screams&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, TypeScript. But even still.&lt;/p&gt;

&lt;p&gt;I’ve had to become fluent in a variety of languages, but the JavaScript ecosystem was never on the list until now. Closest I ever got to building anything was writing tiny, mostly stolen from Stack Overflow, APIs using Express. So what am I to do when I get offered a position building some cool stuff with some incredible people? Say no? I don’t think so.&lt;/p&gt;

&lt;p&gt;As you get further into your career, you start seeing new organization’s coding stuff is like everyone else’s coding stuff. It’s just a matter of implementation. So I’ll spend the next few weeks diving in, asking tons of questions, and learning to understand this—no big deal.&lt;/p&gt;

&lt;p&gt;In the meantime, I’ll write about some of the stuff I’ve learned, starting with my adventure’s learning TypeScript.&lt;/p&gt;

&lt;h3 id=&quot;typescript-so-far-&quot;&gt;TypeScript So Far &lt;a name=&quot;ts-so-far&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://i.pinimg.com/originals/49/75/86/497586976df92a1b7658f930c1bc299e.png&quot; alt=&quot;Chucki Finster image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TypeScript is nitpicky. If I were to make a list of program languages as cartoon characters, I’d put TypeScript beside Chuckie Finster from Rugrats. Quick to point out the dangers and not quiet about their objections. However, the more I learn it, the more it becomes the thing needed to maintain the chaotic, almost Tommy Pickles-like nature of JavaScript. I’m starting to become a fan.&lt;/p&gt;

&lt;p&gt;Everyone needs a real one like Chuck Finster on their adventures.&lt;/p&gt;

&lt;p&gt;Coming from Python as my primary tool in the last job, I needed to shake off the cobwebs for statically typed languages. Just make sure the types match. No big deal, right? Mostly.&lt;/p&gt;

&lt;p&gt;TypeScript takes this a great deal further in its implementations. Let’s go over what I mean.&lt;/p&gt;

&lt;h3 id=&quot;type-definitions-in-functions-&quot;&gt;Type Definitions In Functions &lt;a name=&quot;type-definitions-in-functions&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;In Python, everything is an object. In TypeScript, objects are just everywhere. One example is the use of objects defined in the function signature.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-05-22-adventures-in-typescript/obj-in-function-def.png&quot; alt=&quot;Greeting function&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this example, we define the object &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt; and then give the parameters in the form of function arguments. That makes sense for maintainability. A single type that is only used in one spot is a perfect candidate. It also helps that the IntelliSense will be able to pick up on the type and give you the ability to access those properties in the autocomplete.&lt;/p&gt;

&lt;h3 id=&quot;generics-&quot;&gt;Generics &lt;a name=&quot;generics&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/2/generics.html&quot;&gt;Generics&lt;/a&gt; are stand-ins used for passing around data types where the type of an object or property might not be known. TypeScript takes these to an interesting extreme. Let’s take a look.&lt;/p&gt;

&lt;p&gt;Generics can be used in interfaces; &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/2/objects.html&quot;&gt;interfaces are an abstract type used for holding data&lt;/a&gt;. See what I mean below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-05-22-adventures-in-typescript/interface-generic.png&quot; alt=&quot;Generics for interfaces&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we define and interface &lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt; and assign it the type &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;;T&amp;gt;&lt;/code&gt;; you use the angle brackets to pass in types. The idea here is that this &lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt; interface can be reused and take the form of many different model types. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;T&amp;gt;&lt;/code&gt; is just a stand-in and can be used by any type. The generic is then passed into the &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; property because we don’t know what the value could be.&lt;/p&gt;

&lt;p&gt;So going down into the variable definition for &lt;code class=&quot;highlighter-rouge&quot;&gt;newModel&lt;/code&gt; we are looking to pass in a string type, and we do that by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;gt;&lt;/code&gt; angle brackets. Finally, we assign the &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; property to the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Brenda&quot;&lt;/code&gt;. You can see the printout below that. Now we can pass in any data type we’d like in this interface and use that same type as the value property.&lt;/p&gt;

&lt;p&gt;Cool right? You can do that with functions too! As seen below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-05-22-adventures-in-typescript/function-generic.png&quot; alt=&quot;Generics for functions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; interface with two properties which will serve as an example of a data type for use to pass in. Then we have a function below where the idea is that it will be reused to grab any kind of resource from an API.&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;getResource&lt;/code&gt; function, you can see where the usefulness comes in; Seeing as we’re not sure what type of data we’re going to get, we can pass in the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;T&amp;gt;&lt;/code&gt; generic and then use that generic to return an array of types &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;T&amp;gt;&lt;/code&gt;. Here we can safely use the &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; interface or any other interface. Check out the results.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-05-22-adventures-in-typescript/function-generic-alocation.png&quot; alt=&quot;Use of Generics in functions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We called the &lt;code class=&quot;highlighter-rouge&quot;&gt;getResource&lt;/code&gt; function and passed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; type, and we can then map out the results from the &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; type. As seen in the notes, we’ll also have access to the type properties via autocomplete.&lt;/p&gt;

&lt;h3 id=&quot;union-types-&quot;&gt;Union Types &lt;a name=&quot;union-types&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Something that blew my mind was working with &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types&quot;&gt;union types&lt;/a&gt;. It was weird syntax I’d never seen, and it threw me until someone explained it to me.&lt;/p&gt;

&lt;p&gt;A union type is a type that can be one of two or more types. Let me show you what I mean.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-05-22-adventures-in-typescript/union-type.png&quot; alt=&quot;union-type&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We defined &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;, which can be either a string or a variable. The pipe operator, &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;, which is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#bitwise_operators&quot;&gt;the bitwise OR operator in JavaScript&lt;/a&gt;, denotes the different types of which this variable could be. Below are the results from printing this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-05-22-adventures-in-typescript/union-type-assignment.png&quot; alt=&quot;union-type-assignment.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we can assign multiple types to this variable through union types.&lt;/p&gt;

&lt;p&gt;This one is pretty simple, but we have union types in the source code at work that could be one of ten different types.&lt;/p&gt;

&lt;p&gt;This is again great for code reuse in that we can use assets differently due to them being able to take the form of more than one type and have different behavior.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;There is a ton of other stuff I’ve learned. Much of which is still in my notes and on my &lt;a href=&quot;https://github.com/georgeoffley/til&quot;&gt;Today I Learned repo&lt;/a&gt; and in need of digesting.&lt;/p&gt;

&lt;p&gt;This is just the beginning. I have an opportunity to learn so much from this group of engineers, and I am excited. In doing that, maybe I can help someone else learn too!&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Sun, 22 May 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/adventures-in-typescript.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/adventures-in-typescript.html</guid>
        
        <category>TypeScript</category>
        
        <category>JavaScript</category>
        
        <category>Newbie</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Context In React</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-18-context-in-react/cover.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#data-in-react&quot;&gt;Data In React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#context-in-react&quot;&gt;Context In React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#context-in-use&quot;&gt;Context In Use&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;React offers the ability to build out web applications quickly. One of the details of this strategy includes passing data to different components in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction&quot;&gt;DOM&lt;/a&gt;. This can consist of needed data to build features, states of a component, and anything you can think of.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;data-in-react-&quot;&gt;Data In React &lt;a name=&quot;data-in-react&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;One great pattern in React is how data can be passed through the different components. However, this can get messy.&lt;/p&gt;

&lt;p&gt;An application might be broken down like below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-18-context-in-react/basic-app-layout.png&quot; alt=&quot;Basic layout of an app&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A collection of components. Some of these components return other components. These are called parent components, and their children are nested components.&lt;/p&gt;

&lt;p&gt;We can pass data back and forth throughout the lifetime of each component. Working with only props, for example, lets us pass data down the tree to the components that need it. However, this can present a problem.&lt;/p&gt;

&lt;p&gt;Using props or properties is a great way to handle data. However, the deeper the component is buried, the more you have to pass the props down. This is called &lt;a href=&quot;https://beta.reactjs.org/learn/passing-data-deeply-with-context#the-problem-with-passing-props&quot;&gt;prop drilling&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-18-context-in-react/react-props-only.png&quot; alt=&quot;React app with only Props&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using the workflow above, we have a couple of nested components passing the &lt;code class=&quot;highlighter-rouge&quot;&gt;Username&lt;/code&gt; prop down the tree. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Page&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;MainContent&lt;/code&gt; props are just passing down the props used by the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserCard&lt;/code&gt; component like a vertical &lt;a href=&quot;https://youtu.be/uviAFx4K78Y&quot;&gt;game of telephone&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now combine this with having to scale out your context to include hundreds of bits of data or state, which need to be passed down to various components at various levels of the tree, and we’ve got a problem.&lt;/p&gt;

&lt;h3 id=&quot;context-in-react-&quot;&gt;Context in React &lt;a name=&quot;context-in-react&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://reactjs.org/docs/context.html&quot;&gt;Context&lt;/a&gt; solves the problem by allowing us to pass down data without relying on continually passing props through components. Context in React should be used handling global data that does not have to change often. Using context to keep track of our username state improves the workflow by allowing components to use context as needed without passing it down the tree. Pictured below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-18-context-in-react/react-context.png&quot; alt=&quot;React with Context&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As illustrated above, we can provide the context to one component, and the children component will be able to access the context regardless of the level they are at. All without needing to have their parent components pass the data down.&lt;/p&gt;

&lt;h3 id=&quot;context-in-use-&quot;&gt;Context In Use &lt;a name=&quot;context-in-use&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;So let’s look at an example of context. I created a small React app and just made some barebones components. The first file we should check out is the &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-18-context-in-react/app.js.png&quot; alt=&quot;App.js file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are some lines of note, as you’ve undoubtedly seen, and then some other stuff needed for using context. The first out-of-place thing is using the React function &lt;code class=&quot;highlighter-rouge&quot;&gt;React.createContext()&lt;/code&gt;, which we use to create a context object. We also made a &lt;a href=&quot;https://reactjs.org/docs/context.html#contextprovider&quot;&gt;&lt;em&gt;provider&lt;/em&gt;&lt;/a&gt; for our context object and wrapped our &lt;code class=&quot;highlighter-rouge&quot;&gt;Page&lt;/code&gt; component in it.&lt;/p&gt;

&lt;p&gt;Context works using Providers and Consumers. In this case, we are looking to provide the context to our app for consumption by the components. So we use the provider tag, which every context object has, to pass in the &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; string to our nested components.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; attribute is a prop that the provider accepts and can pass down the tree. Many consumers can subscribe to one provider, and we’ll talk about that more.&lt;/p&gt;

&lt;p&gt;We’re not passing anything to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Page&lt;/code&gt; component except the &lt;code class=&quot;highlighter-rouge&quot;&gt;Header&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;MainContent&lt;/code&gt; components.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-18-context-in-react/page.js.png&quot; alt=&quot;Page.js component&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;Header&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-18-context-in-react/header.js.png&quot; alt=&quot;Header.js component&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The header is a regular old React component. However, we use the React hook &lt;code class=&quot;highlighter-rouge&quot;&gt;React.createContent()&lt;/code&gt; to subscribe to the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserContext&lt;/code&gt; object that we import into this component from the &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt; component. We can now use the curly brackets to pass in the &lt;code class=&quot;highlighter-rouge&quot;&gt;userNameContext&lt;/code&gt; into the JSX being returned by the component.&lt;/p&gt;

&lt;p&gt;Let’s look at another example. Below we have our &lt;code class=&quot;highlighter-rouge&quot;&gt;MainContent&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-18-context-in-react/maincontent.js.png&quot; alt=&quot;MainContent.js component&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Just another component with a nested component, &lt;code class=&quot;highlighter-rouge&quot;&gt;UserBox&lt;/code&gt;. Let’s look at what is in the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserBox&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-18-context-in-react/userbox.js.png&quot; alt=&quot;userbox.js.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;UserBox&lt;/code&gt; component can do as our header did; import the context object, subscribe to the provider using the &lt;code class=&quot;highlighter-rouge&quot;&gt;useContext&lt;/code&gt; hook and pass in the context using that context object. This is cool because we’re using context two levels below from where it was created without passing props through subsequent components.&lt;/p&gt;

&lt;p&gt;The app would look something similar to the below image. We can see the username string in the &lt;code class=&quot;highlighter-rouge&quot;&gt;header&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserCard&lt;/code&gt; components. I am not one for styling things effectively, so hold your judgments.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-18-context-in-react/whole-app.jpg&quot; alt=&quot;The Whole App&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Changing the value of the state would cause a render for the other components subscribed to the context. So it could cause issues if the state is constantly changing. So context fits nicely with a global state that is not likely to change often.&lt;/p&gt;

&lt;p&gt;The code for the above example can be &lt;a href=&quot;https://github.com/georgeoffley/Blog-Code/tree/3f6e720bfedcc049c73e8a2fd14b8c06ec7edf78/context-in-react/context-in-react&quot;&gt;found on my GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This has been an interesting learning experience. I’m happy to have gotten one of the fundamentals of React down on paper, so to speak. I hope this helps someone new coming into the React scene.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Apr 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/context-in-react.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/context-in-react.html</guid>
        
        <category>React</category>
        
        <category>JavaScript</category>
        
        <category>Newbie</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Spiking Tailwind CSS in a React App</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-02-spiking-tailwind-in-a-react-app/cover.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tailwind&quot;&gt;Tailwind&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-tailwind-in-react&quot;&gt;Using Tailwind in React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#something-a-little-more&quot;&gt;Something a Little More&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;It’s been some time since I did any frontend development, and I don’t miss it. After a couple of years of learning the fundamentals, I would have loved to have some alternatives to manually writing CSS.&lt;/p&gt;

&lt;p&gt;Now that I am diving back into it, I am happy there are tools not to replace but improve the CSS experience. In that spirit, I want to look at &lt;a href=&quot;https://tailwindcss.com/&quot;&gt;Tailwind CSS&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;tailwind-css-&quot;&gt;Tailwind CSS &lt;a name=&quot;tailwind&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Tailwind is different from other CSS frameworks I’ve tried. The software works on a lower level to allow easy CSS styling utilizing class names. Bootstrap works similarly, but the difference is that Tailwind does not come with predefined components. It is also different because the class names are compiled into CSS code.&lt;/p&gt;

&lt;p&gt;Tailwind is also not opinionated about how you make your designs, and thus they give you the tools you need and let you create unique components. It’s the difference between &lt;a href=&quot;https://www.timberland.com/shop/CategoryDisplay?catalogId=10101&amp;amp;langId=-1&amp;amp;categoryId=13502&amp;amp;storeId=7101&amp;amp;productId=p_20355&amp;amp;audience=men&amp;amp;page=configure&quot;&gt;designing boots on a website&lt;/a&gt; and having all the materials right before you to cobble together your shoes. This alone is valuable because you can avoid falling into the &lt;a href=&quot;https://www.dagusa.com/&quot;&gt;Bootstrap design trap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tailwind is a &lt;a href=&quot;https://tailwindcss.com/docs/utility-first&quot;&gt;“utility-first CSS Library,”&lt;/a&gt; From what I glean from their site, it means they tried to create a framework from a set of constrained utilities. This seems to translate into the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There are no more CSS class names to create in both HTML and CSS files as styles are implemented using low-level utility classes.&lt;/li&gt;
  &lt;li&gt;You add the styles you want into the HTML classes, which the compiler uses to generate CSS (which is attractive to me).&lt;/li&gt;
  &lt;li&gt;Your CSS files don’t grow since you’re generally not creating new styles.&lt;/li&gt;
  &lt;li&gt;The ability to create reusable styles using things like &lt;a href=&quot;https://tailwindcss.com/docs/reusing-styles#loops&quot;&gt;loops&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tailwind also gives you ways to easily extend their utilities by utilizing config files for adding things like custom colors, fonts, etc.&lt;/p&gt;

&lt;p&gt;I’ve noticed that they seem to lean into the idea of long strings of class names in HTML over regular CSS. You’ll see what I mean.&lt;/p&gt;

&lt;h3 id=&quot;setup-&quot;&gt;Setup &lt;a name=&quot;setup&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;So to try this and to learn the tech better for use in my work, I created a quick React application.&lt;/p&gt;

&lt;p&gt;After the React app creation, we can run the below commands.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tailwindcss
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will install the needed packages.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npx tailwindcss init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above command will create the config files we need, the &lt;code class=&quot;highlighter-rouge&quot;&gt;tailwind.config.js&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;postcss.config.js&lt;/code&gt; files. The &lt;code class=&quot;highlighter-rouge&quot;&gt;tailwind.config.js&lt;/code&gt; is where any customization options will go. By default, Tailwind looks for this file at the root of a project to create any customizations. For example, if you want to add colors or fonts that Tailwind does not have built-in, they will go in that config file.&lt;/p&gt;

&lt;p&gt;After that is installed, you replace everything in your &lt;code class=&quot;highlighter-rouge&quot;&gt;index.css&lt;/code&gt; file with the below lines.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@tailwind&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@tailwind&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@tailwind&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finally, to ensure that all the template files are added to the Tailwind config, make sure the &lt;code class=&quot;highlighter-rouge&quot;&gt;tailwind.config.js&lt;/code&gt; file looks like the below code.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./src/**/*.{html,js}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s a bit much, but that’s essentially it. You’re now ready to start styling stuff.&lt;/p&gt;

&lt;h3 id=&quot;using-tailwind-in-react-&quot;&gt;Using Tailwind in React &lt;a name=&quot;using-tailwind-in-react&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;After setting up our React project and installing Tailwind, I was ready to go. So I got rid of all the startup React stuff and started small.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;I'm using Tailwind!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pretty easy, and we get a simple heading tag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-02-spiking-tailwind-in-a-react-app/h1_no_style.png&quot; alt=&quot;H1 Tag with no style&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s start small and add some styling.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text-red-700 text-6xl hover:text-9xl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;I'm using Tailwind!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now I added a couple of styling classes to the JSX, and just like we were editing a CSS file, we got some results.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-02-spiking-tailwind-in-a-react-app/h1_style_no_hover.png&quot; alt=&quot;H1 tag with some basic styles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You may also notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;hover&lt;/code&gt; selector in there. Tailwind takes care of these, similar to how CSS does. You prepend the effect you want and the outcome, and it works just the same.And we can see the style change a little when we hover over the text.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-02-spiking-tailwind-in-a-react-app/h1_style_hover.png&quot; alt=&quot;Hover effect&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Adding these class names saved me from opening up VSCode and adding styles to a CSS file. I am already sold on Tailwind.&lt;/p&gt;

&lt;p&gt;You can also see the core use of Tailwind in adding class names to the HTML tags. This is a small example, but tags can have tons of styles, so adding a class name into the HTML can get overwhelming quickly. This is the language they lean into that I mentioned above.&lt;/p&gt;

&lt;h3 id=&quot;something-a-little-more-&quot;&gt;Something a Little More &lt;a name=&quot;something-a-little-more&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I am not a designer, but I find this setup easy to create components. So let’s say I broke my app into pieces. How can I style this card component I made? Tailwind makes it simple.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;p-20 bg-green-100&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h3&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;text-green-300 mb-4 text-sm font-bold&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cool&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Tailwind&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Stuff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;border-4 border-green-800 bg-white p-6 rounded-lg shadow-lg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;text-2xl font-bold mb-2 text-gray-800&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Look&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;text-gray-700&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;We&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;did&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Tailwind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the results.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-02-spiking-tailwind-in-a-react-app/card_styles.png&quot; alt=&quot;Basic card with styles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I didn’t have to write a single bit of CSS for this, and now I have a perfectly usable component. There’s no ending to this rabbit hole. Design all you want.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I can’t bring myself to write CSS. It’s a doomed relationship; with too much bad blood and too much history. However, I might just get through with Tailwind as a buffer for those awkward times I have to sit with it.&lt;/p&gt;

&lt;p&gt;Hyperbole aside, Tailwind is not a replacement for CSS but a fantastic addition to CSS for easily styling web components. Coupled with React, this was how we were meant to make apps. I’m excited to continue learning and hope this helped.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Small disclaimer&lt;/strong&gt;: I am not suggesting anyone reading this who might be new to frontend development jump straight into learning Tailwind. That journey starts with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/How_CSS_works&quot;&gt;learning how CSS works&lt;/a&gt;. Much like filmmaking, learn all the fundamentals first and then break the rules at your leisure.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Apr 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/spiking-tailwind-in-a-react-app.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/spiking-tailwind-in-a-react-app.html</guid>
        
        <category>React</category>
        
        <category>Tailwind</category>
        
        <category>JavaScript</category>
        
        <category>Intermediate</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Using SWR for Easy API Calls in React</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-25-using-swr-for-easy-api-calls-in-react/cover.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#swr&quot;&gt;SWR&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;React gives us the ability to create powerful and scalable apps. We need to quickly implement API calls to get our data displayed in our App for them to run. That’s where &lt;a href=&quot;https://swr.vercel.app/&quot;&gt;SWR&lt;/a&gt; comes in handy.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;swr-&quot;&gt;SWR &lt;a name=&quot;swr&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;My company embarked on a journey to create a new app for stakeholders. This included React for the frontend. Since then, I’ve been working on some React side projects to reinforce my learning from work. I struggled to use some built-in hooks to no avail. Then came SWR, which was mentioned as a way to do API calls in our work app. After integrating SWR into one of my side projects, I am sold.&lt;/p&gt;

&lt;p&gt;SWR is a react library used for easily fetching information from an API endpoint. SWR stands for “stale while revalidate.” According to their site, they derive the name from the practice of invalidating the cache. They use the cache to return data then send the fetch request to get up-to-date data. This makes sense seeing how the library seems to fetch data without user intervention.&lt;/p&gt;

&lt;p&gt;I was impressed seeing what is essentially a stream of data on my app as the data seamlessly updating when adding data. Plus, it’s lightweight and easy to implement. It also boasts some features over the built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hook as it also passes in errors for better exception handling and a more seamless experience maintaining the code.&lt;/p&gt;

&lt;h3 id=&quot;example-&quot;&gt;Example &lt;a name=&quot;example&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I’ll take us through how I implementedSWR it into my app. I already have a  React app, and I ran the install for SWR detailed below.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;swr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once that finished installing, I went to work. The first thing was to import the &lt;code class=&quot;highlighter-rouge&quot;&gt;useSWR&lt;/code&gt; function into one of the components.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-25-using-swr-for-easy-api-calls-in-react/import.png&quot; alt=&quot;Example import statement&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next was a simple fetcher function, taken right out of their docs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-25-using-swr-for-easy-api-calls-in-react/fetcher.png&quot; alt=&quot;Create fetcher function&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some notes about the fetcher. SWR takes in any fetcher object you want to pass to it. You can utilize libraries like &lt;a href=&quot;https://github.com/developit/unfetch&quot;&gt;unfetch&lt;/a&gt;, &lt;a href=&quot;https://axios-http.com/docs/intro&quot;&gt;Axios&lt;/a&gt;, or &lt;a href=&quot;https://graphql.org/&quot;&gt;GraphQL&lt;/a&gt;. I used the native fetch as I don’t have any unique logic running, and I am only returning simple JSON objects. So I configure it to use JSON for returning the data.&lt;/p&gt;

&lt;p&gt;SWR has three states for the data returned, &lt;code class=&quot;highlighter-rouge&quot;&gt;Loading&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Ready&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Error&lt;/code&gt;. These states can be used for exception handling or creating logic for loading behavior.&lt;/p&gt;

&lt;p&gt;The last thing we want to do is use the &lt;code class=&quot;highlighter-rouge&quot;&gt;useSWR&lt;/code&gt; function we imported to grab our file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-25-using-swr-for-easy-api-calls-in-react/useSWR.png&quot; alt=&quot;useSWR example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are a couple of things of note within this call. First, we’re passing in the fetcher function we created earlier and the API endpoint. Secondly, we set the results as an array with &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt; since we get back error data if we error out and want to store the message. Our returned data will go into the data variable.&lt;/p&gt;

&lt;p&gt;That’s easy. React treats the return values as an object. The data can be accessed using a &lt;code class=&quot;highlighter-rouge&quot;&gt;map()&lt;/code&gt; function and the  &lt;code class=&quot;highlighter-rouge&quot;&gt;data.&amp;lt;tag&amp;gt;&lt;/code&gt; syntax.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-25-using-swr-for-easy-api-calls-in-react/data.png&quot; alt=&quot;Data object named access&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;Conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;After some &lt;a href=&quot;https://twitter.com/georgeoffley/status/1497606201831567360?s=20&amp;amp;t=euyltPybu9OOs5SPdChQOQ&quot;&gt;documented time experimenting&lt;/a&gt;, I was resigned to React’s perceived complexity. However, as I build out more and more small accomplishments, I realized React is like anything else; it takes practice and the right tools. SWR is something I’m putting into my React utility belt. I hope this helps someone who might be struggling.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Mar 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/using-swr-for-easy-api-calls-in-react.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/using-swr-for-easy-api-calls-in-react.html</guid>
        
        <category>React</category>
        
        <category>JavaScript</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Table Resource VS Client in AWS</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-19-table-resource-vs-client-in-aws/cover.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the_problem&quot;&gt;The Problem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the_answer&quot;&gt;The Answer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;The Answer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;DynamoDB provides an excellent way to store data in a flexible and scalable way. Add it to Lambda and API Gateway, and you have a powerful group of tools, &lt;a href=&quot;https://georgeoffley.com/blog/using-api-gateway-with-lambda.html&quot;&gt;which I have written about&lt;/a&gt;. It was for these reasons that I chose to use it for a side project I am building to familiarize myself with React. It was in these features that I struggled with an issue in how &lt;a href=&quot;https://github.com/boto/boto3&quot;&gt;boto3&lt;/a&gt;, the SDK for talking with AWS in Python, implements their libraries.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;the-problem-&quot;&gt;The Problem &lt;a name=&quot;the_problem&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I have a personal rule; if it takes a certain amount of time to debug an issue, then there is something about the underlying technology that I do not understand. As it happens, I spent some time trying to get the APIs to work correctly in my side app recently. The problem boiled down to how my return data from the API was displayed in the application. It confounded me for some time. So I stepped back and challenged my assumptions about the tech. I followed the rabbit hole back to the API I wrote, where I found the problem.&lt;/p&gt;

&lt;p&gt;It turned out the problem was in using the &lt;a href=&quot;https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#client&quot;&gt;Client class&lt;/a&gt; in boto3. From their docs, Amazon calls the Client class a “low-level client representing Amazon DynamoDB.” So this made sense when I started seeing how the API would interact with my app.&lt;/p&gt;

&lt;p&gt;When making a call to the API, the JSON returned would have all these extra tags on them. Below is an example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-19-table-resource-vs-client-in-aws/client_resp.png&quot; alt=&quot;client_resp.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It seems that DynamoDB was tagging the data types, as string types would have the type “S” for string values and “N” for number values. It made little sense to me. There are possible solutions available in the library that will help &lt;a href=&quot;https://towardsaws.com/making-use-of-boto3-out-of-the-box-dynamodb-serializers-1dffbc7deafe&quot;&gt;unmarshal the data and clean it up a little&lt;/a&gt;, but these tools are &lt;a href=&quot;https://github.com/boto/boto3/blob/e353ecc219497438b955781988ce7f5cf7efae25/boto3/dynamodb/types.py#L233&quot;&gt;buried in the source code for boto3&lt;/a&gt; and don’t seem to have official documentation. There’s a &lt;a href=&quot;https://github.com/boto/boto3/issues/1630&quot;&gt;yet unresolved GitHub issue about it&lt;/a&gt;. So I had to look deeper for a solution.&lt;/p&gt;

&lt;h3 id=&quot;the-answer-&quot;&gt;The Answer &lt;a name=&quot;the_answer&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;After a while of searching through the AWS docs and trying various solutions, I was able to come up with a fix. I rewrote my API to grab all the records using the &lt;a href=&quot;https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#table&quot;&gt;Table&lt;/a&gt; class rather than the Client class.&lt;/p&gt;

&lt;p&gt;It turns out that the Client class works precisely like a low-level abstraction should, returning all the stuff that’s stashed into DynamoDB data tags and all. Not very reader-friendly.&lt;/p&gt;

&lt;p&gt;Here you can see what the code looks like using the Client class.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-19-table-resource-vs-client-in-aws/client_code.png&quot; alt=&quot;client_code.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here is the updated code for the Table resource.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-19-table-resource-vs-client-in-aws/table_code.png&quot; alt=&quot;table_code.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Very little in the logic changed. We are still creating a connection to AWS using a Lambda function. We are still returning the response to that function.&lt;/p&gt;

&lt;p&gt;There are, however, a couple of differences. We call the Table resource a little differently from the client, and I added some pagination to the table code. As boto3 will only return everything up to 1 MB, you need to put in pagination to get all your results.&lt;/p&gt;

&lt;p&gt;Making that change makes the API returns a cleaner response.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-19-table-resource-vs-client-in-aws/table_resp.png&quot; alt=&quot;table_resp.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No data tags and no messy nesting in our API data anymore.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I like challenging my assumptions. Being outside my comfort zone is how I learn best. I’ve been making small scripts similar to that using the Client class for a while now, so it was good to understand the limitations in the tool and the tradeoffs using others. How this discomfort shakes out in the React app remains to be seen, but I am sure I’ll figure those problems out too. I hope this helps someone.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Mar 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/table-resource-vs-client-in-aws.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/table-resource-vs-client-in-aws.html</guid>
        
        <category>AWS</category>
        
        <category>Lambda</category>
        
        <category>Intermediate</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Modules in React</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/cover.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#react-modules&quot;&gt;React Modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#in-app-example&quot;&gt;In-App Example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#named-v-default&quot;&gt;Named Imports vs. Default Imports&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The organization of your apps is one of the most effortless quality of life improvements you can make. Recently I’ve been deep-diving into React for a work project, and I was able to get a crash course in how you organize one such app. Including how React treats its files and how we’re importing them. So today, I’d like to get into how React handles modules and how importing is done.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;react-modules-&quot;&gt;React Modules &lt;a name=&quot;react-modules&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://reactjs.org/docs/faq-structure.html#is-there-a-recommended-way-to-structure-react-projects&quot;&gt;React has no opinions on how you organize your code&lt;/a&gt;. This is fine as engineers usually have plenty of views on this, and the subject matter expert we’re working with was no exception. After talking it through, we decided to organize our app where each feature was organized into its own directory. This also gives us a choice to utilize &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; files to handle exports.&lt;/p&gt;

&lt;p&gt;The most straightforward analogy coming from Python was that React lets you put your files into a directory and then create an &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; file that exports everything. This is similar to how Python will utilize an &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; file to export everything into the main logic files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/react_modules.jpeg&quot; alt=&quot;React Modules diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So if I have one or more modules I need to import into the &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; file for a feature, I can utilize the &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; file to import all of them and serve as one export point for your &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; or wherever you are utilizing said feature.&lt;/p&gt;

&lt;h3 id=&quot;in-app-example-&quot;&gt;In-App Example &lt;a name=&quot;in-app-example&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Let’s go through a quick example. I created a small React application to demonstrate what I am talking about. I organized it as such.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Src
    &lt;ul&gt;
      &lt;li&gt;App Feature
        &lt;ul&gt;
          &lt;li&gt;Hello.js&lt;/li&gt;
          &lt;li&gt;Worlds.js&lt;/li&gt;
          &lt;li&gt;Index.js&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;App.js&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I created a directory named AppFeature to hold the modules I want to organize under there. The Hello and World modules look similar; they are only components that render a new div tag with some words. See the code below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/hello.png&quot; alt=&quot;hello.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/world.png&quot; alt=&quot;world.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The AppFeature directory will have an &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; file that will handle exporting. This file will be used as a “central hub” where we can export all our modules into different parts of the application. You can see the code below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/indexjs.png&quot; alt=&quot;indexjs.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the code above I put in two export statements. From here is where our modules will be exported from. This makes for cleaner imports into our &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; file. As seen below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/appjs.png&quot; alt=&quot;appjs.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the top, you can see a clean import statement where we import a list of modules from the AppFeature directory. After that, we can apply them right into our application. It comes out looking like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/app_page.png&quot; alt=&quot;app_page.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;named-imports-vs-default-imports-&quot;&gt;Named Imports vs. Default Imports &lt;a name=&quot;named-v-default&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The above example details what are referred to as Named Imports, but that is not the only way to handle exporting and importing. There are other ways to export/import your needed modules. For example, suppose we are building components with multiple modules that do not need to be imported into the main application files. In that case, we can organize them so our main module can import all it needs and serve as the main component or class module to be exported. As demonstrated below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/defualt_hello_world.png&quot; alt=&quot;defaulthelloworld.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/default_indexjs.png&quot; alt=&quot;default_index.js&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/default_appjs.png&quot; alt=&quot;default_app.js&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we organize our code such that we want to keep internal modules internal, we can explore this type of organization. Using Default Imports, we’re still doing the same thing: we use our &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; file to handle our exports. The difference is that we’re organizing everything into one module and only exporting that one module. This makes everything even cleaner.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;One of the goals for the application we are building is to optimize our workflow. Organizing your code by utilizing modules in React is just one way in which we are meeting that goal. There are many things to consider, but I believe we are headed in the right direction. I hope this helps someone looking to organize their React projects.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Mar 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/modules-in-react.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/modules-in-react.html</guid>
        
        <category>React</category>
        
        <category>Newbie</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Implementing Routing in React</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-12-implementing-routing-in-react/cover.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#react_router_dom&quot;&gt;React Router Dom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#explainer&quot;&gt;Explainer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Implementing routing in React applications can be one of the first tasks you undertake in the coding part of the development lifecycle. This was true for my team when we sat down to a mob programming session to go through a couple of our stories for a project. We brought in some help from people who know React to help us get started. I am not a React developer, so this is the first time I had actual exposure to people with expertise, so I am grateful it was a group programming session. I don’t know what I was doing when the rest of the world learned React, but I can only guess it had something to do with playing the Sims. Regardless I use the right tool for the job, and I need to learn it now. The first thing we did was implement some routing, and I will implement a much more simplified version of what we did below to show what I learned.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;react-router-dom-&quot;&gt;React Router Dom &lt;a name=&quot;react_router_dom&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I understand React is a set of APIs and libraries used in different ways to implement cool stuff on your screen. We got more into using TypeScript on top of React, but I like to write about things even if I only have a cursory knowledge of them, and my understanding of TypeScript doesn’t even measure up to that. So I’ll stick with React only for now.&lt;/p&gt;

&lt;p&gt;Routing in a React app is what the app does when a user goes to a specific URL. As we’re dealing with React, we need to create components that make up our pages, and we’ll use a library to route to those components. In our case, we used the ever-popular &lt;a href=&quot;https://reactrouter.com/&quot;&gt;React Router Dom&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;setup-&quot;&gt;Setup &lt;a name=&quot;setup&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;An easy bit of setup. I created a new app using &lt;code class=&quot;highlighter-rouge&quot;&gt;npx create-react-app react-router&lt;/code&gt;, which gave me a basic app. I then ran &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install react-router-dom&lt;/code&gt; to install the needed package. Then I was off to the races.&lt;/p&gt;

&lt;p&gt;I created two simple page components to then import into my main App.js.&lt;/p&gt;

&lt;p&gt;The Home component.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-12-implementing-routing-in-react/home.png&quot; alt=&quot;Home component&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the About component.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-12-implementing-routing-in-react/about.png&quot; alt=&quot;About component&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, I went through some of the docs and found an easy way to get basic routing. All of which is reflected in my main App.js file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-12-implementing-routing-in-react/app.png&quot; alt=&quot;App.js file&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;explainer-&quot;&gt;Explainer &lt;a name=&quot;explainer&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This needs explaining. I created a basic component for the home and the about pages. Both of them just return a header with the name in the tag. I imported them into app.js and imported BrowserRouter, Routes, and Route from the React Router Dom package. Each of these is going to help us create routing.&lt;/p&gt;

&lt;p&gt;First, we create the router using the BrowserRouter tag. Then nested in there, we make the Routes block. The routes block, which took the place of the Switch block in v6 of the React Router Package, looks at our nested routes and tells the app where to go. Finally, we have the “links” in the Route tags. We specify the path to look for in the Route tag and which element to point at. It’s also good to remember that the element should take the form of curly brackets and an open and closing tag (the &lt;code class=&quot;highlighter-rouge&quot;&gt;{&amp;lt;Home/&amp;gt;}&lt;/code&gt; you see in my code). I mention this as most tutorials I looked up about this used Switch, Links, and the elements used the &lt;code class=&quot;highlighter-rouge&quot;&gt;{Home}&lt;/code&gt; syntax.&lt;/p&gt;

&lt;p&gt;And that is it. If I navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:3000/&lt;/code&gt;, we see the below image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-12-implementing-routing-in-react/home_page.png&quot; alt=&quot;Home Page after implementing routing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the same thing on the about page at &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:3000/about&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-12-implementing-routing-in-react/about_page.png&quot; alt=&quot;About Page after implementing routing&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;It is a simple thing but something I learned while working with a team of React people. Using React is still akin to reading an upsidedown French map of Germany. However, I am starting to grasp the basics. Everything seems just to be something that’s been imported from somewhere else. Next time I think I’ll write about how you can create React packages similar to Python for easy and clean importing.&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Mar 2022 12:00:00 -0500</pubDate>
        <link>https://georgeoffley.com/blog/implementing-routing-in-react.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/implementing-routing-in-react.html</guid>
        
        <category>React</category>
        
        <category>Newbie</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Dockerizing System Tests With Selenium</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/selenium.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#selenium_webdriver&quot;&gt;Selenium WebDriver&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#running_tests&quot;&gt;Running Tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#notes&quot;&gt;Notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;We are spinning up a new application for some end users to enter data, so we need to build a robust testing system. Unit tests are a must, but those only test to ensure that all the classes, methods, and functions do what we expect. On top of that, we also need to verify that the web app as a whole looks and behaves how we hope it does to have a complete end-to-end testing apparatus. My goal for these first few spikes in the project was to find a tool for system testing and see if we could make it modular and easily automate it to not interfere with our workflow. I believe I found the solution. &lt;a href=&quot;https://www.selenium.dev/&quot;&gt;Selenium&lt;/a&gt; is a suite of tools for creating and automating browser tests, and I think it is what I was looking for. Let’s dive in.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;selenium-webdriver-&quot;&gt;Selenium WebDriver &lt;a name=&quot;selenium_webdriver&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Selenium is a multi-language suite of tools for creating browser-based automation tests. This tool will automate opening a browser, looking for a test condition, and reporting a pass or fail. Selenium is a whole suite of tools, but I decided to focus on &lt;a href=&quot;https://www.selenium.dev/documentation/webdriver/&quot;&gt;Selenium Web Driver&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Much like in the name, the software “drives” the web browser. Much like humans, we can bring up the webpage in a browser, enter in data, look up tags, and utilize all these capabilities to write tests using the API Selenium provides. A test opens a browser, &lt;a href=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/selenium_video.mp4&quot;&gt;and like magic, many things happen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My goal is to automate as much of this process as possible. So it would not be ideal to have a bunch of browsers launch with with ghosts running tests. A better solution was to run &lt;a href=&quot;https://github.com/SeleniumHQ/docker-selenium&quot;&gt;&lt;em&gt;headless browsers&lt;/em&gt;&lt;/a&gt; using container images provided by Selenium. This solution gives us a container with a built-in web browser which we don’t see that our script runs a test against. The results we can see in the terminal.&lt;/p&gt;

&lt;p&gt;As our project utilizes &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;, the easiest way to start is to grab the &lt;a href=&quot;https://github.com/SeleniumHQ/docker-selenium&quot;&gt;Docker image for the browser&lt;/a&gt; and start making some scripts. How this will look in the final solution is still to be determined, but I can replicate what I did for the sake of this write-up.&lt;/p&gt;

&lt;h3 id=&quot;setup-&quot;&gt;Setup &lt;a name=&quot;setup&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;To begin, I set up a &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file with the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/docker-compose.png&quot; alt=&quot;docker-compose.yml file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This gave us two containers, our browser using the Chrome-based selenium image and a Ruby-based container to run the script. Our new stack uses a lot of Ruby. The system container is built using an image from the docker file in the test directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/ruby-dockerfile.png&quot; alt=&quot;Dockerfile for Ruby based system&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This build handles installing the gems we need, including selenium-webdriver and the chromedriver-helper. Both are used to run our Web Driver script and utilize Chrome capabilities.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/gemfile.png&quot; alt=&quot;Gemfile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, the last bit is the script itself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/test-script.png&quot; alt=&quot;Test Script&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;running-tests-&quot;&gt;Running Tests &lt;a name=&quot;running_tests&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Let’s look at this script. My Ruby is rusty, but I tried my best. We set all our requirements, set a timer to make the thread sleep (more on that later), and then we write our test. In the script, we are writing the tests using the &lt;a href=&quot;https://rspec.info/&quot;&gt;RSpec&lt;/a&gt;. RSpec is a &lt;a href=&quot;https://www.jetbrains.com/mps/concepts/domain-specific-languages/&quot;&gt;domain-specific language&lt;/a&gt; built using Ruby to test Ruby code. We use this to test our behaviors using the describe and it blocks.&lt;/p&gt;

&lt;p&gt;We start by defining the &lt;a href=&quot;https://www.selenium.dev/documentation/webdriver/capabilities/&quot;&gt;capabilities&lt;/a&gt; we are looking for; in this case, we are testing a chrome browser, so we need to specify that.&lt;/p&gt;

&lt;p&gt;Then we use a variant of WebDriver called the &lt;a href=&quot;https://www.selenium.dev/documentation/webdriver/remote_webdriver/&quot;&gt;Remote WebDriver&lt;/a&gt;. Remote Driver is written identically to WebDriver, just with the caveat of the driver logic looking for the browser in another system. Here we set the address for the Chrome Selenium container so that our WebDriver knows to look for this remote machine to run the test against.&lt;/p&gt;

&lt;p&gt;Both containers are in the same network provided by Docker Compose, so we use the hostnames. Also, note that we are &lt;a href=&quot;https://docs.docker.com/compose/networking/&quot;&gt;mapping port 4444&lt;/a&gt; as the WebDriver will use this port to communicate.&lt;/p&gt;

&lt;p&gt;We then set the driver to navigate to our chosen website as an action. The following line sets what we expect to see using RSpec’s handy &lt;a href=&quot;https://relishapp.com/rspec/rspec-expectations/docs/built-in-matchers&quot;&gt;&lt;em&gt;expect function&lt;/em&gt;&lt;/a&gt;. We expect the page’s title to be equal to a string we provide and fail if the title is mismatched. Then we’ll just take a screenshot and save the image to a local drive using one of the built-in save_screenshot functions. Finally, and this was important, use the &lt;em&gt;quit&lt;/em&gt; function.&lt;/p&gt;

&lt;p&gt;We run this just by running &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up&lt;/code&gt;, and we can see the test passed as going to Google does indeed yield a page title of “Google.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/test-results.png&quot; alt=&quot;Test results in terminal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also see the screenshot taken from the remote browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/test_image.png&quot; alt=&quot;Resulting image from test&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;notes-&quot;&gt;Notes &lt;a name=&quot;notes&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Using the &lt;em&gt;quit&lt;/em&gt; function was essential to kill the connection, but it also closed the browser we can’t see. Additionally, I mentioned I would come back to using the sleep function in Ruby. It turns out using the &lt;a href=&quot;https://docs.docker.com/compose/startup-order/&quot;&gt;&lt;em&gt;depends_on&lt;/em&gt;&lt;/a&gt; feature in Docker Compose is not enough to ensure services are available to each other. When I began running the network, the remote driver would continually fail to connect. It turns out we just needed a moment for everything to boot. &lt;a href=&quot;https://docs.docker.com/compose/startup-order/&quot;&gt;Docker recommends creating a wait script&lt;/a&gt; but pausing the thread for a moment worked just as well.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This was a pretty simple example, but it answered my questions. We can use this to test website behavior, make it modular, and automate the tests. That checks enough boxes for me to keep going down this rabbit hole. The next goal is to develop an automated solution and possibly clean up the deployment a little. I’m thinking of having these two containers not run with the rest of the project and boot up the containers using a bash script specifically for testing. I might write about that too.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Mar 2022 12:00:00 -0500</pubDate>
        <link>https://georgeoffley.com/blog/dockerizing-system-tests-with-selenium.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/dockerizing-system-tests-with-selenium.html</guid>
        
        <category>Docker</category>
        
        <category>Testing</category>
        
        <category>Intermediate</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Shared Memory in Docker</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-05-shared-memory-in-docker/cover.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#shared_memory_device&quot;&gt;Shared Memory Device&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#use_in_docker&quot;&gt;Use in Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Recently, I was experimenting with system testing on a new stack. While working with &lt;a href=&quot;https://www.selenium.dev/documentation/webdriver/remote_webdriver/&quot;&gt;Selenium Remote Driver&lt;/a&gt; to create &lt;a href=&quot;https://en.wikipedia.org/wiki/Headless_browser&quot;&gt;headless web browsers&lt;/a&gt; (more on that later) to run against my app, I came across a Docker option I had not known. This Docker feature allowed for easily accessible and fast file reading and writing between the host and the container. It was being used as a volume, but I learned it was much more. When I looked it up, it was referred to as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Shared_memory&quot;&gt;&lt;em&gt;Shared Memory Device&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;shared-memory-device-&quot;&gt;Shared Memory Device &lt;a name=&quot;shared_memory_device&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Turns out that this is an old Linux staple. The shared memory device, located in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/shm/&lt;/code&gt; directory in the file system, utilizes temporary storage using RAM rather than disk storage. Using a shared volume available on the RAM and not the disk makes for a much faster read/write speeds. These devices also allows for &lt;a href=&quot;https://en.wikipedia.org/wiki/Inter-process_communication&quot;&gt;inter-process communication&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;use-in-docker-&quot;&gt;Use in Docker &lt;a name=&quot;use_in_docker&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Docker allows for the use of this device. When conducting my testing, I used the volume mapping feature to easily map local directories with directories inside the containers we’re working on. As seen below.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /dev/shm/:/dev/shm/ &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; ubuntu ubuntu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This mapped the local shared memory device to the Docker device. Docker, by default, allows for up to 64 MB of storage space using the shared memory device. You can see the default allocation when searching for the shared storage device within the container. As seen below.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker inspect ubuntu | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; shm
            &lt;span class=&quot;s2&quot;&gt;&quot;ShmSize&quot;&lt;/span&gt;: 67108864,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I was saving screenshots just to ensure that I was looking at the thing I was hoping to look at. Although I was only doing some foundational work, I could find myself in a pickle with only 64 MB of space available if this work ends up scaling. Should we need to, Docker lets us change the size of this device using the &lt;em&gt;–shm-size&lt;/em&gt; option. As seen below.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /dev/shm/:/dev/shm &lt;span class=&quot;nt&quot;&gt;--shm-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2gb &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; ubuntu ubuntu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Above we add in the &lt;em&gt;–shm-size&lt;/em&gt; option and we can specify all the space we need! Let’s look one more time to confirm that it works.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker inspect ubuntu | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; shm
            &lt;span class=&quot;s2&quot;&gt;&quot;ShmSize&quot;&lt;/span&gt;: 2147483648,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Shazam! We have more storage in our shared memory device to play around with.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;There is more to come about my adventures in Dockerizing system testing, but for now, I was able to learn a new thing about Linux and Docker. I hope it helps someone who came across it without knowing as I did.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Mar 2022 12:00:00 -0500</pubDate>
        <link>https://georgeoffley.com/blog/shared-memory-in-docker.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/shared-memory-in-docker.html</guid>
        
        <category>Docker</category>
        
        <category>Intermediate</category>
        
        
        <category>Blog</category>
        
      </item>
    
  </channel>
</rss>
