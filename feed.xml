<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>I make projects with many different stacks. Currently learning about TypeScript, Rust, and the graphics pipeline. I also love writing and well made movies. Check out my blog and my twitter to contact me!</description>
    <link>https://georgeoffley.com/</link>
    <atom:link href="https://georgeoffley.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 30 Jul 2022 18:24:53 -0400</pubDate>
    <lastBuildDate>Sat, 30 Jul 2022 18:24:53 -0400</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>JavaScript Shenanigans: Empty Arrays</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;JavaScript, like every language, is weird in it’s own ways. As I continue diving in, I am starting to realize the depths of the silliness.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;So the other day, I wrote some logic for something using pure JavaScript. It looked a little like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-07-30-javascript-shenanigans-empty-arrays/sample-code.png&quot; alt=&quot;Code with issues&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This would eventually be used to create an array of objects with months and total users for that month. I wanted to do this by creating an array, looping through data, and checking if the array was empty. Add the first empty object to the array. If it was not empty, run the logic for the next object in the array.&lt;/p&gt;

&lt;p&gt;Pretty simple, I’ve done it similarly in Python many times. So I couldn’t understand why nothing was working.&lt;/p&gt;

&lt;p&gt;Come to find out, JavasScript like’s to do things a certain way.&lt;/p&gt;

&lt;p&gt;The initiated amongst you already noted this, but for the rest of us draw your attention to line seven for the issue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-07-30-javascript-shenanigans-empty-arrays/sample-code-highlight.png&quot; alt=&quot;Highlighted issues from the sample code.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JavaScript will evaluate empty arrays (and objects) as truthy or True in a boolean context.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/4a5b3ppQ3Th8oDZB7y/giphy.gif&quot; alt=&quot;What? Why?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It made no sense to me why this was happening. It’s an empty array. In Python, when using a boolean operation, &lt;a href=&quot;https://docs.python.org/3/library/operator.html?highlight=#operator.not_&quot;&gt;arrays utilize the &lt;code class=&quot;highlighter-rouge&quot;&gt;__bool__&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;__len__&lt;/code&gt; dunder function&lt;/a&gt;, which, if the array is empty, returns a &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;. Which evaluates to &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;. The above is common practice for Python code.&lt;/p&gt;

&lt;p&gt;Not in JavaScript.&lt;/p&gt;

&lt;p&gt;This might be just me &lt;a href=&quot;https://youtu.be/jqrwo6UBefk&quot;&gt;getting glasses for the first time and realizing that leaves on trees are not weird green blobs&lt;/a&gt; but have shapes. I don’t know. But I say again; Why?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/2xwWl4iiaR0UKIiiRQ/giphy.gif&quot; alt=&quot;I mean... why?&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;why&quot;&gt;Why?&lt;/h3&gt;

&lt;p&gt;They (kind of but not really) tell you &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;right in the&lt;/a&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;MDN docs&lt;/a&gt;. And to quote them:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;All values are truthy unless they are defined as falsy. That is, all values are truthy except &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;0n&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;NaN&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So JavaScript has some magic going on that treats even empty arrays as objects and evaluates them as &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion&quot;&gt;Type coercion&lt;/a&gt; is that magic.&lt;/p&gt;

&lt;p&gt;Type coercion is the process JavaScript uses when making comparisons. So, for example, if we have &lt;code class=&quot;highlighter-rouge&quot;&gt;'1' == 1&lt;/code&gt;, the JavaScript will compiler will coerce the number type &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; into a string and returns &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;. You can force type checking by doing this &lt;code class=&quot;highlighter-rouge&quot;&gt;'1' === 1&lt;/code&gt;, which will return &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;. I learned that early, although I did not realize it was through the same process that would trip me up now.&lt;/p&gt;

&lt;p&gt;JavaScript coerces the empty array to be &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; in my code, and my logic doesn’t work.&lt;/p&gt;

&lt;p&gt;This is not a problem, just an odd quirk. I avoided this by checking the length directly—no big deal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-07-30-javascript-shenanigans-empty-arrays/new-sample-code.png&quot; alt=&quot;Corrected code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And now we’re good. I hope this helps someone new to the language, and I’m sure I’ll write about its quirkiness in the future.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Jul 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/2022-javascript-shenanigans-empty-arrays.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/2022-javascript-shenanigans-empty-arrays.html</guid>
        
        <category>JavaScript</category>
        
        <category>Newbie</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Dealing With Multiple Windows in Cypress</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Last week I wrote about using &lt;a href=&quot;https://georgeoffley.com/blog/2022-browser-testing-with-cypress.html&quot;&gt;Cypress to test browser applications&lt;/a&gt;. I found a fun little hiccup with links that open new windows or tabs that needed some research and experimenting to get over. I hope my solution helps someone who might come across this in the future.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The Problem&lt;/h3&gt;

&lt;p&gt;I did not think opening new windows or tabs would be an issue. According to their docs, they are firm in their &lt;a href=&quot;https://docs.cypress.io/guides/references/trade-offs#Multiple-tabs&quot;&gt;anti-multitab&lt;/a&gt; stance. It is an odd hill to die on. This has been Cypress’s only speed bump, so I’ll go over the solution.&lt;/p&gt;

&lt;p&gt;So what do I do when I need to test rendered links that open new tabs? Well, the &lt;a href=&quot;https://docs.cypress.io/examples/examples/recipes#Testing-the-DOM&quot;&gt;Cypress docs offer some tips to help deal with that&lt;/a&gt;, and I’ll go over what I ended up with.&lt;/p&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The Solution&lt;/h3&gt;

&lt;p&gt;Let’s look at what I ended up doing. Here is the complete test&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-07-23-dealing-with-multiple-windows-in-cypress/full-test.png&quot; alt=&quot;My complete solution test&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Just a standard test, but I want to draw your attention to this block here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-07-23-dealing-with-multiple-windows-in-cypress/window.png&quot; alt=&quot;Window object block&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a fun little hack &lt;a href=&quot;https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/testing-dom__tab-handling-links&quot;&gt;Cypress puts into their docs as a workaround&lt;/a&gt; for multi-window/multi-tab use cases. We’re using their &lt;a href=&quot;https://docs.cypress.io/api/commands/window&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;window()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; function in the API to grab the active window object that pops up when we click the link.&lt;/p&gt;

&lt;p&gt;We then utilize the &lt;a href=&quot;https://docs.cypress.io/api/commands/stub&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stub()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; function in their API to store the native &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/open&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;window.open()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; function, which our app uses to open the link.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;stub()&lt;/code&gt; function is a tool that allows us to replace a function so that we can control the behavior of the replaced function.&lt;/p&gt;

&lt;p&gt;Finally, we create an alias for us to reference later using the &lt;a href=&quot;https://docs.cypress.io/api/commands/as&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;as()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; function.&lt;/p&gt;

&lt;p&gt;This brings us to that second important block.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-07-23-dealing-with-multiple-windows-in-cypress/link-click.png&quot; alt=&quot;Link click block&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first step clicks our link for us. The next step is the crucial bit.&lt;/p&gt;

&lt;p&gt;We use the &lt;a href=&quot;https://docs.cypress.io/api/commands/get#Usage&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;get()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; function to grab the window object using the &lt;code class=&quot;highlighter-rouge&quot;&gt;@windowOpen&lt;/code&gt; alias to get the window object we created earlier.&lt;/p&gt;

&lt;p&gt;We then chain our &lt;a href=&quot;https://docs.cypress.io/guides/references/assertions&quot;&gt;assertion&lt;/a&gt; using the &lt;a href=&quot;https://docs.cypress.io/api/commands/should&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;should()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; function. Cypress packages up another library for their assertions called &lt;a href=&quot;https://github.com/chaijs/chai&quot;&gt;Chai&lt;/a&gt;, and these assertions are used as arguments for the assertion functions in Cypress.&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;should()&lt;/code&gt; function, the first argument we pass in is the assertion, and the second argument is the thing the assertion is looking for.&lt;/p&gt;

&lt;p&gt;Specifically, we call &lt;code class=&quot;highlighter-rouge&quot;&gt;be.calledWith&lt;/code&gt;, which exists in an extension of Chai called &lt;a href=&quot;https://github.com/domenic/sinon-chai&quot;&gt;Sinon-Chai&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Going back to the window object we created using the &lt;code class=&quot;highlighter-rouge&quot;&gt;stub()&lt;/code&gt; function, the &lt;code class=&quot;highlighter-rouge&quot;&gt;be.calledWith&lt;/code&gt; assertion is looking to confirm that the stub function (our &lt;code class=&quot;highlighter-rouge&quot;&gt;window.open()&lt;/code&gt; function) is being called with the second argument as a substring.&lt;/p&gt;

&lt;p&gt;The second argument is a matcher Cypress uses to find stuff in our assertions. In this case, Cypress sees that our window object is calling &lt;code class=&quot;highlighter-rouge&quot;&gt;window.open(link-url-word-and-the-rest-of-the-link-text)&lt;/code&gt;, and this matcher is looking for the word &lt;code class=&quot;highlighter-rouge&quot;&gt;link-url-word&lt;/code&gt; as a substring within the &lt;code class=&quot;highlighter-rouge&quot;&gt;window.open()&lt;/code&gt; function arguments. Since that word exists in the link string, this test will pass.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The idea that we can’t expose native browser behavior within Cypress is still an odd choice as we still need to be able to use native browser behavior to test what our app does. Regardless, I appreciate that Cypress offers a solution for this edge case with only a few lines of code.&lt;/p&gt;

&lt;p&gt;I am excited to continue learning about Cypress. So stay tuned for possible future stuff!&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Jul 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/2022-dealing-with-multiple-windows-in-cypress.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/2022-dealing-with-multiple-windows-in-cypress.html</guid>
        
        <category>Cypress</category>
        
        <category>Testing</category>
        
        <category>JavaScript</category>
        
        <category>TypeScript</category>
        
        <category>Newbie</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Browser Testing With Cypress</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;When I write code, I try to remember that everything is broken until proven otherwise. I’ve been shifting my learning to browser-based platforms that I am working on and with that shift, browser tests have started to be folded into that mindset.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cypress.io/&quot;&gt;Cypress&lt;/a&gt; is a tool for browser tests that I’ve started learning, and it’s been an interesting week. I’ve &lt;a href=&quot;https://georgeoffley.com/blog/dockerizing-system-tests-with-selenium.html&quot;&gt;written about browser testing before&lt;/a&gt;, so this will be a bit less comprehensive and will mostly be my thoughts on the tool and how useful I think it is. Complete tutorials for creating end-to-end browser testing solutions using Cypress can be &lt;a href=&quot;https://docs.cypress.io/guides/overview/why-cypress&quot;&gt;found in their docs&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;browser-tests&quot;&gt;Browser Tests&lt;/h3&gt;

&lt;p&gt;Testing has a lot of different connotations. In this context, browser tests are tests that try to use your app and tell you if something is broken. Cypress is one such tool, but there are many others.&lt;/p&gt;

&lt;h3 id=&quot;cypress-setup&quot;&gt;Cypress Setup&lt;/h3&gt;

&lt;p&gt;Compared to something like Selenium, the setup was simple. Cypress advertises as an all-in-one solution for end-to-end testing. And so far, that’s been true. Selenium requires a web driver and external resources to function, whereas Cypress seems to work quickly out of the box.&lt;/p&gt;

&lt;p&gt;Their docs suggest setting up the cypress commands in your &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file for easier running. This is a good approach to test your app how you need to.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-07-16-browser-testing-with-cypress/package-json-scripts-cypress-open.png&quot; alt=&quot;Example snippit of a cypress command which can be written into the local package.json file.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To help with your setup, you have access to their testing GUI.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://docs.cypress.io/_nuxt/img/launchpad.fcc7cac.png&quot; alt=&quot;Cypress testing GUI found on the Cypress docs website.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a vast improvement over other tools I’ve learned since everything can be set up in a GUI, including choosing a browser to do your testing on.&lt;/p&gt;

&lt;p&gt;I’ve only been able to try end-to-end testing, but I’d like to dive a little more into component testing. More to come.&lt;/p&gt;

&lt;h3 id=&quot;simple-cypress-tests&quot;&gt;Simple Cypress Tests&lt;/h3&gt;

&lt;p&gt;So the tests themselves are relatively simple. The scripts only need a few lines of code, as most of the setup is in the project config and support files. Another great advantage over other tools I’ve tried so far.&lt;/p&gt;

&lt;p&gt;A test might look something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-07-16-browser-testing-with-cypress/simple-test.png&quot; alt=&quot;A simple test taken from Cypress docs to test if a website loads.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above test, taken from their docs, is put into a &lt;code class=&quot;highlighter-rouge&quot;&gt;describe()&lt;/code&gt; block. This gives us flexibility in creating testing classes and organizing our tests. Within that block is another block, the &lt;code class=&quot;highlighter-rouge&quot;&gt;it()&lt;/code&gt; block, which is our test itself. We can be as granular as we want with our tests. For example, if we want to write an &lt;code class=&quot;highlighter-rouge&quot;&gt;it()&lt;/code&gt; block for every step in an end-to-end test, we can do so with the confidence that we’ll see which stage failed.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;cy.visit()&lt;/code&gt; is a command and assertion. So, in this example, if a website is not sending a response, we can see this test fail. So this gives us the flexibility to write out the exact behavior we expect.&lt;/p&gt;

&lt;p&gt;So we can add all the steps needed to test a part of our app. Like so.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-07-16-browser-testing-with-cypress/full-test.png&quot; alt=&quot;Complete Cypress test example from Cypress docs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This example, also taken from their docs, takes advantage of everything described above. It also introduces chaining, which we can use for multi-step processes.&lt;/p&gt;

&lt;h3 id=&quot;testing-gui&quot;&gt;Testing GUI&lt;/h3&gt;

&lt;p&gt;OK, on to some of the stuff that makes Cypress a fun tool to dive into. Namely the GUI.&lt;/p&gt;

&lt;p&gt;Browser-based engineering is still a space I’ve only been in for a while, so this might be new to me, but adding a browser tool for developing your apps blows me away. Let me tell you why.&lt;/p&gt;

&lt;p&gt;So we wrote the test above. Great. Now we need directions to tell a Cypress how to navigate our app. So we need some selectors, which are always murky to me as relying on class selectors is a brittle test that can be broken with a new release. We need something better, and it’s not always clear what that “better” may be. So in comes the testing playground.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-07-16-browser-testing-with-cypress/cypress-browser-gui.gif&quot; alt=&quot;Cypress Testing Playground taken from the Cypress docs showing all the browser tools.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above, also taken from their docs, demonstrates what made using Cypress enjoyable. Their testing suite gives you valuable tools like a real-time test runner, a test builder, a time machine so you can go through each testing step to see where issues might pop up, and an advanced selector playground.&lt;/p&gt;

&lt;p&gt;This tool does a great job of helping you create robust selectors for your test. It allows you to hover over elements, highlight them, and the selector playground will provide you with their best guess for a &lt;code class=&quot;highlighter-rouge&quot;&gt;cy.get()&lt;/code&gt; command so tests can be filled out quickly.&lt;/p&gt;

&lt;h3 id=&quot;some-more-cool-stuff&quot;&gt;Some More Cool Stuff&lt;/h3&gt;

&lt;p&gt;Just a couple more things I wanted to mention. One was how easy their API makes it to &lt;a href=&quot;https://docs.cypress.io/api/cypress-api/custom-commands&quot;&gt;creating new commands in their API&lt;/a&gt; for common functionality to your testing apparatus.&lt;/p&gt;

&lt;p&gt;For example, we created one which goes to our site, types in login info, and clicks the login button. Now we have all that functionality in a single command for use in any test we need authentication for. Before long we’ll have tons of them so we can focus on testing our platform’s behavior.&lt;/p&gt;

&lt;p&gt;Another was using what they call &lt;a href=&quot;https://docs.cypress.io/api/commands/fixture&quot;&gt;fixtures&lt;/a&gt; for injecting static data into your tests, which I love. Static data, like login credentials, names, etc, are much cleaner when you can create a JSON file and utilize the existing API to access the necessary values. I love that; it makes maintenance so much easier.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;After all that, I can confidently say I enjoy writing tests using Cypress. It allows me to write tests the right (easy) way. Testing is often not something people think about. So make it easy to do, and Cypress does that. I’m excited to continue learning.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Sat, 16 Jul 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/2022-browser-testing-with-cypress.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/2022-browser-testing-with-cypress.html</guid>
        
        <category>Cypress</category>
        
        <category>Testing</category>
        
        <category>JavaScript</category>
        
        <category>TypeScript</category>
        
        <category>Newbie</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Adventures In TypeScript: Typing My Way Out of Problems</title>
        <description>&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-problem&quot;&gt;The Problem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rendering-a-link&quot;&gt;Rendering A Link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#objects-and-typing-issues&quot;&gt;Objects And Typing Issues&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cheating&quot;&gt;Cheating&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#another-solution&quot;&gt;Another Solution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-better-solution&quot;&gt;The Better Solution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I’ve been taking more and more tickets with the new gig. This week I was tracking down some text to make some updates, and this was not as simple as I thought it might be, so I decided to take some notes and reflect on some stuff I learned.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;the-problem-&quot;&gt;The Problem &lt;a name=&quot;the-problem&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The task was simple, update some text on the platform. I quickly discovered that it was not as straightforward as I thought.&lt;/p&gt;

&lt;p&gt;The first issue was trying to track down where some of these values which needed changing lived.&lt;/p&gt;

&lt;p&gt;The second problem was the updated content included a link to some external docs for our platform.&lt;/p&gt;

&lt;h3 id=&quot;rendering-a-link-&quot;&gt;Rendering A Link &lt;a name=&quot;rendering-a-link&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;So I found where the objects storing the text were. That problem is solved. On to the next&lt;/p&gt;

&lt;p&gt;So how do I add a link to these strings I mentioned? It seemed easy; you replace the string, but how do you make the link element work?&lt;/p&gt;

&lt;p&gt;The solution should have been more obvious to me at that point. But sometimes I forget stuff; I’m human. I’m allowed. So let’s go through my process.&lt;/p&gt;

&lt;p&gt;I thought I could just put an &lt;a href=&quot;https://www.w3schools.com/tags/tag_a.asp&quot;&gt;href tag&lt;/a&gt; into the string value I was updating. Like so.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-19-adventures-in-typescript-typing-my-way-out-of-problems/first-though-link-string.png&quot; alt=&quot;First Thought Link String&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And I pass it into the JSX like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-19-adventures-in-typescript-typing-my-way-out-of-problems/first-though-link-string-jsx.png&quot; alt=&quot;First Thought Link String in JSX&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That won’t work since you end up with this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-19-adventures-in-typescript-typing-my-way-out-of-problems/link-in-jsx.png&quot; alt=&quot;Link in JSX&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since JSX will interpolate this as a string or a JavaScript function and won’t interpret pure HTML elements as HTML tags, this isn’t my solution.&lt;/p&gt;

&lt;p&gt;So we needed something closer to this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-19-adventures-in-typescript-typing-my-way-out-of-problems/link-in-jsx-link-component.png&quot; alt=&quot;Link Component in JSX&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’m using &lt;a href=&quot;https://mui.com/material-ui/react-link/&quot;&gt;the prebuilt Link component&lt;/a&gt; provided by Material UI, and I needed to get the link passed into this component in our JSX as a string, which solves this problem and takes us to the next problem.&lt;/p&gt;

&lt;h3 id=&quot;objects-and-typing-issues-&quot;&gt;Objects and Typing Issues &lt;a name=&quot;objects-and-typing-issues&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Now I have a new goal.&lt;/p&gt;

&lt;p&gt;I created an object literal to hold my values and possibly use it to hold URLs for additional help docs in the future.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-19-adventures-in-typescript-typing-my-way-out-of-problems/doc-map-literal.png&quot; alt=&quot;DocMap literal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next step was to pass that URL around. Here’s another layer; I wanted to reuse a string value used to grab all the config options to cut down on hard-coded stuff. So I made the key in my object literal match possible values for this string object. Something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-19-adventures-in-typescript-typing-my-way-out-of-problems/variable-as-key.png&quot; alt=&quot;Variable as Key&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’re using bracket notation to pass in the object key and have it evaluated as the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; rather than a standard dot notation, which would throw an error.&lt;/p&gt;

&lt;p&gt;Although you undoubtedly noticed the squiggly line yelling at me, that gave me this message that I didn’t understand.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-19-adventures-in-typescript-typing-my-way-out-of-problems/string-ts-error.png&quot; alt=&quot;String TypeScript error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What I initially did confused TypeScript, and thus the error vomit. If we look at the error, though, it’s less error vomit and more a breadcrumb trail back to where I made a mistake.&lt;/p&gt;

&lt;p&gt;Our string variable &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; is typed as a string, but TypeScript has no idea what the context is since we’re using an object literal without a type. So for TypeScript, &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; could be anything in my code, and now I’ve confused it. Here’s where I stepped on a landmine.&lt;/p&gt;

&lt;h3 id=&quot;cheating-&quot;&gt;Cheating &lt;a name=&quot;cheating&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;My first solution was to cast my object as the &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#any&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;any&lt;/code&gt;&lt;/a&gt; type.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-19-adventures-in-typescript-typing-my-way-out-of-problems/doc-map-any.png&quot; alt=&quot;DocMap as any type&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This cleared the error, and I could run the project with the behavior I wanted. Problem solved, correct? Nah.&lt;/p&gt;

&lt;p&gt;TypeScript introduced type checking into JavaScript, effectively making it a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Static_typing&quot;&gt;statically typed language&lt;/a&gt;. So the types of objects are known at compile time. This helps create type-safe code and catch problems earlier. The issue with my solution is that it skips the good parts of TypeScript by &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#any&quot;&gt;turning off type checking&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why use the language if we’re not going to use the language? I looked for a better solution.&lt;/p&gt;

&lt;h3 id=&quot;another-solution-&quot;&gt;Another Solution &lt;a name=&quot;another-solution&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A not great solution would be to use some magic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-19-adventures-in-typescript-typing-my-way-out-of-problems/type-assertions.png&quot; alt=&quot;Type Assertion solution&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A bit is going on here. We’re still using the bracket notation, but in the brackets, we’re casting the variable as type string using the &lt;code class=&quot;highlighter-rouge&quot;&gt;as&lt;/code&gt; operator; this is also called a &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-assertions&quot;&gt;type assertion&lt;/a&gt;. And then, we’re utilizing the &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/2/keyof-types.html&quot;&gt;keyof&lt;/a&gt; operator in TypeScript to create a &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types&quot;&gt;union type&lt;/a&gt; for our &lt;code class=&quot;highlighter-rouge&quot;&gt;DocMap&lt;/code&gt; object, which is passed in using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof&quot;&gt;typeof&lt;/a&gt; operator. It’s a solution that confuses me to think about, makes the code harder to read, and introduces a &lt;a href=&quot;https://www.techtarget.com/searchsoftwarequality/tip/Understanding-code-smells-and-how-refactoring-can-help#:~:text=Put%20simply%2C%20code%20smells%20are,in%20accordance%20with%20necessary%20standards.&quot;&gt;code smell&lt;/a&gt; since it seems like a hack rather than a planned solution.&lt;/p&gt;

&lt;h3 id=&quot;the-better-solution-&quot;&gt;The Better Solution &lt;a name=&quot;the-better-solution&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A better way might be to use &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/2/mapped-types.html&quot;&gt;mapped types&lt;/a&gt; and &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/2/objects.html&quot;&gt;interfaces&lt;/a&gt;. As a general rule in my TypeScript adventures, I’ve been sticking with making the correct types or interfaces for objects. So following that, I can do something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-19-adventures-in-typescript-typing-my-way-out-of-problems/mapped-types-solution.png&quot; alt=&quot;Mapped Types Solution&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This solution creates an interface for the help doc objects, and then I can create a new object with our data using that type. I tested making a mapped type for the first property as a demonstration. Generally, you use those when making types with properties that might not be known ahead of time. It’s a generic type that we can use to denote the types for the value and keys in any &lt;code class=&quot;highlighter-rouge&quot;&gt;DocMap&lt;/code&gt; type object.&lt;/p&gt;

&lt;p&gt;My only issue is that it’s still a bit roundabout for what I want. This is one-time use, and it’s not being exported anywhere. So I want something even simpler.&lt;/p&gt;

&lt;h3 id=&quot;my-solution-&quot;&gt;My Solution &lt;a name=&quot;my-solution&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;My solution was to use a &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type&quot;&gt;Record&lt;/a&gt; type to create an object type with the required property types.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-19-adventures-in-typescript-typing-my-way-out-of-problems/final-record-type-solution.png&quot; alt=&quot;My solution using the Record Type&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Record type is a &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/utility-types.html&quot;&gt;utility type&lt;/a&gt; that uses the passed in types, via the angle brackets &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;gt;&lt;/code&gt;, to map the types for the object property names and values. This is type-safe, easy to implement, and checked all the boxes I needed.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This is the strategy for learning the code base. Spend my energy tackling as many problems as I can early. We called this “racking up the cash register” when I was wrestling. The more I take on, the more I learn, and the more I learn, the bigger the challenge I can take on. I hope this helps someone in their learning journey!&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Jun 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/adventures-in-typescript-typing-my-way-out-of-problems.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/adventures-in-typescript-typing-my-way-out-of-problems.html</guid>
        
        <category>TypeScript</category>
        
        <category>JavaScript</category>
        
        <category>React</category>
        
        <category>Newbie</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Adventures In TypeScript: Destructuring and Code Organization</title>
        <description>&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#destructuring&quot;&gt;Destructuring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#destructuring-imports&quot;&gt;Destructuring Imports&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#destructuring-imports&quot;&gt;A Cleaner Way To Destructure Imports&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#my-conclusions&quot;&gt;My Conclusions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I’ve been diving deep into the JavaScript ecosystem via TypeScript. One thing I’m observing in the more established engineering culture I’m part of now is the idea of cleaner code using things like destructuring. I am still new to this type of stack, so I wanted to talk about it and understand how we can better organize code.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This is a bait and switch since we’re talking about organizational principles in JavaScript. Both have the word ‘Script’ in the name, so I will stick with it.&lt;/p&gt;

&lt;p&gt;Just a warning: &lt;em&gt;&lt;strong&gt;I am new to this world. I don’t have a lot of expertise (yet) about what is or not cool in the ESM spec. So some info here might need further study.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;destructuring-&quot;&gt;Destructuring &lt;a name=&quot;destructuring&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Destructuring objects is a simple syntax that yields some helpful behavior. Destructuring allows you to unpack properties and values for arrays, objects, and classes. This is useful in organizing our code because we can avoid things like calling class or object names before their properties.&lt;/p&gt;

&lt;p&gt;So we can go from doing things like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-11-adventures-in-typescript-destructuring-and-code-organization/objectname-property.png&quot; alt=&quot;Object Name&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To something a little cleaner like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-11-adventures-in-typescript-destructuring-and-code-organization/destructuredproperty.png&quot; alt=&quot;Destructured Property&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also do this in a way to avoid naming collisions for commonly named code that we will discuss further down.&lt;/p&gt;

&lt;p&gt;Let’s see what this looks like.&lt;/p&gt;

&lt;p&gt;First, we set up a new project and made some stuff to export.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-11-adventures-in-typescript-destructuring-and-code-organization/primenums-ts.png&quot; alt=&quot;Prime Numbers module. See there's TypeScript right there! Why are you yelling at me?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-11-adventures-in-typescript-destructuring-and-code-organization/roundnums-ts.png&quot; alt=&quot;Round Numbers module. And here's even more TypeScript! OK, there's no types. You're a genius, we get it.&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;destructuring-imports-&quot;&gt;Destructuring Imports &lt;a name=&quot;destructuring-imports&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;So let’s destruct some of these.&lt;/p&gt;

&lt;p&gt;So the first thing I wanted to try was importing and destructuring these imports all in one line. So I was able to get something like this to work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-11-adventures-in-typescript-destructuring-and-code-organization/require-destructur.png&quot; alt=&quot;Require Destructure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So first, we make constants that match the incoming object names. Then we utilize the &lt;code class=&quot;highlighter-rouge&quot;&gt;require()&lt;/code&gt; syntax to pull in our objects. This assigns the &lt;code class=&quot;highlighter-rouge&quot;&gt;two&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;three&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;five&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;seven&lt;/code&gt; names to the constants we pulled in through the &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;This works for the demo project I was messing with, but it’s not the cleanest solution. You undoubtedly noticed the note above and TypeScript yelling at me by underlining words.&lt;/p&gt;

&lt;p&gt;Regardless, we have access to the imported values.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-11-adventures-in-typescript-destructuring-and-code-organization/primenums-console.png&quot; alt=&quot;Prime Numbers Console&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;a-cleaner-way-to-destructure-imports-&quot;&gt;A Cleaner Way to Destructure Imports &lt;a name=&quot;a-cleaner-way-to-destructure-imports&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The cleaner way I’ve observed is something closer to this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-11-adventures-in-typescript-destructuring-and-code-organization/cleaner-destructure.png&quot; alt=&quot;Cleaner Destructur&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So these values are imported using the &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; syntax with a default import and then use a standard destructure syntax where you create constants matching the name of the objects you’re importing. So now we get this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-11-adventures-in-typescript-destructuring-and-code-organization/roundnums-console.png&quot; alt=&quot;Round Numbers Console&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;Default imports are when you have things being exported via the &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; keyword like this &lt;code class=&quot;highlighter-rouge&quot;&gt;import DefaultObj from ‘ObjMod’&lt;/code&gt;, where a named import is when you’re naming the things you’re importing via something like &lt;code class=&quot;highlighter-rouge&quot;&gt;import { ObjName } from ‘ObjMod’&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This has been the convention I’ve seen most often. I like it; clean, easy to read, and TypeScript isn’t yelling at me.&lt;/p&gt;

&lt;h3 id=&quot;my-conclusions-&quot;&gt;My Conclusions &lt;a name=&quot;my-conclusions&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I will do things the cleaner way, but it comes down to what tool works best for that specific situation.&lt;/p&gt;

&lt;p&gt;One thing I would note is including proper naming for object imports. Since we’re talking about taking away the class prefix, it might make sense to do something like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-06-11-adventures-in-typescript-destructuring-and-code-organization/good-naming.png&quot; alt=&quot;Good Naming&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This combines my preferred way of destructuring along with syntax to rename the imported objects. This practice will help reduce the likelihood of collision bugs if I have several things named like config or something like that.&lt;/p&gt;

&lt;p&gt;Destructuring is an excellent practice for clean code. Not like &lt;strong&gt;THE&lt;/strong&gt; clean code, just code I think is well written and easy for the next person to read.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://playcode.io/904693&quot;&gt;Full Demo Code&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Jun 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/adventures-in-typescript-destructuring-and-code-organization.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/adventures-in-typescript-destructuring-and-code-organization.html</guid>
        
        <category>TypeScript</category>
        
        <category>JavaScript</category>
        
        <category>Destructuring</category>
        
        <category>Newbie</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Adventures In TypeScript</title>
        <description>&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ts-so-far&quot;&gt;TypeScript So Far&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#type-definitions-in-functions&quot;&gt;Type Definitions In Functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#generics&quot;&gt;Generics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#union-types&quot;&gt;Union Types&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I started a new job, and the stack is entirely different from what I know. Allow me a moment to break it down.&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;First Engineering job stack: PHP, HTML/CSS, VBScript, C#,.Net, and MySQL. No JavaScript&lt;/li&gt;
  &lt;li&gt;Second job stack: Python, Go, MySQL, Flux (custom functional language). Still, no JavaScript.&lt;/li&gt;
  &lt;li&gt;New job: &lt;strong&gt;It’s all JavaScript&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/KupdfnqWwV7J6/giphy.gif&quot; alt=&quot;Terrifying Screams&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, TypeScript. But even still.&lt;/p&gt;

&lt;p&gt;I’ve had to become fluent in a variety of languages, but the JavaScript ecosystem was never on the list until now. Closest I ever got to building anything was writing tiny, mostly stolen from Stack Overflow, APIs using Express. So what am I to do when I get offered a position building some cool stuff with some incredible people? Say no? I don’t think so.&lt;/p&gt;

&lt;p&gt;As you get further into your career, you start seeing new organization’s coding stuff is like everyone else’s coding stuff. It’s just a matter of implementation. So I’ll spend the next few weeks diving in, asking tons of questions, and learning to understand this—no big deal.&lt;/p&gt;

&lt;p&gt;In the meantime, I’ll write about some of the stuff I’ve learned, starting with my adventure’s learning TypeScript.&lt;/p&gt;

&lt;h3 id=&quot;typescript-so-far-&quot;&gt;TypeScript So Far &lt;a name=&quot;ts-so-far&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://i.pinimg.com/originals/49/75/86/497586976df92a1b7658f930c1bc299e.png&quot; alt=&quot;Chucki Finster image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TypeScript is nitpicky. If I were to make a list of program languages as cartoon characters, I’d put TypeScript beside Chuckie Finster from Rugrats. Quick to point out the dangers and not quiet about their objections. However, the more I learn it, the more it becomes the thing needed to maintain the chaotic, almost Tommy Pickles-like nature of JavaScript. I’m starting to become a fan.&lt;/p&gt;

&lt;p&gt;Everyone needs a real one like Chuck Finster on their adventures.&lt;/p&gt;

&lt;p&gt;Coming from Python as my primary tool in the last job, I needed to shake off the cobwebs for statically typed languages. Just make sure the types match. No big deal, right? Mostly.&lt;/p&gt;

&lt;p&gt;TypeScript takes this a great deal further in its implementations. Let’s go over what I mean.&lt;/p&gt;

&lt;h3 id=&quot;type-definitions-in-functions-&quot;&gt;Type Definitions In Functions &lt;a name=&quot;type-definitions-in-functions&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;In Python, everything is an object. In TypeScript, objects are just everywhere. One example is the use of objects defined in the function signature.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-05-22-adventures-in-typescript/obj-in-function-def.png&quot; alt=&quot;Greeting function&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this example, we define the object &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt; and then give the parameters in the form of function arguments. That makes sense for maintainability. A single type that is only used in one spot is a perfect candidate. It also helps that the IntelliSense will be able to pick up on the type and give you the ability to access those properties in the autocomplete.&lt;/p&gt;

&lt;h3 id=&quot;generics-&quot;&gt;Generics &lt;a name=&quot;generics&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/2/generics.html&quot;&gt;Generics&lt;/a&gt; are stand-ins used for passing around data types where the type of an object or property might not be known. TypeScript takes these to an interesting extreme. Let’s take a look.&lt;/p&gt;

&lt;p&gt;Generics can be used in interfaces; &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/2/objects.html&quot;&gt;interfaces are an abstract type used for holding data&lt;/a&gt;. See what I mean below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-05-22-adventures-in-typescript/interface-generic.png&quot; alt=&quot;Generics for interfaces&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we define and interface &lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt; and assign it the type &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;;T&amp;gt;&lt;/code&gt;; you use the angle brackets to pass in types. The idea here is that this &lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt; interface can be reused and take the form of many different model types. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;T&amp;gt;&lt;/code&gt; is just a stand-in and can be used by any type. The generic is then passed into the &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; property because we don’t know what the value could be.&lt;/p&gt;

&lt;p&gt;So going down into the variable definition for &lt;code class=&quot;highlighter-rouge&quot;&gt;newModel&lt;/code&gt; we are looking to pass in a string type, and we do that by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;gt;&lt;/code&gt; angle brackets. Finally, we assign the &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; property to the string &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Brenda&quot;&lt;/code&gt;. You can see the printout below that. Now we can pass in any data type we’d like in this interface and use that same type as the value property.&lt;/p&gt;

&lt;p&gt;Cool right? You can do that with functions too! As seen below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-05-22-adventures-in-typescript/function-generic.png&quot; alt=&quot;Generics for functions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we have a &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; interface with two properties which will serve as an example of a data type for use to pass in. Then we have a function below where the idea is that it will be reused to grab any kind of resource from an API.&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;getResource&lt;/code&gt; function, you can see where the usefulness comes in; Seeing as we’re not sure what type of data we’re going to get, we can pass in the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;T&amp;gt;&lt;/code&gt; generic and then use that generic to return an array of types &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;T&amp;gt;&lt;/code&gt;. Here we can safely use the &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; interface or any other interface. Check out the results.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-05-22-adventures-in-typescript/function-generic-alocation.png&quot; alt=&quot;Use of Generics in functions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We called the &lt;code class=&quot;highlighter-rouge&quot;&gt;getResource&lt;/code&gt; function and passed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; type, and we can then map out the results from the &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; type. As seen in the notes, we’ll also have access to the type properties via autocomplete.&lt;/p&gt;

&lt;h3 id=&quot;union-types-&quot;&gt;Union Types &lt;a name=&quot;union-types&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Something that blew my mind was working with &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types&quot;&gt;union types&lt;/a&gt;. It was weird syntax I’d never seen, and it threw me until someone explained it to me.&lt;/p&gt;

&lt;p&gt;A union type is a type that can be one of two or more types. Let me show you what I mean.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-05-22-adventures-in-typescript/union-type.png&quot; alt=&quot;union-type&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We defined &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;, which can be either a string or a variable. The pipe operator, &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;, which is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#bitwise_operators&quot;&gt;the bitwise OR operator in JavaScript&lt;/a&gt;, denotes the different types of which this variable could be. Below are the results from printing this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d4kma4si4pw0z.cloudfront.net/2022-05-22-adventures-in-typescript/union-type-assignment.png&quot; alt=&quot;union-type-assignment.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we can assign multiple types to this variable through union types.&lt;/p&gt;

&lt;p&gt;This one is pretty simple, but we have union types in the source code at work that could be one of ten different types.&lt;/p&gt;

&lt;p&gt;This is again great for code reuse in that we can use assets differently due to them being able to take the form of more than one type and have different behavior.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;There is a ton of other stuff I’ve learned. Much of which is still in my notes and on my &lt;a href=&quot;https://github.com/georgeoffley/til&quot;&gt;Today I Learned repo&lt;/a&gt; and in need of digesting.&lt;/p&gt;

&lt;p&gt;This is just the beginning. I have an opportunity to learn so much from this group of engineers, and I am excited. In doing that, maybe I can help someone else learn too!&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Sun, 22 May 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/adventures-in-typescript.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/adventures-in-typescript.html</guid>
        
        <category>TypeScript</category>
        
        <category>JavaScript</category>
        
        <category>Newbie</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Context In React</title>
        <description>&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#data-in-react&quot;&gt;Data In React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#context-in-react&quot;&gt;Context In React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#context-in-use&quot;&gt;Context In Use&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;React offers the ability to build out web applications quickly. One of the details of this strategy includes passing data to different components in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction&quot;&gt;DOM&lt;/a&gt;. This can consist of needed data to build features, states of a component, and anything you can think of.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;data-in-react-&quot;&gt;Data In React &lt;a name=&quot;data-in-react&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;One great pattern in React is how data can be passed through the different components. However, this can get messy.&lt;/p&gt;

&lt;p&gt;An application might be broken down like below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-18-context-in-react/basic-app-layout.png&quot; alt=&quot;Basic layout of an app&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A collection of components. Some of these components return other components. These are called parent components, and their children are nested components.&lt;/p&gt;

&lt;p&gt;We can pass data back and forth throughout the lifetime of each component. Working with only props, for example, lets us pass data down the tree to the components that need it. However, this can present a problem.&lt;/p&gt;

&lt;p&gt;Using props or properties is a great way to handle data. However, the deeper the component is buried, the more you have to pass the props down. This is called &lt;a href=&quot;https://beta.reactjs.org/learn/passing-data-deeply-with-context#the-problem-with-passing-props&quot;&gt;prop drilling&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-18-context-in-react/react-props-only.png&quot; alt=&quot;React app with only Props&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using the workflow above, we have a couple of nested components passing the &lt;code class=&quot;highlighter-rouge&quot;&gt;Username&lt;/code&gt; prop down the tree. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Page&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;MainContent&lt;/code&gt; props are just passing down the props used by the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserCard&lt;/code&gt; component like a vertical &lt;a href=&quot;https://youtu.be/uviAFx4K78Y&quot;&gt;game of telephone&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now combine this with having to scale out your context to include hundreds of bits of data or state, which need to be passed down to various components at various levels of the tree, and we’ve got a problem.&lt;/p&gt;

&lt;h3 id=&quot;context-in-react-&quot;&gt;Context in React &lt;a name=&quot;context-in-react&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://reactjs.org/docs/context.html&quot;&gt;Context&lt;/a&gt; solves the problem by allowing us to pass down data without relying on continually passing props through components. Context in React should be used handling global data that does not have to change often. Using context to keep track of our username state improves the workflow by allowing components to use context as needed without passing it down the tree. Pictured below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-18-context-in-react/react-context.png&quot; alt=&quot;React with Context&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As illustrated above, we can provide the context to one component, and the children component will be able to access the context regardless of the level they are at. All without needing to have their parent components pass the data down.&lt;/p&gt;

&lt;h3 id=&quot;context-in-use-&quot;&gt;Context In Use &lt;a name=&quot;context-in-use&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;So let’s look at an example of context. I created a small React app and just made some barebones components. The first file we should check out is the &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-18-context-in-react/app.js.png&quot; alt=&quot;App.js file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are some lines of note, as you’ve undoubtedly seen, and then some other stuff needed for using context. The first out-of-place thing is using the React function &lt;code class=&quot;highlighter-rouge&quot;&gt;React.createContext()&lt;/code&gt;, which we use to create a context object. We also made a &lt;a href=&quot;https://reactjs.org/docs/context.html#contextprovider&quot;&gt;&lt;em&gt;provider&lt;/em&gt;&lt;/a&gt; for our context object and wrapped our &lt;code class=&quot;highlighter-rouge&quot;&gt;Page&lt;/code&gt; component in it.&lt;/p&gt;

&lt;p&gt;Context works using Providers and Consumers. In this case, we are looking to provide the context to our app for consumption by the components. So we use the provider tag, which every context object has, to pass in the &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; string to our nested components.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; attribute is a prop that the provider accepts and can pass down the tree. Many consumers can subscribe to one provider, and we’ll talk about that more.&lt;/p&gt;

&lt;p&gt;We’re not passing anything to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Page&lt;/code&gt; component except the &lt;code class=&quot;highlighter-rouge&quot;&gt;Header&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;MainContent&lt;/code&gt; components.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-18-context-in-react/page.js.png&quot; alt=&quot;Page.js component&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;Header&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-18-context-in-react/header.js.png&quot; alt=&quot;Header.js component&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The header is a regular old React component. However, we use the React hook &lt;code class=&quot;highlighter-rouge&quot;&gt;React.createContent()&lt;/code&gt; to subscribe to the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserContext&lt;/code&gt; object that we import into this component from the &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt; component. We can now use the curly brackets to pass in the &lt;code class=&quot;highlighter-rouge&quot;&gt;userNameContext&lt;/code&gt; into the JSX being returned by the component.&lt;/p&gt;

&lt;p&gt;Let’s look at another example. Below we have our &lt;code class=&quot;highlighter-rouge&quot;&gt;MainContent&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-18-context-in-react/maincontent.js.png&quot; alt=&quot;MainContent.js component&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Just another component with a nested component, &lt;code class=&quot;highlighter-rouge&quot;&gt;UserBox&lt;/code&gt;. Let’s look at what is in the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserBox&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-18-context-in-react/userbox.js.png&quot; alt=&quot;userbox.js.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;UserBox&lt;/code&gt; component can do as our header did; import the context object, subscribe to the provider using the &lt;code class=&quot;highlighter-rouge&quot;&gt;useContext&lt;/code&gt; hook and pass in the context using that context object. This is cool because we’re using context two levels below from where it was created without passing props through subsequent components.&lt;/p&gt;

&lt;p&gt;The app would look something similar to the below image. We can see the username string in the &lt;code class=&quot;highlighter-rouge&quot;&gt;header&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserCard&lt;/code&gt; components. I am not one for styling things effectively, so hold your judgments.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-18-context-in-react/whole-app.jpg&quot; alt=&quot;The Whole App&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Changing the value of the state would cause a render for the other components subscribed to the context. So it could cause issues if the state is constantly changing. So context fits nicely with a global state that is not likely to change often.&lt;/p&gt;

&lt;p&gt;The code for the above example can be &lt;a href=&quot;https://github.com/georgeoffley/Blog-Code/tree/3f6e720bfedcc049c73e8a2fd14b8c06ec7edf78/context-in-react/context-in-react&quot;&gt;found on my GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This has been an interesting learning experience. I’m happy to have gotten one of the fundamentals of React down on paper, so to speak. I hope this helps someone new coming into the React scene.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Apr 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/context-in-react.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/context-in-react.html</guid>
        
        <category>React</category>
        
        <category>JavaScript</category>
        
        <category>Newbie</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Spiking Tailwind CSS in a React App</title>
        <description>&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tailwind&quot;&gt;Tailwind&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-tailwind-in-react&quot;&gt;Using Tailwind in React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#something-a-little-more&quot;&gt;Something a Little More&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;It’s been some time since I did any frontend development, and I don’t miss it. After a couple of years of learning the fundamentals, I would have loved to have some alternatives to manually writing CSS.&lt;/p&gt;

&lt;p&gt;Now that I am diving back into it, I am happy there are tools not to replace but improve the CSS experience. In that spirit, I want to look at &lt;a href=&quot;https://tailwindcss.com/&quot;&gt;Tailwind CSS&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;tailwind-css-&quot;&gt;Tailwind CSS &lt;a name=&quot;tailwind&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Tailwind is different from other CSS frameworks I’ve tried. The software works on a lower level to allow easy CSS styling utilizing class names. Bootstrap works similarly, but the difference is that Tailwind does not come with predefined components. It is also different because the class names are compiled into CSS code.&lt;/p&gt;

&lt;p&gt;Tailwind is also not opinionated about how you make your designs, and thus they give you the tools you need and let you create unique components. It’s the difference between &lt;a href=&quot;https://www.timberland.com/shop/CategoryDisplay?catalogId=10101&amp;amp;langId=-1&amp;amp;categoryId=13502&amp;amp;storeId=7101&amp;amp;productId=p_20355&amp;amp;audience=men&amp;amp;page=configure&quot;&gt;designing boots on a website&lt;/a&gt; and having all the materials right before you to cobble together your shoes. This alone is valuable because you can avoid falling into the &lt;a href=&quot;https://www.dagusa.com/&quot;&gt;Bootstrap design trap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tailwind is a &lt;a href=&quot;https://tailwindcss.com/docs/utility-first&quot;&gt;“utility-first CSS Library,”&lt;/a&gt; From what I glean from their site, it means they tried to create a framework from a set of constrained utilities. This seems to translate into the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There are no more CSS class names to create in both HTML and CSS files as styles are implemented using low-level utility classes.&lt;/li&gt;
  &lt;li&gt;You add the styles you want into the HTML classes, which the compiler uses to generate CSS (which is attractive to me).&lt;/li&gt;
  &lt;li&gt;Your CSS files don’t grow since you’re generally not creating new styles.&lt;/li&gt;
  &lt;li&gt;The ability to create reusable styles using things like &lt;a href=&quot;https://tailwindcss.com/docs/reusing-styles#loops&quot;&gt;loops&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tailwind also gives you ways to easily extend their utilities by utilizing config files for adding things like custom colors, fonts, etc.&lt;/p&gt;

&lt;p&gt;I’ve noticed that they seem to lean into the idea of long strings of class names in HTML over regular CSS. You’ll see what I mean.&lt;/p&gt;

&lt;h3 id=&quot;setup-&quot;&gt;Setup &lt;a name=&quot;setup&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;So to try this and to learn the tech better for use in my work, I created a quick React application.&lt;/p&gt;

&lt;p&gt;After the React app creation, we can run the below commands.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tailwindcss
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will install the needed packages.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npx tailwindcss init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above command will create the config files we need, the &lt;code class=&quot;highlighter-rouge&quot;&gt;tailwind.config.js&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;postcss.config.js&lt;/code&gt; files. The &lt;code class=&quot;highlighter-rouge&quot;&gt;tailwind.config.js&lt;/code&gt; is where any customization options will go. By default, Tailwind looks for this file at the root of a project to create any customizations. For example, if you want to add colors or fonts that Tailwind does not have built-in, they will go in that config file.&lt;/p&gt;

&lt;p&gt;After that is installed, you replace everything in your &lt;code class=&quot;highlighter-rouge&quot;&gt;index.css&lt;/code&gt; file with the below lines.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@tailwind&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@tailwind&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@tailwind&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finally, to ensure that all the template files are added to the Tailwind config, make sure the &lt;code class=&quot;highlighter-rouge&quot;&gt;tailwind.config.js&lt;/code&gt; file looks like the below code.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./src/**/*.{html,js}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s a bit much, but that’s essentially it. You’re now ready to start styling stuff.&lt;/p&gt;

&lt;h3 id=&quot;using-tailwind-in-react-&quot;&gt;Using Tailwind in React &lt;a name=&quot;using-tailwind-in-react&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;After setting up our React project and installing Tailwind, I was ready to go. So I got rid of all the startup React stuff and started small.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;I'm using Tailwind!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pretty easy, and we get a simple heading tag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-02-spiking-tailwind-in-a-react-app/h1_no_style.png&quot; alt=&quot;H1 Tag with no style&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s start small and add some styling.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text-red-700 text-6xl hover:text-9xl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;I'm using Tailwind!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now I added a couple of styling classes to the JSX, and just like we were editing a CSS file, we got some results.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-02-spiking-tailwind-in-a-react-app/h1_style_no_hover.png&quot; alt=&quot;H1 tag with some basic styles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You may also notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;hover&lt;/code&gt; selector in there. Tailwind takes care of these, similar to how CSS does. You prepend the effect you want and the outcome, and it works just the same.And we can see the style change a little when we hover over the text.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-02-spiking-tailwind-in-a-react-app/h1_style_hover.png&quot; alt=&quot;Hover effect&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Adding these class names saved me from opening up VSCode and adding styles to a CSS file. I am already sold on Tailwind.&lt;/p&gt;

&lt;p&gt;You can also see the core use of Tailwind in adding class names to the HTML tags. This is a small example, but tags can have tons of styles, so adding a class name into the HTML can get overwhelming quickly. This is the language they lean into that I mentioned above.&lt;/p&gt;

&lt;h3 id=&quot;something-a-little-more-&quot;&gt;Something a Little More &lt;a name=&quot;something-a-little-more&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I am not a designer, but I find this setup easy to create components. So let’s say I broke my app into pieces. How can I style this card component I made? Tailwind makes it simple.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;p-20 bg-green-100&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h3&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;text-green-300 mb-4 text-sm font-bold&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cool&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Tailwind&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Stuff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;border-4 border-green-800 bg-white p-6 rounded-lg shadow-lg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;text-2xl font-bold mb-2 text-gray-800&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Look&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;text-gray-700&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;We&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;did&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Tailwind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the results.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-02-spiking-tailwind-in-a-react-app/card_styles.png&quot; alt=&quot;Basic card with styles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I didn’t have to write a single bit of CSS for this, and now I have a perfectly usable component. There’s no ending to this rabbit hole. Design all you want.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I can’t bring myself to write CSS. It’s a doomed relationship; with too much bad blood and too much history. However, I might just get through with Tailwind as a buffer for those awkward times I have to sit with it.&lt;/p&gt;

&lt;p&gt;Hyperbole aside, Tailwind is not a replacement for CSS but a fantastic addition to CSS for easily styling web components. Coupled with React, this was how we were meant to make apps. I’m excited to continue learning and hope this helped.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Small disclaimer&lt;/strong&gt;: I am not suggesting anyone reading this who might be new to frontend development jump straight into learning Tailwind. That journey starts with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/How_CSS_works&quot;&gt;learning how CSS works&lt;/a&gt;. Much like filmmaking, learn all the fundamentals first and then break the rules at your leisure.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Apr 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/spiking-tailwind-in-a-react-app.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/spiking-tailwind-in-a-react-app.html</guid>
        
        <category>React</category>
        
        <category>Tailwind</category>
        
        <category>JavaScript</category>
        
        <category>Intermediate</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Using SWR for Easy API Calls in React</title>
        <description>&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#swr&quot;&gt;SWR&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;React gives us the ability to create powerful and scalable apps. We need to quickly implement API calls to get our data displayed in our App for them to run. That’s where &lt;a href=&quot;https://swr.vercel.app/&quot;&gt;SWR&lt;/a&gt; comes in handy.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;swr-&quot;&gt;SWR &lt;a name=&quot;swr&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;My company embarked on a journey to create a new app for stakeholders. This included React for the frontend. Since then, I’ve been working on some React side projects to reinforce my learning from work. I struggled to use some built-in hooks to no avail. Then came SWR, which was mentioned as a way to do API calls in our work app. After integrating SWR into one of my side projects, I am sold.&lt;/p&gt;

&lt;p&gt;SWR is a react library used for easily fetching information from an API endpoint. SWR stands for “stale while revalidate.” According to their site, they derive the name from the practice of invalidating the cache. They use the cache to return data then send the fetch request to get up-to-date data. This makes sense seeing how the library seems to fetch data without user intervention.&lt;/p&gt;

&lt;p&gt;I was impressed seeing what is essentially a stream of data on my app as the data seamlessly updating when adding data. Plus, it’s lightweight and easy to implement. It also boasts some features over the built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hook as it also passes in errors for better exception handling and a more seamless experience maintaining the code.&lt;/p&gt;

&lt;h3 id=&quot;example-&quot;&gt;Example &lt;a name=&quot;example&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I’ll take us through how I implementedSWR it into my app. I already have a  React app, and I ran the install for SWR detailed below.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;swr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once that finished installing, I went to work. The first thing was to import the &lt;code class=&quot;highlighter-rouge&quot;&gt;useSWR&lt;/code&gt; function into one of the components.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-25-using-swr-for-easy-api-calls-in-react/import.png&quot; alt=&quot;Example import statement&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next was a simple fetcher function, taken right out of their docs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-25-using-swr-for-easy-api-calls-in-react/fetcher.png&quot; alt=&quot;Create fetcher function&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some notes about the fetcher. SWR takes in any fetcher object you want to pass to it. You can utilize libraries like &lt;a href=&quot;https://github.com/developit/unfetch&quot;&gt;unfetch&lt;/a&gt;, &lt;a href=&quot;https://axios-http.com/docs/intro&quot;&gt;Axios&lt;/a&gt;, or &lt;a href=&quot;https://graphql.org/&quot;&gt;GraphQL&lt;/a&gt;. I used the native fetch as I don’t have any unique logic running, and I am only returning simple JSON objects. So I configure it to use JSON for returning the data.&lt;/p&gt;

&lt;p&gt;SWR has three states for the data returned, &lt;code class=&quot;highlighter-rouge&quot;&gt;Loading&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Ready&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Error&lt;/code&gt;. These states can be used for exception handling or creating logic for loading behavior.&lt;/p&gt;

&lt;p&gt;The last thing we want to do is use the &lt;code class=&quot;highlighter-rouge&quot;&gt;useSWR&lt;/code&gt; function we imported to grab our file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-25-using-swr-for-easy-api-calls-in-react/useSWR.png&quot; alt=&quot;useSWR example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are a couple of things of note within this call. First, we’re passing in the fetcher function we created earlier and the API endpoint. Secondly, we set the results as an array with &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt; since we get back error data if we error out and want to store the message. Our returned data will go into the data variable.&lt;/p&gt;

&lt;p&gt;That’s easy. React treats the return values as an object. The data can be accessed using a &lt;code class=&quot;highlighter-rouge&quot;&gt;map()&lt;/code&gt; function and the  &lt;code class=&quot;highlighter-rouge&quot;&gt;data.&amp;lt;tag&amp;gt;&lt;/code&gt; syntax.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-25-using-swr-for-easy-api-calls-in-react/data.png&quot; alt=&quot;Data object named access&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;Conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;After some &lt;a href=&quot;https://twitter.com/georgeoffley/status/1497606201831567360?s=20&amp;amp;t=euyltPybu9OOs5SPdChQOQ&quot;&gt;documented time experimenting&lt;/a&gt;, I was resigned to React’s perceived complexity. However, as I build out more and more small accomplishments, I realized React is like anything else; it takes practice and the right tools. SWR is something I’m putting into my React utility belt. I hope this helps someone who might be struggling.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Mar 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/using-swr-for-easy-api-calls-in-react.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/using-swr-for-easy-api-calls-in-react.html</guid>
        
        <category>React</category>
        
        <category>JavaScript</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Table Resource VS Client in AWS</title>
        <description>&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the_problem&quot;&gt;The Problem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the_answer&quot;&gt;The Answer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;The Answer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;DynamoDB provides an excellent way to store data in a flexible and scalable way. Add it to Lambda and API Gateway, and you have a powerful group of tools, &lt;a href=&quot;https://georgeoffley.com/blog/using-api-gateway-with-lambda.html&quot;&gt;which I have written about&lt;/a&gt;. It was for these reasons that I chose to use it for a side project I am building to familiarize myself with React. It was in these features that I struggled with an issue in how &lt;a href=&quot;https://github.com/boto/boto3&quot;&gt;boto3&lt;/a&gt;, the SDK for talking with AWS in Python, implements their libraries.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;the-problem-&quot;&gt;The Problem &lt;a name=&quot;the_problem&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I have a personal rule; if it takes a certain amount of time to debug an issue, then there is something about the underlying technology that I do not understand. As it happens, I spent some time trying to get the APIs to work correctly in my side app recently. The problem boiled down to how my return data from the API was displayed in the application. It confounded me for some time. So I stepped back and challenged my assumptions about the tech. I followed the rabbit hole back to the API I wrote, where I found the problem.&lt;/p&gt;

&lt;p&gt;It turned out the problem was in using the &lt;a href=&quot;https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#client&quot;&gt;Client class&lt;/a&gt; in boto3. From their docs, Amazon calls the Client class a “low-level client representing Amazon DynamoDB.” So this made sense when I started seeing how the API would interact with my app.&lt;/p&gt;

&lt;p&gt;When making a call to the API, the JSON returned would have all these extra tags on them. Below is an example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-19-table-resource-vs-client-in-aws/client_resp.png&quot; alt=&quot;client_resp.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It seems that DynamoDB was tagging the data types, as string types would have the type “S” for string values and “N” for number values. It made little sense to me. There are possible solutions available in the library that will help &lt;a href=&quot;https://towardsaws.com/making-use-of-boto3-out-of-the-box-dynamodb-serializers-1dffbc7deafe&quot;&gt;unmarshal the data and clean it up a little&lt;/a&gt;, but these tools are &lt;a href=&quot;https://github.com/boto/boto3/blob/e353ecc219497438b955781988ce7f5cf7efae25/boto3/dynamodb/types.py#L233&quot;&gt;buried in the source code for boto3&lt;/a&gt; and don’t seem to have official documentation. There’s a &lt;a href=&quot;https://github.com/boto/boto3/issues/1630&quot;&gt;yet unresolved GitHub issue about it&lt;/a&gt;. So I had to look deeper for a solution.&lt;/p&gt;

&lt;h3 id=&quot;the-answer-&quot;&gt;The Answer &lt;a name=&quot;the_answer&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;After a while of searching through the AWS docs and trying various solutions, I was able to come up with a fix. I rewrote my API to grab all the records using the &lt;a href=&quot;https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#table&quot;&gt;Table&lt;/a&gt; class rather than the Client class.&lt;/p&gt;

&lt;p&gt;It turns out that the Client class works precisely like a low-level abstraction should, returning all the stuff that’s stashed into DynamoDB data tags and all. Not very reader-friendly.&lt;/p&gt;

&lt;p&gt;Here you can see what the code looks like using the Client class.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-19-table-resource-vs-client-in-aws/client_code.png&quot; alt=&quot;client_code.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here is the updated code for the Table resource.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-19-table-resource-vs-client-in-aws/table_code.png&quot; alt=&quot;table_code.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Very little in the logic changed. We are still creating a connection to AWS using a Lambda function. We are still returning the response to that function.&lt;/p&gt;

&lt;p&gt;There are, however, a couple of differences. We call the Table resource a little differently from the client, and I added some pagination to the table code. As boto3 will only return everything up to 1 MB, you need to put in pagination to get all your results.&lt;/p&gt;

&lt;p&gt;Making that change makes the API returns a cleaner response.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-19-table-resource-vs-client-in-aws/table_resp.png&quot; alt=&quot;table_resp.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No data tags and no messy nesting in our API data anymore.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I like challenging my assumptions. Being outside my comfort zone is how I learn best. I’ve been making small scripts similar to that using the Client class for a while now, so it was good to understand the limitations in the tool and the tradeoffs using others. How this discomfort shakes out in the React app remains to be seen, but I am sure I’ll figure those problems out too. I hope this helps someone.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Mar 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/table-resource-vs-client-in-aws.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/table-resource-vs-client-in-aws.html</guid>
        
        <category>AWS</category>
        
        <category>Lambda</category>
        
        <category>Intermediate</category>
        
        
        <category>Blog</category>
        
      </item>
    
  </channel>
</rss>
