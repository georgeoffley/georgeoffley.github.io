<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>I make great projects using Python, C#, PHP, and JavaScript. Currently learning about AWS, Go, C++, and the graphics pipeline. I also love writing and well made movies. Check out my blog and my twitter to contact me!</description>
    <link>https://georgeoffley.com/</link>
    <atom:link href="https://georgeoffley.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 18 Mar 2022 09:18:34 -0400</pubDate>
    <lastBuildDate>Fri, 18 Mar 2022 09:18:34 -0400</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>Modules in React</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/cover.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#react-modules&quot;&gt;React Modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#in-app-example&quot;&gt;In-App Example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#named-v-default&quot;&gt;Named Imports vs. Default Imports&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The organization of your apps is one of the most effortless quality of life improvements you can make. Recently I’ve been deep-diving into React for a work project, and I was able to get a crash course in how you organize one such app. Including how React treats its files and how we’re importing them. So today, I’d like to get into how React handles modules and how importing is done.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;react-modules-&quot;&gt;React Modules &lt;a name=&quot;react-modules&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://reactjs.org/docs/faq-structure.html#is-there-a-recommended-way-to-structure-react-projects&quot;&gt;React has no opinions on how you organize your code&lt;/a&gt;. This is fine as engineers usually have plenty of views on this, and the subject matter expert we’re working with was no exception. After talking it through, we decided to organize our app where each feature was organized into its own directory. This also gives us a choice to utilize &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; files to handle exports.&lt;/p&gt;

&lt;p&gt;The most straightforward analogy coming from Python was that React lets you put your files into a directory and then create an &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; file that exports everything. This is similar to how Python will utilize an &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; file to export everything into the main logic files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/react_modules.jpeg&quot; alt=&quot;React Modules diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So if I have one or more modules I need to import into the &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; file for a feature, I can utilize the &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; file to import all of them and serve as one export point for your &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; or wherever you are utilizing said feature.&lt;/p&gt;

&lt;h3 id=&quot;in-app-example-&quot;&gt;In-App Example &lt;a name=&quot;in-app-example&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Let’s go through a quick example. I created a small React application to demonstrate what I am talking about. I organized it as such.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Src
    &lt;ul&gt;
      &lt;li&gt;App Feature
        &lt;ul&gt;
          &lt;li&gt;Hello.js&lt;/li&gt;
          &lt;li&gt;Worlds.js&lt;/li&gt;
          &lt;li&gt;Index.js&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;App.js&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I created a directory named AppFeature to hold the modules I want to organize under there. The Hello and World modules look similar; they are only components that render a new div tag with some words. See the code below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/hello.png&quot; alt=&quot;hello.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/world.png&quot; alt=&quot;world.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The AppFeature directory will have an &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; file that will handle exporting. This file will be used as a “central hub” where we can export all our modules into different parts of the application. You can see the code below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/indexjs.png&quot; alt=&quot;indexjs.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the code above I put in two export statements. From here is where our modules will be exported from. This makes for cleaner imports into our &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; file. As seen below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/appjs.png&quot; alt=&quot;appjs.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the top, you can see a clean import statement where we import a list of modules from the AppFeature directory. After that, we can apply them right into our application. It comes out looking like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/app_page.png&quot; alt=&quot;app_page.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;named-imports-vs-default-imports-&quot;&gt;Named Imports vs. Default Imports &lt;a name=&quot;named-v-default&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The above example details what are referred to as Named Imports, but that is not the only way to handle exporting and importing. There are other ways to export/import your needed modules. For example, suppose we are building components with multiple modules that do not need to be imported into the main application files. In that case, we can organize them so our main module can import all it needs and serve as the main component or class module to be exported. As demonstrated below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/defualt_hello_world.png&quot; alt=&quot;defaulthelloworld.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/default_indexjs.png&quot; alt=&quot;default_index.js&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/default_appjs.png&quot; alt=&quot;default_app.js&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we organize our code such that we want to keep internal modules internal, we can explore this type of organization. Using Default Imports, we’re still doing the same thing: we use our &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; file to handle our exports. The difference is that we’re organizing everything into one module and only exporting that one module. This makes everything even cleaner.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;One of the goals for the application we are building is to optimize our workflow. Organizing your code by utilizing modules in React is just one way in which we are meeting that goal. There are many things to consider, but I believe we are headed in the right direction. I hope this helps someone looking to organize their React projects.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Mar 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/modules-in-react.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/modules-in-react.html</guid>
        
        <category>React</category>
        
        <category>Newbie</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Implementing Routing in React</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-12-implementing-routing-in-react/cover.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#react_router_dom&quot;&gt;React Router Dom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#explainer&quot;&gt;Explainer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Implementing routing in React applications can be one of the first tasks you undertake in the coding part of the development lifecycle. This was true for my team when we sat down to a mob programming session to go through a couple of our stories for a project. We brought in some help from people who know React to help us get started. I am not a React developer, so this is the first time I had actual exposure to people with expertise, so I am grateful it was a group programming session. I don’t know what I was doing when the rest of the world learned React, but I can only guess it had something to do with playing the Sims. Regardless I use the right tool for the job, and I need to learn it now. The first thing we did was implement some routing, and I will implement a much more simplified version of what we did below to show what I learned.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;react-router-dom-&quot;&gt;React Router Dom &lt;a name=&quot;react_router_dom&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I understand React is a set of APIs and libraries used in different ways to implement cool stuff on your screen. We got more into using TypeScript on top of React, but I like to write about things even if I only have a cursory knowledge of them, and my understanding of TypeScript doesn’t even measure up to that. So I’ll stick with React only for now.&lt;/p&gt;

&lt;p&gt;Routing in a React app is what the app does when a user goes to a specific URL. As we’re dealing with React, we need to create components that make up our pages, and we’ll use a library to route to those components. In our case, we used the ever-popular &lt;a href=&quot;https://reactrouter.com/&quot;&gt;React Router Dom&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;setup-&quot;&gt;Setup &lt;a name=&quot;setup&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;An easy bit of setup. I created a new app using &lt;code class=&quot;highlighter-rouge&quot;&gt;npx create-react-app react-router&lt;/code&gt;, which gave me a basic app. I then ran &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install react-router-dom&lt;/code&gt; to install the needed package. Then I was off to the races.&lt;/p&gt;

&lt;p&gt;I created two simple page components to then import into my main App.js.&lt;/p&gt;

&lt;p&gt;The Home component.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-12-implementing-routing-in-react/home.png&quot; alt=&quot;Home component&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the About component.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-12-implementing-routing-in-react/about.png&quot; alt=&quot;About component&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, I went through some of the docs and found an easy way to get basic routing. All of which is reflected in my main App.js file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-12-implementing-routing-in-react/app.png&quot; alt=&quot;App.js file&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;explainer-&quot;&gt;Explainer &lt;a name=&quot;explainer&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This needs explaining. I created a basic component for the home and the about pages. Both of them just return a header with the name in the tag. I imported them into app.js and imported BrowserRouter, Routes, and Route from the React Router Dom package. Each of these is going to help us create routing.&lt;/p&gt;

&lt;p&gt;First, we create the router using the BrowserRouter tag. Then nested in there, we make the Routes block. The routes block, which took the place of the Switch block in v6 of the React Router Package, looks at our nested routes and tells the app where to go. Finally, we have the “links” in the Route tags. We specify the path to look for in the Route tag and which element to point at. It’s also good to remember that the element should take the form of curly brackets and an open and closing tag (the &lt;code class=&quot;highlighter-rouge&quot;&gt;{&amp;lt;Home/&amp;gt;}&lt;/code&gt; you see in my code). I mention this as most tutorials I looked up about this used Switch, Links, and the elements used the &lt;code class=&quot;highlighter-rouge&quot;&gt;{Home}&lt;/code&gt; syntax.&lt;/p&gt;

&lt;p&gt;And that is it. If I navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:3000/&lt;/code&gt;, we see the below image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-12-implementing-routing-in-react/home_page.png&quot; alt=&quot;Home Page after implementing routing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the same thing on the about page at &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:3000/about&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-12-implementing-routing-in-react/about_page.png&quot; alt=&quot;About Page after implementing routing&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;It is a simple thing but something I learned while working with a team of React people. Using React is still akin to reading an upsidedown French map of Germany. However, I am starting to grasp the basics. Everything seems just to be something that’s been imported from somewhere else. Next time I think I’ll write about how you can create React packages similar to Python for easy and clean importing.&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Mar 2022 12:00:00 -0500</pubDate>
        <link>https://georgeoffley.com/blog/implementing-routing-in-react.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/implementing-routing-in-react.html</guid>
        
        <category>React</category>
        
        <category>Newbie</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Dockerizing System Tests With Selenium</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/selenium.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#selenium_webdriver&quot;&gt;Selenium WebDriver&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#running_tests&quot;&gt;Running Tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#notes&quot;&gt;Notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;We are spinning up a new application for some end users to enter data, so we need to build a robust testing system. Unit tests are a must, but those only test to ensure that all the classes, methods, and functions do what we expect. On top of that, we also need to verify that the web app as a whole looks and behaves how we hope it does to have a complete end-to-end testing apparatus. My goal for these first few spikes in the project was to find a tool for system testing and see if we could make it modular and easily automate it to not interfere with our workflow. I believe I found the solution. &lt;a href=&quot;https://www.selenium.dev/&quot;&gt;Selenium&lt;/a&gt; is a suite of tools for creating and automating browser tests, and I think it is what I was looking for. Let’s dive in.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;selenium-webdriver-&quot;&gt;Selenium WebDriver &lt;a name=&quot;selenium_webdriver&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Selenium is a multi-language suite of tools for creating browser-based automation tests. This tool will automate opening a browser, looking for a test condition, and reporting a pass or fail. Selenium is a whole suite of tools, but I decided to focus on &lt;a href=&quot;https://www.selenium.dev/documentation/webdriver/&quot;&gt;Selenium Web Driver&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Much like in the name, the software “drives” the web browser. Much like humans, we can bring up the webpage in a browser, enter in data, look up tags, and utilize all these capabilities to write tests using the API Selenium provides. A test opens a browser, &lt;a href=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/selenium_video.mp4&quot;&gt;and like magic, many things happen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My goal is to automate as much of this process as possible. So it would not be ideal to have a bunch of browsers launch with with ghosts running tests. A better solution was to run &lt;a href=&quot;https://github.com/SeleniumHQ/docker-selenium&quot;&gt;&lt;em&gt;headless browsers&lt;/em&gt;&lt;/a&gt; using container images provided by Selenium. This solution gives us a container with a built-in web browser which we don’t see that our script runs a test against. The results we can see in the terminal.&lt;/p&gt;

&lt;p&gt;As our project utilizes &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;, the easiest way to start is to grab the &lt;a href=&quot;https://github.com/SeleniumHQ/docker-selenium&quot;&gt;Docker image for the browser&lt;/a&gt; and start making some scripts. How this will look in the final solution is still to be determined, but I can replicate what I did for the sake of this write-up.&lt;/p&gt;

&lt;h3 id=&quot;setup-&quot;&gt;Setup &lt;a name=&quot;setup&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;To begin, I set up a &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file with the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/docker-compose.png&quot; alt=&quot;docker-compose.yml file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This gave us two containers, our browser using the Chrome-based selenium image and a Ruby-based container to run the script. Our new stack uses a lot of Ruby. The system container is built using an image from the docker file in the test directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/ruby-dockerfile.png&quot; alt=&quot;Dockerfile for Ruby based system&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This build handles installing the gems we need, including selenium-webdriver and the chromedriver-helper. Both are used to run our Web Driver script and utilize Chrome capabilities.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/gemfile.png&quot; alt=&quot;Gemfile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, the last bit is the script itself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/test-script.png&quot; alt=&quot;Test Script&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;running-tests-&quot;&gt;Running Tests &lt;a name=&quot;running_tests&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Let’s look at this script. My Ruby is rusty, but I tried my best. We set all our requirements, set a timer to make the thread sleep (more on that later), and then we write our test. In the script, we are writing the tests using the &lt;a href=&quot;https://rspec.info/&quot;&gt;RSpec&lt;/a&gt;. RSpec is a &lt;a href=&quot;https://www.jetbrains.com/mps/concepts/domain-specific-languages/&quot;&gt;domain-specific language&lt;/a&gt; built using Ruby to test Ruby code. We use this to test our behaviors using the describe and it blocks.&lt;/p&gt;

&lt;p&gt;We start by defining the &lt;a href=&quot;https://www.selenium.dev/documentation/webdriver/capabilities/&quot;&gt;capabilities&lt;/a&gt; we are looking for; in this case, we are testing a chrome browser, so we need to specify that.&lt;/p&gt;

&lt;p&gt;Then we use a variant of WebDriver called the &lt;a href=&quot;https://www.selenium.dev/documentation/webdriver/remote_webdriver/&quot;&gt;Remote WebDriver&lt;/a&gt;. Remote Driver is written identically to WebDriver, just with the caveat of the driver logic looking for the browser in another system. Here we set the address for the Chrome Selenium container so that our WebDriver knows to look for this remote machine to run the test against.&lt;/p&gt;

&lt;p&gt;Both containers are in the same network provided by Docker Compose, so we use the hostnames. Also, note that we are &lt;a href=&quot;https://docs.docker.com/compose/networking/&quot;&gt;mapping port 4444&lt;/a&gt; as the WebDriver will use this port to communicate.&lt;/p&gt;

&lt;p&gt;We then set the driver to navigate to our chosen website as an action. The following line sets what we expect to see using RSpec’s handy &lt;a href=&quot;https://relishapp.com/rspec/rspec-expectations/docs/built-in-matchers&quot;&gt;&lt;em&gt;expect function&lt;/em&gt;&lt;/a&gt;. We expect the page’s title to be equal to a string we provide and fail if the title is mismatched. Then we’ll just take a screenshot and save the image to a local drive using one of the built-in save_screenshot functions. Finally, and this was important, use the &lt;em&gt;quit&lt;/em&gt; function.&lt;/p&gt;

&lt;p&gt;We run this just by running &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up&lt;/code&gt;, and we can see the test passed as going to Google does indeed yield a page title of “Google.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/test-results.png&quot; alt=&quot;Test results in terminal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also see the screenshot taken from the remote browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/test_image.png&quot; alt=&quot;Resulting image from test&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;notes-&quot;&gt;Notes &lt;a name=&quot;notes&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Using the &lt;em&gt;quit&lt;/em&gt; function was essential to kill the connection, but it also closed the browser we can’t see. Additionally, I mentioned I would come back to using the sleep function in Ruby. It turns out using the &lt;a href=&quot;https://docs.docker.com/compose/startup-order/&quot;&gt;&lt;em&gt;depends_on&lt;/em&gt;&lt;/a&gt; feature in Docker Compose is not enough to ensure services are available to each other. When I began running the network, the remote driver would continually fail to connect. It turns out we just needed a moment for everything to boot. &lt;a href=&quot;https://docs.docker.com/compose/startup-order/&quot;&gt;Docker recommends creating a wait script&lt;/a&gt; but pausing the thread for a moment worked just as well.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This was a pretty simple example, but it answered my questions. We can use this to test website behavior, make it modular, and automate the tests. That checks enough boxes for me to keep going down this rabbit hole. The next goal is to develop an automated solution and possibly clean up the deployment a little. I’m thinking of having these two containers not run with the rest of the project and boot up the containers using a bash script specifically for testing. I might write about that too.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Mar 2022 12:00:00 -0500</pubDate>
        <link>https://georgeoffley.com/blog/dockerizing-system-tests-with-selenium.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/dockerizing-system-tests-with-selenium.html</guid>
        
        <category>Docker</category>
        
        <category>Testing</category>
        
        <category>Intermediate</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Shared Memory in Docker</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-05-shared-memory-in-docker/cover.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#shared_memory_device&quot;&gt;Shared Memory Device&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#use_in_docker&quot;&gt;Use in Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Recently, I was experimenting with system testing on a new stack. While working with &lt;a href=&quot;https://www.selenium.dev/documentation/webdriver/remote_webdriver/&quot;&gt;Selenium Remote Driver&lt;/a&gt; to create &lt;a href=&quot;https://en.wikipedia.org/wiki/Headless_browser&quot;&gt;headless web browsers&lt;/a&gt; (more on that later) to run against my app, I came across a Docker option I had not known. This Docker feature allowed for easily accessible and fast file reading and writing between the host and the container. It was being used as a volume, but I learned it was much more. When I looked it up, it was referred to as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Shared_memory&quot;&gt;&lt;em&gt;Shared Memory Device&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;shared-memory-device-&quot;&gt;Shared Memory Device &lt;a name=&quot;shared_memory_device&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Turns out that this is an old Linux staple. The shared memory device, located in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/shm/&lt;/code&gt; directory in the file system, utilizes temporary storage using RAM rather than disk storage. Using a shared volume available on the RAM and not the disk makes for a much faster read/write speeds. These devices also allows for &lt;a href=&quot;https://en.wikipedia.org/wiki/Inter-process_communication&quot;&gt;inter-process communication&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;use-in-docker-&quot;&gt;Use in Docker &lt;a name=&quot;use_in_docker&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Docker allows for the use of this device. When conducting my testing, I used the volume mapping feature to easily map local directories with directories inside the containers we’re working on. As seen below.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /dev/shm/:/dev/shm/ &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; ubuntu ubuntu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This mapped the local shared memory device to the Docker device. Docker, by default, allows for up to 64 MB of storage space using the shared memory device. You can see the default allocation when searching for the shared storage device within the container. As seen below.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker inspect ubuntu | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; shm
            &lt;span class=&quot;s2&quot;&gt;&quot;ShmSize&quot;&lt;/span&gt;: 67108864,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I was saving screenshots just to ensure that I was looking at the thing I was hoping to look at. Although I was only doing some foundational work, I could find myself in a pickle with only 64 MB of space available if this work ends up scaling. Should we need to, Docker lets us change the size of this device using the &lt;em&gt;–shm-size&lt;/em&gt; option. As seen below.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /dev/shm/:/dev/shm &lt;span class=&quot;nt&quot;&gt;--shm-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2gb &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; ubuntu ubuntu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Above we add in the &lt;em&gt;–shm-size&lt;/em&gt; option and we can specify all the space we need! Let’s look one more time to confirm that it works.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker inspect ubuntu | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; shm
            &lt;span class=&quot;s2&quot;&gt;&quot;ShmSize&quot;&lt;/span&gt;: 2147483648,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Shazam! We have more storage in our shared memory device to play around with.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;There is more to come about my adventures in Dockerizing system testing, but for now, I was able to learn a new thing about Linux and Docker. I hope it helps someone who came across it without knowing as I did.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Mar 2022 12:00:00 -0500</pubDate>
        <link>https://georgeoffley.com/blog/shared-memory-in-docker.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/shared-memory-in-docker.html</guid>
        
        <category>Docker</category>
        
        <category>Intermediate</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Using Amazon API Gateway with Lambda</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-02-09-using-api-gateway-with-lambda/cover.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#amazon_api_gateway&quot;&gt;Amazon API Gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setting_up_an_api&quot;&gt;Setting up an API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#adding_the_trigger&quot;&gt;Adding the Trigger&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setting_the_methods&quot;&gt;Setting the Methods&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introductions-&quot;&gt;Introductions &lt;a name=&quot;Introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I follow this movie podcast where they review and talk about well movies. It’s a fantastic podcast with a diverse set of people who’ve worked in the industry a long time, and I enjoy their opinions. At the end of each episode, they do a “Staff Pick” where they pick out a movie that shares themes with the movie they just reviewed or movies they think people should see. As I don’t have time to watch all the movies they suggest every week, I need to keep a running list of these films. They offer some good stuff.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This presented a good opportunity to get some practice using React. I could build a tiny site cataloging all the suggested films. I have no React knowledge, so I started by creating a database to store their suggested films to stick with the iterative approach. Now I need to set up something to query the database and get back a list of the movies. That is where Amazon API Gateway and Lambda come in.&lt;/p&gt;

&lt;h3 id=&quot;amazon-api-gateway-&quot;&gt;Amazon API Gateway &lt;a name=&quot;amazon_api_gateway&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://georgeoffley.com/blog/creating-a-twitter-bot-using-aws-lambda-and-go.html&quot;&gt;I’ve covered AWS Lambda before&lt;/a&gt;, so I won’t go into it much. Amazon API Gateway, however, is an AWS service that allows you to quickly spin up API endpoints for use in your web applications. When you need to request data for your website, an API endpoint is what you’ll use. An &lt;em&gt;API endpoint&lt;/em&gt; is a URL that your application can reach out to request some data. For example, &lt;a href=&quot;https://ghibliapi.herokuapp.com/films/58611129-2dbc-4a81-a72f-77ddfc1b1b49&quot;&gt;this API endpoint&lt;/a&gt; lets me look up Studio Ghibli movies.&lt;/p&gt;

&lt;p&gt;These can scale like crazy, and API Gateway lets you manage, monitor, and add endpoints to your service quickly. For this project I am spinning up, we only need to return a list of the movies in the table. So let’s begin.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-an-api-&quot;&gt;Setting up an API &lt;a name=&quot;setting_up_an_api&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The first thing is setting up something to process the request once our service reaches out via an API endpoint. AWS Lambda is what we’ll use to create the process to query our database and return all our stuff.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;So we go into the AWS Console and create our Lambda. We’re returning all our items with a simple query, so it’s an easy setup. Here’s the code:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;boto3&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lambda_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boto3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'dynamodb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;aws_access_key_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'KEY'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;aws_secret_access_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'SECRET'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_all_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;TableName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'MaxFilmStaffPicks'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;
        
        
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_all_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;adding-the-trigger-&quot;&gt;Adding the Trigger &lt;a name=&quot;adding_the_trigger&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;After we have the Lambda function up and running, we need to create something to initiate it, like a trigger.&lt;/li&gt;
  &lt;li&gt;You can see a button to &lt;em&gt;Add trigger&lt;/em&gt; at the top of the Lambda menu. You can click that and select &lt;em&gt;API Gateway&lt;/em&gt; in the proceeding menu.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-02-09-using-api-gateway-with-lambda/trigger.png&quot; alt=&quot;Trigger&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Then you can hit &lt;em&gt;Create API&lt;/em&gt;, which brings up the options for APIs. In this case, I’m making a &lt;em&gt;REST API&lt;/em&gt;, so I select that.&lt;/li&gt;
  &lt;li&gt;For security, I pick &lt;em&gt;Open&lt;/em&gt;, as this is just a practice app. You can see what I chose below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-02-09-using-api-gateway-with-lambda/create_api_screen.png&quot; alt=&quot;Create API Screen&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;setting-the-methods-&quot;&gt;Setting the Methods &lt;a name=&quot;setting_the_methods&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;I finish off by going into the API Gateway menu to check out the newly created endpoint.&lt;/li&gt;
  &lt;li&gt;After that, you’ll be greeted by a screen with all our methods. The default created method is the &lt;em&gt;ANY&lt;/em&gt; method; I want this to be a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET&quot;&gt;&lt;em&gt;GET&lt;/em&gt;&lt;/a&gt; method. The difference between HTTP messages is a bit out of scope, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods&quot;&gt;but you should know them&lt;/a&gt;. We are using this endpoint only to request information for our application, so we stick to GET.&lt;/li&gt;
  &lt;li&gt;We’ll select the ANY method, click the &lt;em&gt;Action&lt;/em&gt; menu above it, and delete the method.&lt;/li&gt;
  &lt;li&gt;Then we go back to the same menu and click Create Method.&lt;/li&gt;
  &lt;li&gt;From the dropdown, we select GET.&lt;/li&gt;
  &lt;li&gt;Following this, we enter the name of the Lambda function this is for, and we’re done.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-02-09-using-api-gateway-with-lambda/method_creation.png&quot; alt=&quot;Method Creation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Very last step is to deploy the API.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We click the same menu and click &lt;em&gt;Deploy API&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;You’ll then be asked which &lt;em&gt;Stage&lt;/em&gt; you want to deploy in. When creating APIs, you can create many stages for your APIs, which will affect how they are used—for example, setting up a dev stage or creating different versions of your API. Whatever stage you set will reflect in the endpoint. See below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-02-09-using-api-gateway-with-lambda/stage_url.png&quot; alt=&quot;Stage URL&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For this instance, it is one API endpoint, in one app, for one specific purpose. I just used the default.&lt;/li&gt;
  &lt;li&gt;Now we’re done. We test the endpoint, and we get data!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-02-09-using-api-gateway-with-lambda/data.png&quot; alt=&quot;Data!&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Now I have a working API for grabbing my data. React confuses me, as I thought I’d be able just to pull data like I would a Python app. However, I am sure I will learn much more as I continue. And now you also have some knowledge of setting up endpoints in Amazon API Gateway.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Feb 2022 12:00:00 -0500</pubDate>
        <link>https://georgeoffley.com/blog/using-api-gateway-with-lambda.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/using-api-gateway-with-lambda.html</guid>
        
        <category>AWS</category>
        
        <category>Lambda</category>
        
        <category>API Gateway</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Shenanigans with Shaders</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/cover.jpg&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#shaders&quot;&gt;Shaders&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#shader_code&quot;&gt;Shader Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conslusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For those of you who love rabbit holes, learning graphics programming is a pretty deep one. There’s always some new thing to learn, there’s a bunch of different new languages and toolsets to know, and on top of all that, &lt;a href=&quot;https://www.youtube.com/watch?v=tt_gPXpx0eo&amp;amp;t=101s&amp;amp;ab_channel=SamwellTarly&quot;&gt;there’s math&lt;/a&gt;. Like anything else in programming, you pick up momentum with each new thing you build, so I &lt;a href=&quot;https://github.com/Xibanya/ShaderTutorials&quot;&gt;found a tutorial&lt;/a&gt; and started making shaders. I know very little about this. However, I’m writing what I’m learning, so don’t come for me if I’m off on anything.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;shaders-&quot;&gt;Shaders &lt;a name=&quot;shaders&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A shader is a program that runs on the GPU as part of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Graphics_pipeline&quot;&gt;graphics pipeline&lt;/a&gt;. We’re going to focus primarily on shaders in Unity. There are other ways to tackle this, but Unity gives an easy setup to get started quickly. For the context of Unity, a shader is a small script containing logic and calculations for determining the colors of a pixel.&lt;/p&gt;

&lt;p&gt;In Unity, we create &lt;em&gt;shader objects&lt;/em&gt; which act as wrappers for our shader program. A shader object exists in a &lt;em&gt;shader asset&lt;/em&gt; which is just the script we are writing. Creating these in Unity allows for a great deal of freedom in what we make. What we’ll focus on is adding some basic functionality to a shader. We’ll be focusing on using &lt;a href=&quot;https://docs.unity3d.com/Manual/SL-Reference.html&quot;&gt;&lt;em&gt;ShaderLab&lt;/em&gt;&lt;/a&gt; to create shaders.&lt;/p&gt;

&lt;h3 id=&quot;setup-&quot;&gt;Setup &lt;a name=&quot;setup&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The first thing to set yourself up making shaders in Unity is Unity. So &lt;a href=&quot;https://unity3d.com/get-unity/download&quot;&gt;download it&lt;/a&gt;, and create a new project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/new_scene.png&quot; alt=&quot;New Scene in Unity&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I won’t give a full rundown of Unity and the stuff you can do. I leave that to &lt;a href=&quot;https://learn.unity.com/&quot;&gt;better minds&lt;/a&gt;. In the &lt;em&gt;Hierarchy Window&lt;/em&gt;, right-click and scroll to &lt;em&gt;3D Object&lt;/em&gt; and click whichever object grabs your fancy. I always pick sphere for testing stuff. Now we have a &lt;a href=&quot;https://en.wikipedia.org/wiki/Polygon_mesh&quot;&gt;&lt;em&gt;3D Mesh&lt;/em&gt;&lt;/a&gt; on the screen that we can begin adding things to it. In the &lt;em&gt;Project Window&lt;/em&gt;, right-click on the word &lt;em&gt;Assets&lt;/em&gt; and create two new folders, &lt;em&gt;Materials&lt;/em&gt; and &lt;em&gt;Shaders&lt;/em&gt;. Double click into the Materials folder, right-click and Create is right at the top -&amp;gt; click Material. Materials are similar to skins we can apply to 3D objects. We will use this new material to add our new shader to the 3D Mesh. After that, drag our new material into the &lt;em&gt;Scene Window&lt;/em&gt; where our sphere is and onto the sphere we made. Now right-click our Shaders folder scroll to Create -&amp;gt; Shader -&amp;gt; Standard Surface Shader. Click the sphere in the Scene window to bring up the &lt;em&gt;Inspector Window&lt;/em&gt;. Finally, drag the shader file over to the inspector window with our sphere covered in our new material. We have just applied our shader to the materials. You should see this in the Inspector Window.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/test_material.png&quot; alt=&quot;Test Material inspector window&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now go back to the Project window and double click our new Shader file. Unity will launch an IDE for use to check out the code. You can configure your choice of IDE; I have VSCode configured. Open the Shader file, and let’s check out the code. I created some basic shader code you can use.&lt;/p&gt;

&lt;h3 id=&quot;shader-code-&quot;&gt;Shader Code &lt;a name=&quot;shader_code&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Here is the complete, minimal shader code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/code.png&quot; alt=&quot;Full Shader Code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It looks a bit much to anyone new to this, including myself, so let’s take it a section at a time. The first thing at the top, starting with “Shader,” is the &lt;em&gt;Shader Block&lt;/em&gt;. This is used to define our Shader Object. You can use this to define your properties, create many shaders using the &lt;em&gt;SubShader&lt;/em&gt; blocks, assign custom options, and assign a &lt;em&gt;fallback&lt;/em&gt; shader object. Here you can see the name of our shader and that it is in the “Custom” directory.&lt;/p&gt;

&lt;p&gt;Within the Shader block curly brackets, we have our other sections. The first is our &lt;em&gt;Properties&lt;/em&gt;. The properties box is where we define the properties for our materials. A material property is what Unity stores along with our materials. This allows for different configurations within Unity by creating things like sliders and inputs within the Inspector window for us to play around with. We defined two properties, the &lt;em&gt;MainColor&lt;/em&gt; and the &lt;em&gt;MainTexture&lt;/em&gt;. Using square brackets, I outlined which property was the default color and default texture. We also defined the default values for these properties. There’s a bit to these values but suffice it to say, both values are default white.&lt;/p&gt;

&lt;p&gt;The second block is our SubShader; this is where our shader logic goes. You can define multiple sub shaders for many different uses. For example, depending on the graphics hardware you want to support, you can make shaders for the various graphics APIs. Within our block, you can see some code for assigning &lt;a href=&quot;https://docs.unity3d.com/Manual/SL-SubShaderTags.html&quot;&gt;&lt;em&gt;tags&lt;/em&gt;&lt;/a&gt;, assigning &lt;a href=&quot;https://docs.unity3d.com/Manual/SL-ShaderLOD.html&quot;&gt;&lt;em&gt;levels of detail (LOD)&lt;/em&gt;&lt;/a&gt;, and the &lt;a href=&quot;https://en.wikibooks.org/wiki/Cg_Programming/Unity&quot;&gt;&lt;em&gt;CGPROGRAM&lt;/em&gt;&lt;/a&gt; block. I want to draw your attention to this section of the code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/output.png&quot; alt=&quot;Output function&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First, we define the data types for our inputs and outputs and create a function for us to serve the outputs into unity. Our Input we set up as &lt;em&gt;uv_Maintex&lt;/em&gt;; this allows for us to input a texture object. Then we create a &lt;em&gt;fixed4&lt;/em&gt; variable for our &lt;em&gt;_Color&lt;/em&gt; attribute. The &lt;em&gt;o.Albedo&lt;/em&gt; parameter is what is used to control the base color of the surface. Here we are taking the values of our texture and multiplying them by our color input. The code above gets you something similar to this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/color.png&quot; alt=&quot;Output function&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I was proud of myself the first time I made this from memory. Our coded shader lets us control the color of the material and add basic textures to it. Working in graphics does not lead to instant gratification, as anything you do requires a ton of setup. However, this and &lt;a href=&quot;https://www.shadertoy.com/&quot;&gt;ShaderToy&lt;/a&gt; get you that dopamine hit.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Above I went through some fundamentals of shaders in Unity. I skipped over a ton of information as I’m still learning a lot, and a full informed explainer would be twenty pages long. There is a lot to programming graphics and shaders specifically. I suggest you check out stuff like &lt;a href=&quot;https://github.com/Xibanya/ShaderTutorials&quot;&gt;Team Dogpit’s shader tutorial&lt;/a&gt; for a way better deep dive. I’m excited to dig into this world. I want to learn to create some of the incredible stories I see in animation, and any first step is a step in the right direction. Thanks for reading.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Nov 2021 12:00:00 -0500</pubDate>
        <link>https://georgeoffley.com/blog/shinanigans-with-shaders-copy.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/shinanigans-with-shaders-copy.html</guid>
        
        <category>Graphics</category>
        
        <category>Unity</category>
        
        <category>ShaderLab</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Messaging and Madness: Sending Messages with AMQP and Amazon MQ</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/title_card.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#amqp&quot;&gt;AMQP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#amqp_amazon_mq&quot;&gt;AMQP and Amazon MQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#serialization&quot;&gt;Serialization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;How do software systems talk to each other? Back-end systems can scale into giant melted together &lt;a href=&quot;https://youtu.be/NH-8L1iZq20&quot;&gt;Cronenberg monsters&lt;/a&gt;, often making up different tools and languages. So, communicating between these services can become an untenable challenge without some shared vocabulary. We can communicate in many ways, but today I wanted to talk about asynchronous messaging protocols and figure out how AWS can help.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;amqp-&quot;&gt;AMQP &lt;a name=&quot;amqp&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;AMQP stands for Advanced Message Queuing Protocol. I’ve been working to implement it for some back-end software suites I’m building out to enable them to talk to each other. AMQP utilizes these things called &lt;em&gt;brokers&lt;/em&gt; to publish messages on, then on the other end, a receiving service subscribed to the same “channel” that we posted to can pick up that message.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/hello-world-example-routing.png&quot; alt=&quot;Hello World Visualization&quot; /&gt;
via &lt;a href=&quot;https://www.rabbitmq.com/tutorials/amqp-concepts.html&quot;&gt;Rabbit MQ Tutorials&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s dive a little further down; the &lt;em&gt;publisher&lt;/em&gt; service publishes a message to an &lt;em&gt;exchange&lt;/em&gt; on a &lt;em&gt;broker&lt;/em&gt;. This exchange has &lt;em&gt;routes&lt;/em&gt; that lead to &lt;em&gt;queues&lt;/em&gt;, or “channels,” where the payload is published. We make sure to include the sending information with our message to be routed to the correct queue. The broker cannot see the message, although it might look into any metadata attached to the message from the publisher. This workflow asynchronously sends messages. Imagine a server version of a mail sorting machine shooting letters into the correct mail slot based on the address.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/mail_sorting.gif&quot; alt=&quot;Mail Sorting Gif from MIB II&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When referring to a publisher, I mean some code that we utilize to connect and send a message. AMQP is programmable, so I can shape it to fit most situations. In this case, we need to send messages to our different software suites to trigger actions to happen. Learning this took some time, but it’s been simple to implement.&lt;/p&gt;

&lt;p&gt;There are different types of exchanges that we can use to make these services fit our needs. I’m going to explain what we use briefly.&lt;/p&gt;

&lt;p&gt;We use a &lt;em&gt;direct exchange&lt;/em&gt; utilizing &lt;em&gt;routing keys&lt;/em&gt; to bind queues to exchanges. Our code can use direct exchanges to distribute tasks to many different endpoints, but we used these direct exchanges to make direct routes between our services. Other types of exchanges can be used to broadcast messages. More information can be found &lt;a href=&quot;https://www.rabbitmq.com/tutorials/amqp-concepts.html&quot;&gt;here&lt;/a&gt;. For now, we’re going to focus on direct exchanges.&lt;/p&gt;

&lt;h3 id=&quot;amqp-and-amazon-mq-&quot;&gt;AMQP and Amazon MQ &lt;a name=&quot;amqp_amazon_mq&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;We touched on all that because I wanted to talk about &lt;a href=&quot;https://aws.amazon.com/amazon-mq/?amazon-mq.sort-by=item.additionalFields.postDateTime&amp;amp;amazon-mq.sort-order=desc&quot;&gt;Amazon MQ&lt;/a&gt;. Amazon MQ is a fully managed platform for setting up message brokers. Amazon MQ utilizes both RabbitMQ and Apache Active MQ for creating brokers. We’re sticking with Rabbit MQ for the time being.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/amazon_mq_dash.png&quot; alt=&quot;Amazon MQ Dashboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here above, you can see you can easily set up a broker in just a few clicks. I left most of the settings on default, except for choosing “RabbitMQ” for our broker engine and setting some security up for accessing our management console.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/rabbit_mq_dash.png&quot; alt=&quot;Rabbit MQ Management Console&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we get that, we have access to the RabbitMQ dashboard Amazon MQ created and is managing. Now that we have a broker set up, we can play with some code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/code.png&quot; alt=&quot;Code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Above I use the library &lt;a href=&quot;https://github.com/celery/kombu&quot;&gt;Kombu&lt;/a&gt; to create some connections and send some stuff. I started by setting up our environment variables. Then created exchange and queue objects. Finally, I made our connection object and the producer object, and then we sent a simple “Hello” message.&lt;/p&gt;

&lt;h3 id=&quot;serialization-&quot;&gt;Serialization &lt;a name=&quot;serialization&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Serialization is &lt;a href=&quot;https://www.tutorialspoint.com/object_oriented_python/object_oriented_python_serialization.htm&quot;&gt;another blog post&lt;/a&gt;, but I chose to use JSON to serialize the payload. In the production software, I use a combination of JSON and &lt;a href=&quot;https://docs.python.org/3/library/pickle.html&quot;&gt;Pickle&lt;/a&gt; to serialize things like image data.&lt;/p&gt;

&lt;p&gt;Now we can see our message published on the queue I declared in our publisher service. An identical receiving service would be set up on the other side to read out messages sent to that queue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/results.png&quot; alt=&quot;Results&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;In conclusion, using Amazon MQ allows us to set up managed brokers for us to send messages. With AMQP as the broker engine, we have a lightweight message-sending workflow. Thanks for reading.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Oct 2021 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/messaging-and-madness-sending-messages-with-amqp-and-amazon-mq-copy.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/messaging-and-madness-sending-messages-with-amqp-and-amazon-mq-copy.html</guid>
        
        <category>AWS</category>
        
        <category>Python</category>
        
        <category>AMQP</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Health Checking S3 and DynamoDB in AWS</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-03-03-checking-health-in-s3-and-dynamodb/cover.jpg&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#problem&quot;&gt;Problem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#s3_solution&quot;&gt;S3 Solution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dynamo_solution&quot;&gt;DynamoDB Solution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A hybrid infrastructure has tons of exciting challenges. Although we host a great deal of our software in AWS at my company, we cannot do everything in the cloud. As such, we have tons of physical infrastructure as well. This hybrid infrastructure presents many challenges that we strive to overcome on the software team. One of the challenges we are working towards is imaging and utilizing software to detect our yields. This piece of that puzzle will focus on storage for our images.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;We decided that we would use a combination of services offered by AWS. The first is the Amazon Simple Storage Service or S3 for image storage and DynamoDB for holding metadata of said images. Given that we are getting information straight from hardware, many things might go wrong, from getting the pictures to when said pictures are pushed to AWS. This brings us to this evening’s question: How can I be sure these services are available for me to send stuff to?&lt;/p&gt;

&lt;h3 id=&quot;problem-&quot;&gt;Problem &lt;a name=&quot;problem&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Well, as it turns out, there are a few ways this can be done. For example, there are libraries out there that will scan health check websites to see if AWS has any service outages. This would not be a great way to do health checks for a production application. So, I decided to spike this problem and make something myself. I am not worried about AWS services being out as they have high availability using their different availability zones. I am more concerned about our endpoints failing, internet issues, or Cloverfield monsters. So, this needs to be explored.&lt;/p&gt;

&lt;h3 id=&quot;s3-solution-&quot;&gt;S3 Solution &lt;a name=&quot;s3_solution&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A simple solution for checking the health of my resources was needed. Luckily, I quickly put something together using the &lt;a href=&quot;https://boto3.amazonaws.com/v1/documentation/api/latest/index.html&quot;&gt;Boto3 library&lt;/a&gt;, which is the AWS SDK for Python. This library gives us easy access to the AWS API for configuring and managing services. The first thing I did was create an object class to utilize the Client class in Boto3.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-03-03-checking-health-in-s3-and-dynamodb/client_object.png&quot; alt=&quot;Client Object&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We only need to pass in our access credentials and the services we want to create a client object for, and we get our client object back. Each turn in Boto3 allows for interacting with the Client class. The docs define the Client class as &lt;a href=&quot;https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#client&quot;&gt;“a low-level client representing whatever service”&lt;/a&gt;. In most cases, you would use it to access the various functions for interacting with the service.&lt;/p&gt;

&lt;p&gt;After that, I put together some simple logic to return some information on the resource we are looking for. In our case, we were trying to get access to a bucket where we will store images. This solution is enough to satisfy me that the resource exists, and I can communicate with it. Below is the code I used for S3.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-03-03-checking-health-in-s3-and-dynamodb/s3.png&quot; alt=&quot;S3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The code above sets up a new client instance and utilizes the &lt;a href=&quot;https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.head_bucket&quot;&gt;&lt;em&gt;head_bucket()&lt;/em&gt; function&lt;/a&gt;. This is great for seeing if a bucket exists and if the entity polling it has permissions to access it. In my case, I only need to be able to see if I get a message back. So, I pass in the bucket name, and I can receive a 200 message back from the server if the resource is there and I have access to it. I like this approach because it is dead simple, and I also get to utilize the custom exception that we get access to using the client object, which is the &lt;em&gt;NoSuchBucket&lt;/em&gt; exception. Using this exception allows us to be concise with our exceptions.&lt;/p&gt;

&lt;p&gt;There were some questions about the limitations on being able to use something like this. We expect to use this frequently to pole S3 and make sure that we can talk to our bucket. If AWS is not available, we need to turn off the spigot and stop our software from sending stuff to AWS and not lose messages in the void of space. That said, we will be polling a few times a second at least; luckily for us, &lt;a href=&quot;https://aws.amazon.com/about-aws/whats-new/2018/07/amazon-s3-announces-increased-request-rate-performance/&quot;&gt;S3 upped their request rate to 3500 to add data and 5500 for retrieving data&lt;/a&gt;. This gives us plenty of room to be able to pole what we need.&lt;/p&gt;

&lt;h3 id=&quot;dynamodb-solution-&quot;&gt;DynamoDB Solution &lt;a name=&quot;dynamo_solution&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;With the client object that we created above, we can also use that to access DynamoDB. As such, the code is below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-03-03-checking-health-in-s3-and-dynamodb/dynamo.png&quot; alt=&quot;Dynamo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above code snippet does the same thing as the S3 code does. We create a new instance, and we use the &lt;a href=&quot;https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#DynamoDB.Client.describe_table&quot;&gt;&lt;em&gt;describe_table()&lt;/em&gt; function while passing in the table name&lt;/a&gt;. This function returns information about the table, including the status. Also, note that the &lt;em&gt;ResourceNotFoundException&lt;/em&gt; is another custom exception provided by the Dynamo Client object. This bit of code satisfies what I need to be able to check the status of a table. Yay!&lt;/p&gt;

&lt;p&gt;Using this method also has similar challenges. The &lt;em&gt;decribe_table()&lt;/em&gt; function uses up an eventually consistent read on your table. So, getting out-of-date data is possible if you are polling something you just created, so give it a second. If you are using a provisioned table in Dynamo, this method will take up one of your reads per second. We will need to make sure this is accounted for when we start designing our database.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The above simple bit of code was a brief spike for a solution we needed to explore. This write-up was inspired by a lot of the help I received from my fellow AWS Community Builders. Checking the health and status of services is one of many things that we will build out using AWS. I am excited to keep up my learning and building. If you have seen or made other stuff to accomplish this type of work, let me know! I would love to learn more.&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Mar 2021 09:00:00 -0500</pubDate>
        <link>https://georgeoffley.com/blog/checking-health-in-s3-and-dynamodb.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/checking-health-in-s3-and-dynamodb.html</guid>
        
        <category>AWS</category>
        
        <category>Python</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Encrypting Your Environment Variables in Lambda with KMS</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;/assets/images/encrypt-lambda-envs.jpg&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#key_management_system_in_aws&quot;&gt;Key Management System in AWS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#customer_master_keys&quot;&gt;Customer Master Keys&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#kms_and_lambda&quot;&gt;KMS and Lambda&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#additional_notes&quot;&gt;Additional Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Do you hate when &lt;a href=&quot;https://youtu.be/tO5sxLapAts&quot;&gt;gnomes steal your underpants&lt;/a&gt; for profit? I know I hate when those guys come out to steal my stuff. Unfortunately, I cannot help you prevent the theft of your undergarments, but I can help you protect some assets in AWS. Specifically, we are going to talk about encrypting environment variables in Lambda.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In a previous article, I talked through about how to create a &lt;a href=&quot;https://georgeoffley.com//aws/go/creating-a-twitter-bot-using-aws-lambda-and-go.html&quot;&gt;Twitterbot using AWS Lambda&lt;/a&gt;. I mentioned that we would talk about encrypting environment variables in my last AWS article, and this is it. Encrypting stuff is a big topic and crucial for maintaining a secure environment and not just in Lambda.&lt;/p&gt;

&lt;p&gt;We all know what encryption is, an ancient method for converting information into a secret code that only the correct parties would have access to. Usually, this is in the form of a key which both parties have access and can use to encrypt and decrypt. Anyone else looking at it would not be able to tell the difference between it and white noise. Records of civilization using encryption go as far back as Egyptians in 1900 B.C. using it to encode messages on the &lt;a href=&quot;http://www.cypher.com.au/crypto_history.htm&quot;&gt;walls of tombs&lt;/a&gt;. Our modern solution for this ancient technique requires us to dive into yet another service that AWS offers, Key Management Services, or KMS.&lt;/p&gt;

&lt;h3 id=&quot;key-management-system-in-aws-&quot;&gt;Key Management System in AWS &lt;a name=&quot;key_management_system_in_aws&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Key Management service, in short, is a service that allows us to manage encryption keys for various AWS services or within your AWS applications. KWS gives you a central repository to easily create, manage, and rotate your encryption keys. If you are wondering, the act of rotating encryption keys is when you generate new keys, re-encrypt all the data using the new keys, and then delete the old keys. It is an essential service in AWS.&lt;/p&gt;

&lt;p&gt;KMS is considered a multi-tenant hardware security module or &lt;a href=&quot;https://en.wikipedia.org/wiki/Hardware_security_module&quot;&gt;HSM&lt;/a&gt;. It’s a blade server sitting on a rack that handles the numerous clients managing keys in AWS every day. The hardware is created in a way that many clients can use the hardware but still be virtually isolated. The keys are stored in memory and not written to disk as a security measure. This way if the hardware is powered down the keys are gone and thus inaccessible.&lt;/p&gt;

&lt;p&gt;AWS does provide a single-tenant solution for enterprise businesses called &lt;a href=&quot;https://aws.amazon.com/cloudhsm/&quot;&gt;CloudHSM&lt;/a&gt;. This gives more control to the client. Now, let’s have a small discussion about the captivating subject of standards in cryptography.&lt;/p&gt;

&lt;p&gt;In 1901 the National Institute of Standards and Technology was founded as a laboratory for promoting innovation and industrial competitiveness for the science and &lt;a href=&quot;https://www.nist.gov/topics/cybersecurity&quot;&gt;technology sector&lt;/a&gt;. Now a part of the U.S. Department of Commerce, these are the folks who set security standards for the stuff we use. In 2002 the E-Government Act was signed into law and then amended in 2014 to include new measures for &lt;a href=&quot;https://csrc.nist.gov/projects/risk-management/detailed-overview&quot;&gt;cybersecurity&lt;/a&gt;. This included several plans to beef up encryption standards, among them is the Federal Information Process Standards or FIPS. This program sets legal requirements for U.S. government systems and the systems for any contractors. The reason I bring all this is up is that KMS in its most basic form is compliant with FIPS 140-2 Level 2 compliant. If a client were to use the single-tenant CloudHSM solution for managing keys, then they comply with FIPS 140-2 Level 3. The different levels break down into levels of security through more aggressive security solutions. You can read about all the levels &lt;a href=&quot;https://en.wikipedia.org/wiki/FIPS_140-2&quot;&gt;here&lt;/a&gt;. A business would only need to worry about having their own CloudHSM if they are trying to comply with a specific regulation. For most of us, a regular KSM solution would work fine.&lt;/p&gt;

&lt;h3 id=&quot;customer-master-keys-&quot;&gt;Customer Master Keys &lt;a name=&quot;customer_master_keys&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Alright, so we know KMS is super cereal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/100J2pbO98XSrm/giphy.gif&quot; alt=&quot;Super Cereal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now how does it work? The primary resources in KMS are the Customer Master Keys or CMKs which are logical representations of the master keys. These master keys are used to encrypt and decrypt our data. They use what is called envelope encryption for securing keys and enabling encryption.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/9gycu8qyv3gfo20e792i.png&quot; alt=&quot;Key Hierarchy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you encrypt your data whatever you encrypted is protected but you also need to protect the encryption keys. Envelope encryption is the practice of encrypting plaintext data with a data key and then encrypting the data key with another key. The data keys are strings of data used to unlock crypto functions like authentication, authorization, and encryption. The role of the master key is to keep the &lt;a href=&quot;https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#enveloping&quot;&gt;data keys safe&lt;/a&gt;. The master keys are what is stored on the HSM and they are used to encrypt all the other keys. The CMKs you make also have metadata attached to them which track key ID, description, creation date, and key state. This metadata also includes the needed material for encryption and decrypting data.&lt;/p&gt;

&lt;p&gt;So, let’s see what we’re talking about.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/hcyg7crmmnwxfuzgj1nv.png&quot; alt=&quot;KMS Dash&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the KMS dashboard where you can check out your keys. On the left, you notice that it defaults to the “Customer managed keys” menu where you can create your keys. There is also the option for AWS Managed Keys. These are keys created by AWS for various services that you use. For myself, I have a key for Lambda which is a default key I can use to encrypt environment variables. And a key for the &lt;a href=&quot;https://aws.amazon.com/cloud9/&quot;&gt;Cloud9 IDE AWS offers&lt;/a&gt;. Cloud9 is an awesome cloud-based IDE where you won’t run into issues with Posix permissions for &lt;a href=&quot;https://twitter.com/cloudbart/status/1291450566879727619&quot;&gt;stuff you make&lt;/a&gt;. Mini-rant over. The last option is for any “Custom key stores” you might have. Clients using AWS CloudHSM would come here to manage the keys they control within their cluster.&lt;/p&gt;

&lt;p&gt;So, let’s create a key&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/x0sv0evsmvjuisdl7p4n.png&quot; alt=&quot;Configure Key&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After we hit the &lt;em&gt;Create Key&lt;/em&gt; button we are taken to the &lt;em&gt;Configure Key&lt;/em&gt; page. Here we can choose which &lt;a href=&quot;https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-choose.html&quot;&gt;type of encryption we want&lt;/a&gt;. Here we have a couple of options, &lt;strong&gt;Symmetric&lt;/strong&gt; and &lt;strong&gt;Asymmetric&lt;/strong&gt; encryption.&lt;/p&gt;

&lt;p&gt;Creating a symmetric key means we are going to create a 256-bit key that uses the same secret key to perform both the encryption and decryption processes. Something like an S4 bucket would be a great candidate for this kind of encryption which uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&quot;&gt;AES-256 encryption standard&lt;/a&gt;. For me, I created a test key for encrypting environment variables using symmetric encryption.&lt;/p&gt;

&lt;p&gt;The other option is &lt;strong&gt;Asymmetric&lt;/strong&gt; encryption also known as public-key encryption. This will create an &lt;a href=&quot;https://en.wikipedia.org/wiki/RSA_(cryptosystem)&quot;&gt;RSA key pair&lt;/a&gt; used for encryption and decryption or it can also be used for signing and verification, but not both. With an asymmetric key, we create a public key used for encryption and a private key used for decryption. This we can create for something like an EC2 key pair for logging in via &lt;a href=&quot;https://docs.aws.amazon.com/crypto/latest/userguide/concepts-algorithms.html&quot;&gt;SSH to an instance&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The advanced options let you use a custom store from a CloudHSM a client might own or import a key from an external key management infrastructure. When importing something from an external key management service AWS lays out some rules about how you can’t use KMS to change the key material and how you assume responsibility for some of the things AWS assumes responsibility for when you use KMS to create keys. More information is &lt;a href=&quot;https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html#importing-keys-considerations&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/msc48jt1kzlw1wvsg1gw.png&quot; alt=&quot;Add Label&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we can add aliases for the keys. We can also add a description. We can also add &lt;a href=&quot;https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html&quot;&gt;tags&lt;/a&gt; that we might have created for tracking these assets through our billing set up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/13i5ix96zyrlqsm85fss.png&quot; alt=&quot;Key Admin Permissions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next screen lets us give out permissions for our key. In a large environment, you can expect to assign this key to the needed administrator. That way only that user has &lt;a href=&quot;https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-administrators&quot;&gt;permissions to administer the key using the KMS API&lt;/a&gt;. Another option you also get is whether to allow admins to delete this key we are making. For any environment, I am making I would probably uncheck this. From my non-cloud sys admin perspective when you have lots of keys distributed around to many different services to have a key deleted for any reason is a recipe for potential nightmare scenarios hunting down where the key was used and redeploying the data since there’s a good chance you’re locked out of getting to it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/1jnascp1p7oxz1dw00fu.png&quot; alt=&quot;Key Usage Perms&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next screen lets us give basic permissions to use the CMK in cryptographic operations. So we can choose who can use this key to encrypt and decrypt assets. You can also add additional accounts here if we need another user that might not be on the list.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/ozwzl8iagix44ni9haoc.png&quot; alt=&quot;Review&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, we can review and make changes to the key policy. AWS creates these rules via a JSON file. So, if you know how to navigate through the fields and understand what you are changing you are free to change the policy as you see fit. I would suggest using the GUI to do anything rather than changing the JSON directly. Unless you know what, it is you are doing. Screw around and find out at your peril.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/fWgwMmkmF8VUZ6iGPb/giphy.gif&quot; alt=&quot;Peril&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;kms-and-lambda-&quot;&gt;KMS and Lambda &lt;a name=&quot;kms_and_lambda&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;O.K. we spent a bunch of time talking about a bunch of nerd stuff. I just wanted to encrypt my environment variables. What is all this? We are almost there I promise.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/b44FwP4st6v3G/giphy.gif&quot; alt=&quot;Peril&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we have a CMK set up let’s go into Lambda. Maybe we go into a new function that we created to test this out. Then we go into the environment variables. Now we can talk a little about how Lambda works and what impacts there are when we encrypt environment variables. Now Lambda is essentially a service that runs a single instance when called. So, no one sees your environment vars other than when a user is in the console. That said if you are sending API requests with keys and secrets anyone who might be listening on the line might be able to see it. Which is why we do all this stuff. So, before we send API secrets to Lambda lets encrypt it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/0ctwn8zocbq8n4uuuwws.png&quot; alt=&quot;Env Var Menu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, when we go to make our envs we have the option of encrypting them. This will encrypt them in transit and on the console too. If you notice I already created a variable and encrypted it. Under the value, there is just a random string of gibberish to the naked eye but with the key, I can decrypt the value and get the test key value. If we add a new variable, we can check the &lt;em&gt;Enable helpers for encryption in transit&lt;/em&gt; under the &lt;em&gt;Encryption configuration&lt;/em&gt; section which brings up the &lt;em&gt;Encrypt&lt;/em&gt; button. In that section, we also get the option of using the default Lambda key that AWS creates or one of the CMKs we made earlier. I mentioned this before, but Lambda has a default key that you can use for encrypting environment variables. Makes it easy to encrypt environment variables without setting up additional CMKs. I chose to use a CMK to demonstrate KMS but using the Lambda key would probably be fine if you only have a few. When you start to scale, and you need keys for tons of stuff is where I would say using CMKs is a good idea. It gives you a lot more options for tracking and auditing.&lt;/p&gt;

&lt;p&gt;After hitting the &lt;em&gt;Encrypt&lt;/em&gt; button we get a pop up which gives us the execution policy in the form of a JSON readout. In addition to that, we get one of my favorite things AWS gives you, the code to access your keys. I’m lazy and I will always appreciate being given the code to decode rather than digging through the API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/1rc2ugwev2g14dcjgoh2.png&quot; alt=&quot;Decrypt Code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, I’m just going through how to decrypt and utilize your keys within your Lambda function. You can do a bit more with the API and I suggest you check out the reference &lt;a href=&quot;https://docs.aws.amazon.com/kms/latest/APIReference/Welcome.html&quot;&gt;here&lt;/a&gt;. Similar to when you’re looking for your unencrypted env variable you can use the &lt;em&gt;os.environ()&lt;/em&gt; function to grab our variable. Accept now we have just a long string of gibberish. Here is where we use the &lt;strong&gt;boto3&lt;/strong&gt; library to do some stuff.&lt;/p&gt;

&lt;p&gt;Boto3 is the &lt;a href=&quot;https://github.com/boto/boto3&quot;&gt;AWS SDK for Python&lt;/a&gt;. Here we look for the &lt;em&gt;kms&lt;/em&gt; service and use the built-in &lt;a href=&quot;https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/kms.html#client&quot;&gt;client class&lt;/a&gt; for accessing the KMS functions. Then you can see we use the &lt;a href=&quot;https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/kms.html#KMS.Client.decrypt&quot;&gt;&lt;em&gt;decrypt()&lt;/em&gt; function&lt;/a&gt; for decrypting the ciphertext we pass into it. The code also imports the &lt;strong&gt;b64decode&lt;/strong&gt; class from the &lt;a href=&quot;https://docs.python.org/3/library/base64.html&quot;&gt;bas64 module&lt;/a&gt; which we use to decode the &lt;em&gt;Encrypted&lt;/em&gt; var we grabbed. After that, we need to set our &lt;em&gt;EncryptionContext&lt;/em&gt; which is a set of non-secret key-value pairs which represent additional authentication data. The options passed in need to match the same context that was used for encrypting the data.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;QuickNote&lt;/em&gt;
You should know that these are for symmetrical CMKs which are called symmetric because they use the same shared key for encryption and decryption. A standard asymmetric key does not support an encryption context. I used symmetric encryption for these keys so that’s what I am going through.&lt;/p&gt;

&lt;p&gt;Finally, we can decode the ciphertext into plaintext using the &lt;em&gt;decode()&lt;/em&gt; method. After all that we have access to our decrypted key using the &lt;em&gt;Decrypted&lt;/em&gt; variable. As mentioned in the pictured code it’s a good idea to put all this somewhere at the beginning outside the function handler. That way we can have universal access to the decrypted key.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;QuickNote&lt;/em&gt;
You might notice that we grab some additional variables using the &lt;em&gt;os.environ()&lt;/em&gt; function. These are built-in in runtime environment variables which we can use to access some metadata from within the Lambda function. Check them out &lt;a href=&quot;https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yay, now we can do stuff with our environment variables like pass them along to API calls. Congrats. Celebrate somehow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/3ornkdtVzQfIRpwfug/giphy.gif&quot; alt=&quot;Please excuse the use of light skinned Aunt Viv&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;So now you know how to &lt;a href=&quot;https://youtu.be/R0IUR4gkPIE&quot;&gt;protect ya neck&lt;/a&gt; and encrypt ya stuff. Now encryption is a big topic. This is just one small sliver that might be relevant to using AWS Lambda. There is a long history related to cryptography. There is this great book called &lt;a href=&quot;https://www.amazon.com/dp/B004IK8PLE/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1&quot;&gt;The Code Book by Simon Singh&lt;/a&gt; which delves deep into the history and most ancient implementations of cryptography. I highly recommend it for the power nerds among us who like reading about cryptography.&lt;/p&gt;

&lt;p&gt;Creating policies that include encrypting your environment variables means better security and peace of mind. Lamba is a powerful engine and I am enjoying using it so far. My &lt;a href=&quot;https://twitter.com/TheTechBruh&quot;&gt;Twittterbot&lt;/a&gt; has been running for weeks and it’s cringy as hell so I think I’m doing something right. Now I have the tools to encrypt my API keys and secrets.&lt;/p&gt;

&lt;h3 id=&quot;additional-notes-&quot;&gt;Additional Notes &lt;a name=&quot;additional_notes&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;One other service that you can also check out is the &lt;a href=&quot;https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html?icmpid=docs_cloudtrail_console&quot;&gt;CloudTrail&lt;/a&gt;. You can use CloudTrail and attach them to CMKs so that they can be audited. Cloud trail can keep logs of access which can be used in audits. Very useful for clients with a lot of assets to manage.&lt;/p&gt;

&lt;p&gt;One other additional note is for those who use the &lt;a href=&quot;https://aws.amazon.com/cli/&quot;&gt;AWS CLI&lt;/a&gt; there are some commands which might come in handy to know. If you are also studying for an AWS Developer certification you will also need to know these.&lt;/p&gt;

&lt;p&gt;Commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aws kms create-key - creates a unique customer-managed CMK in your AWS
aws kms encrypt - encrypts plaintext into ciphertext by using a CMK
aws kms decrypt - decrypts ciphertext that was encrypted by a KMS customer master key
aws kms re-encrypt - decrypts ciphertext and then re-encrypts it with KMS
aws kms enable-key-rotation - enables automatic rotation of the key material for the specified symmetric CMK. This cannot be done on a CML made by another account
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 04 Sep 2020 16:30:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/encrypting-your-envioronment-variables-in-lambda-with-kms.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/encrypting-your-envioronment-variables-in-lambda-with-kms.html</guid>
        
        <category>KMS</category>
        
        <category>AWS</category>
        
        <category>Lambda</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Working with Context in Go</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;/assets/images/working-with-context-in-go.jpg&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#context_interface&quot;&gt;Context Interface&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#context_in_context&quot;&gt;Context in context&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#context_background&quot;&gt;Context.Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#context_todo&quot;&gt;Context.TODO&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#context_withcancel&quot;&gt;Context.WithCancel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#context_withDeadline&quot;&gt;Context.WithDeadline&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#context_withtimeout&quot;&gt;Context.WithTimeout&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#context_withvalue&quot;&gt;Context.WithValue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;When you’re having a breakdown caused by the combination of burnout and existential pain, do you get annoyed that your harried cries into the void go unanswered? Well, I can’t help with that, but I can suggest some methods for timing out calls to external or internal services. I’ve been doing research and playing with some of the standard libraries in Go and one of them I find most useful is the context library. Used to get some control over a system that might be running slowly for whatever reason or to enforce a certain level of quality for service calls this small library is a standard for a reason. For any production level systems to keep good flow control the context library is going to be necessary.
&lt;!--This is a test--&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Created by &lt;a href=&quot;https://twitter.com/Sajma&quot;&gt;Sameer Ajmani&lt;/a&gt; and &lt;a href=&quot;https://vimeo.com/115309491&quot;&gt;introduced in 2014&lt;/a&gt;, the context library become a standard library with Go 1.7. If you have looked through some Go library source code you can find tons of examples &lt;a href=&quot;https://github.com/mongodb/mongo-go-driver/blob/v1.4.0/mongo/client.go#L96&quot;&gt;requiring a context to be passed along&lt;/a&gt;. This is just one I’ve used recently. A &lt;em&gt;context&lt;/em&gt; is a deadline you can pass into a running process in your code. This deadline can indicate to a process to stop running and return after a condition is met. This becomes useful when reaching out to external APIs, databases as shown above, or system commands.&lt;/p&gt;

&lt;p&gt;The following supposes that the reader knows about goroutines and channels and how they work together. I am going to deep dive into concurrency after writing about context as the context library is part of concurrency. For now, though, goroutines are lightweight threads that can be started for processes and channels are the pipelines used to pass data between these new processes.&lt;/p&gt;

&lt;h3 id=&quot;context-interface-&quot;&gt;Context Interface &lt;a name=&quot;context_interface&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The context library defines a new interface called Context. The Context interface has some interesting fields laid out below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/3zgq8cmkrprdfgo66niv.png&quot; alt=&quot;Context Interface&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Deadline&lt;/em&gt; field returns the expected time the work is finished and indicates when the context should be canceled.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Done&lt;/em&gt; field is a channel that is closed when work done for the context should be canceled. This operation can happen asynchronously. The channel can return as nil if the associated context can never be canceled. Different context types will arrange for work to be canceled depending on the circumstances, which we will get into.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Err&lt;/em&gt; will return nil until Done is closed. After which &lt;em&gt;Err&lt;/em&gt; will either return &lt;em&gt;Canceled&lt;/em&gt; if the context was canceled or &lt;em&gt;DealineExceeded&lt;/em&gt; if the context’s deadline has passed.&lt;/p&gt;

&lt;p&gt;The Value field is a key-value interface which will return a value associated with the context as a key or nil if there was no value associated. Values should be used carefully as they are not for passing parameters into a function but for &lt;a href=&quot;https://github.com/golang/go/blob/master/src/context/context.go#L185&quot;&gt;request-scoped data transits processes and API boundaries&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;context-in-context-&quot;&gt;Context in context &lt;a name=&quot;context_in_context&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;When creating a context in Go it is easy to write out a static context to store and reuse. So far as I can tell from my research this is not the optimal way to work with the context library. Context should take the form needed for each use. It should be shapeless, or in the words of &lt;a href=&quot;https://youtu.be/cJMwBwFj5nQ&quot;&gt;Bruce Lee be like water&lt;/a&gt;. Your context should flow through your code and evolve depending on the need.&lt;/p&gt;

&lt;p&gt;There are some exceptions to this. For higher-level processes, you can pass in an empty context when you do not yet have a context in which to pass. These can work as placeholders before being refactored.&lt;/p&gt;

&lt;h3 id=&quot;contextbackground-&quot;&gt;Context.Background &lt;a name=&quot;context_background&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The “Background” function returns an empty non-nil context. There is no associated deadline and no cancelation to speak of. This can be typically used in the main function, for testing, or for creating a top-level context to be made into something else. Looking into the source code you can see that it doesn’t have any logic other than returning an &lt;a href=&quot;https://github.com/golang/go/blob/master/src/context/context.go#L208&quot;&gt;empty context&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/8g9hh8bxgsybws10ftld.png&quot; alt=&quot;Context Background&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;QuickNote:&lt;/em&gt;
Typically, the context is named &lt;em&gt;ctx&lt;/em&gt; when it is declared. I’ve seen this in most implementations of context so if you come across &lt;em&gt;ctx&lt;/em&gt; in random spots in source code there’s a good chance that it is referring to a context.&lt;/p&gt;

&lt;h3 id=&quot;contexttodo-&quot;&gt;Context.TODO &lt;a name=&quot;context_todo&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;TODO&lt;/em&gt; function does the same thing. It returns an empty non-nil context. This again is a use case for higher-level functions that may not yet have a function available to use them. In many cases, this would be used as a placeholder when extending your program to use the context library. If you checked out the talk by Sameer Ajmani about the introduction of the context library while refactoring their code at Google they would use the &lt;em&gt;context.TODO&lt;/em&gt; to start introducing context into the Google code base without breaking anything.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;QuickNote:&lt;/em&gt;
One thing I will also mention is that somewhere along the way it was suggested that the &lt;em&gt;TODO&lt;/em&gt; would be compatible for use in static analysis tools for seeing context propagation across a program. This from what I can tell might have been an off-hand comment from the person who wrote out the notes in the source code. I’ve been looking for the last couple of days and &lt;a href=&quot;https://go-review.googlesource.com/c/go/+/130876/&quot;&gt;from what I can tell no such tool yet exists&lt;/a&gt;. I would investigate how to create such a tool but I’m going to go watch a movie instead.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/iu484psunf8fgrlgqwe8.png&quot; alt=&quot;Context.TODO&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;contextwithcancel-&quot;&gt;Context.WithCancel &lt;a name=&quot;context_withcancel&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Let’s say I’m building a website to review movies. There is a myriad of APIs designed for serving movie information. One of the recent ones I’ve come across is the &lt;a href=&quot;https://ghibliapi.herokuapp.com/#section/Studio-Ghibli-API&quot;&gt;Studio Ghibli API&lt;/a&gt; which is a public API we can just grab stuff from. So, for the special section of the website for Studio Ghibli movies, we’ll use this. The &lt;em&gt;WithCancel&lt;/em&gt; function returns a copy of the parent context passed into it with a new &lt;em&gt;Done&lt;/em&gt; channel. The new &lt;em&gt;Done&lt;/em&gt; channel is closed either when the cancel function is called or when the parent context’s &lt;em&gt;Done&lt;/em&gt; channel is closed. Whichever event happens first.&lt;/p&gt;

&lt;p&gt;Below is an example in action:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/vk990lim7irgfmgqjm4w.png&quot; alt=&quot;Context.WithCancel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we are going to simulate a process that is hanging up using the &lt;em&gt;longRunningProcess&lt;/em&gt; function. In this example, the function is screwing up but we must run it before we request the JSON data from the API. The “longRunningProcess* function will return an error that will cause the &lt;em&gt;cancel()&lt;/em&gt; function within the context to fire.&lt;/p&gt;

&lt;p&gt;For the &lt;em&gt;ghibliReq&lt;/em&gt; function we will set up a simple HTTP request using the API and pass a string for locating stuff from the API. Once we set up the request, we have a case statement which will receive channel data. Depending on what happens first the select statement will be sent either the current time or the “Done” channel from the passed in context. If the &lt;em&gt;Done&lt;/em&gt; channel is closed we error out, if not we will return the status code from our request.&lt;/p&gt;

&lt;p&gt;Our main code starts with setting up the context with a new &lt;em&gt;Background()&lt;/em&gt; context which is then passed into a &lt;em&gt;WithCancel()&lt;/em&gt; context. The new &lt;em&gt;ctx&lt;/em&gt; was passed in an empty context so nothing has happened yet. We then create a new goroutine to create a new thread and call our &lt;em&gt;longRunningProcess&lt;/em&gt;. Once that is called we check for errors, which will return since we engineered it that way, and if there are errors we can call the &lt;em&gt;cancel()&lt;/em&gt; function in our context. Finally, we use our context to call our request. After we run this we find that the request errored out since it took too long and the &lt;em&gt;cancel()&lt;/em&gt; function was called.&lt;/p&gt;

&lt;p&gt;In this example, we are running our &lt;em&gt;longRunningProcess&lt;/em&gt; before our request because that is needed before we call our request. If the function errors out we need to be able to call “cancel()” so that we can error out the &lt;em&gt;ghibliReq()&lt;/em&gt; function. The way we set it up we are calling &lt;em&gt;cancel&lt;/em&gt; for our context before the function has a chance to run. This is intentional to show how the cancel works. We could easily change the &lt;em&gt;time.Sleep()&lt;/em&gt; in &lt;em&gt;longRunningProcess&lt;/em&gt; to say 1000 milliseconds and our request function will run before &lt;em&gt;cancel()&lt;/em&gt; is called but in a production environment if the goal is to make sure we maintain the flow of the call stack we would make sure we’re not returning errors and not calling &lt;em&gt;cancel()&lt;/em&gt; for this context.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;QuickNote:&lt;/em&gt;
Keep in mind that a context-specific call shouldn’t be a blocking action unless necessary. It’s all about keeping stuff running.&lt;/p&gt;

&lt;h3 id=&quot;contextwithdeadline-&quot;&gt;Context.WithDeadline &lt;a name=&quot;context_withDeadline&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;WithDeadline&lt;/em&gt; function requires two arguments. One is the parent context and the other is a new time object. The function will take the parent context and adjust it to meet the new time object which was passed in. There are a couple of caveats. If you pass in a context that is already earlier than the passed in the time object then the source code will pass just return a &lt;em&gt;WithCancel&lt;/em&gt; context with the same cancellation requirements as the parent which you can see &lt;a href=&quot;https://github.com/golang/go/blob/master/src/context/context.go#L430&quot;&gt;in the source&lt;/a&gt;. The &lt;em&gt;Done&lt;/em&gt; channel is closed after the new deadline expires. You can also manually return the &lt;em&gt;cancel&lt;/em&gt; function or it will close when the parent context’s &lt;em&gt;Done&lt;/em&gt; channel is closed. Whichever of those events happens first.&lt;/p&gt;

&lt;p&gt;Below we can go through how the &lt;em&gt;WithDeadline&lt;/em&gt; works:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/nwwcwgh95cejnb5kjdsh.png&quot; alt=&quot;Context.WithDeadline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’re going to continue with the idea that we are putting together a movie review site. To be honest it would not be far off character of me to start a website dedicated to talking exclusively about Studio Ghibli movies. The example above is doing something like the &lt;em&gt;withCancel&lt;/em&gt; example. We are going to reuse a function to demonstrate our context. Reuse the stuff that works, save yourself some time. We are going to make a request and return the status of said request. The difference is how we handle our context.&lt;/p&gt;

&lt;p&gt;Hypothetically, we need to create a whole bunch of these cascading requests and we want to make sure that everything is happening on time throughout the call stack. To keep track of time and gracefully error out when needed we can continue to use the deadlines and augment the time for the additional calls. In our example, we create a &lt;em&gt;Background&lt;/em&gt; context, then pass that in along with a new time. Now we get a returned context in our &lt;em&gt;ctx&lt;/em&gt; variable for about 1 second. In our example, if the request process takes longer than 1 second our context calls the cancel function and closes the &lt;em&gt;Done&lt;/em&gt; channel causing the request to error out.&lt;/p&gt;

&lt;p&gt;We can see that this is dependent on the standards that we set. Setting a time implies that you have a decent idea about how long something should take. Which can be dependent on your server availability, internet connection, hardware constraints, etc. I have also seen people grumble about certain service level agreements guaranteeing the return of assets within a certain time frame. With the aim of usability in mind using context, deadlines can help to ensure that we can pull information at a reasonable amount of time and return if not.&lt;/p&gt;

&lt;h3 id=&quot;contextwithtimeout-&quot;&gt;Context.WithTimeout &lt;a name=&quot;context_withtimeout&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The next relevant function is the &lt;em&gt;WithTimeout&lt;/em&gt; function. This is a slight variation from the &lt;em&gt;WithDeadline&lt;/em&gt; function. With a need to make something original in mind the &lt;em&gt;WithTimeout&lt;/em&gt; simply returns a &lt;em&gt;WithDeadline&lt;/em&gt; context with the time argument passed in added to the deadline. In other words, it acts similar to the &lt;em&gt;WithDeadline&lt;/em&gt; in that it will take the parent and augment the time to return a derived context with the new time added to the time before the &lt;em&gt;cancel&lt;/em&gt; function is called and the &lt;em&gt;Done&lt;/em&gt; channel is closed. I’ll make this example even simpler:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/dcw4vhshlsephh1c19na.png&quot; alt=&quot;Context.WithTimeout&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Same as the example before we set the timeout to close the “Done” channel after the allotted time. In our case, if after a half-second, we’re still waiting for the call we timeout. I love the HTTP go library because it has a built-in function for returning a shadow copy of the request with the &lt;a href=&quot;https://golang.org/src/net/http/request.go?s=12980:13039#L341&quot;&gt;new context added&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;contextwithvalue-&quot;&gt;Context.WithValue &lt;a name=&quot;context_withvalue&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The last bit of the source I am going to touch on is the &lt;em&gt;ContextWithValue&lt;/em&gt; function. This one is a bit controversial since the nature of it, from what I can tell, goes against what the context should be. A context should be a way to ensure that we keep data flowing to and from our programs. The value part of the context though can be used to carry information back and forth. The function allows you to pass in a key-value interface to pass around with your calls.&lt;/p&gt;

&lt;p&gt;From the original post about context &lt;a href=&quot;https://blog.golang.org/context&quot;&gt;“WithValue provides a way to associate request-scoped values with a context”&lt;/a&gt;. I’m going to talk a little about what it shouldn’t be used for. Most articles or tutorials I came across seem to agree that passing information that lives outside of the request itself was a bad idea. DB connections, function arguments, anything that is not created and destroyed within that request is probably not a great design pattern. That said passing values along your context can be useful.&lt;/p&gt;

&lt;p&gt;Let’s check out some code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/i/nrbebpw31tc4nmwjj285.png&quot; alt=&quot;Context.WithValue&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’re going to use the same code from the last example. Only in this case, we are going to create a new function which will calculate a fake request ID. Say I want to keep a database of all my requests, because… I don’t know, I’m a psychopath. Or I work for the NSA and I’m making some spyware to look in on my ex in the name of national security. And because they don’t train me in operational intelligence, I don’t know how to discern the data that indicates something and white noise, so I collect everything. Even innocuous calls to an open API for looking up animated movie information. I’m very tired right now.&lt;/p&gt;

&lt;p&gt;In our example we do the same as above; set up a context with a timeout for half a second. Only now we have a helper method that will calculate a new request ID and we will use the context to pass that ID along within the context as a new interface that we can access and do stuff with. In this fake scenario, we would log this and close out the context. This will conform to our self-imposed standard of keeping only information relevant to that call. Yay information!&lt;/p&gt;

&lt;p&gt;There is a lot more to be explored about passing along values within a context. I have seen articles where middleware is used to do stuff in between two services to make something work better. I might dig deeper into this and since it’s a bit outside the scope of this I might write about it later. Who knows, I need sleep.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The context library helps to add some sanity to calls in our program. When designing a program incorporating a context in our functions should happen as early as possible. As mentioned, before it is easy to create our function with a &lt;em&gt;TODO&lt;/em&gt; as a placeholder and go back when refactoring. It was also mentioned that programs should be created to fail gracefully as well. Take it from someone who spent a long time creating vague fail messages which no one can understand including me. A user should not have to know that a call to something failed just that they aren’t getting their movie title in half a second.&lt;/p&gt;

&lt;p&gt;A cool way to picture how useful these contexts can be was touched on in Sameer’s talk. He spoke about the practice of hedged calls where you call out redundant services and take the one which takes less time. It’s all about speed and optimization with them Google people. That is one way in which creating a context to flow through your program would be helpful. When one comes back you cancel out the other which releases the resources that thread might have been using up. The context is a small but very powerful library, it should be used often and with plenty of thought and planning into how it should flow into your program. My hope after reading this is that we all come away with a better understanding of context and how we can use it! If you liked this, had questions and or comments, or you just want to berate me on how much the Last Jedi sucked (it was an imperfect but powerful movie for a world not yet ready for it) hit me up on &lt;a href=&quot;https://twitter.com/georgeoffley&quot;&gt;Twitter&lt;/a&gt;! I love topical references.&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Aug 2020 21:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/working-with-context-in-go.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/working-with-context-in-go.html</guid>
        
        <category>concurrency</category>
        
        <category>Go</category>
        
        
        <category>Blog</category>
        
      </item>
    
  </channel>
</rss>
