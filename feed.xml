<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>I make great projects using Python, C#, PHP, and JavaScript. Currently learning about AWS, Go, C++, and the graphics pipeline. I also love writing and well made movies. Check out my blog and my twitter to contact me!</description>
    <link>https://georgeoffley.com/</link>
    <atom:link href="https://georgeoffley.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 02 Apr 2022 10:22:35 -0400</pubDate>
    <lastBuildDate>Sat, 02 Apr 2022 10:22:35 -0400</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>Spiking Tailwind CSS in a React APP</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-02-spiking-tailwind-in-a-react-app/cover.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tailwind&quot;&gt;Tailwind&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-tailwind-in-react&quot;&gt;Using Tailwind in React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#something-a-little-more&quot;&gt;Something a Little More&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;It’s been some time since I did any frontend development, and I don’t miss it. After a couple of years of learning the fundamentals, I would have loved to have some alternatives to manually writing CSS.&lt;/p&gt;

&lt;p&gt;Now that I am diving back into it, I am happy there are tools not to replace but improve the CSS experience. In that spirit, I want to look at &lt;a href=&quot;https://tailwindcss.com/&quot;&gt;Tailwind CSS&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;tailwind-css-&quot;&gt;Tailwind CSS &lt;a name=&quot;tailwind&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Tailwind is different from other CSS frameworks I’ve tried. The software works on a lower level to allow easy CSS styling utilizing class names. Bootstrap works similarly, but the difference is that Tailwind does not come with predefined components. It is also different because the class names are compiled into CSS code.&lt;/p&gt;

&lt;p&gt;Tailwind is also not opinionated about how you make your designs, and thus they give you the tools you need and let you create unique components. It’s the difference between &lt;a href=&quot;https://www.timberland.com/shop/CategoryDisplay?catalogId=10101&amp;amp;langId=-1&amp;amp;categoryId=13502&amp;amp;storeId=7101&amp;amp;productId=p_20355&amp;amp;audience=men&amp;amp;page=configure&quot;&gt;designing boots on a website&lt;/a&gt; and having all the materials right before you to cobble together your shoes. This alone is valuable because you can avoid falling into the &lt;a href=&quot;https://www.dagusa.com/&quot;&gt;Bootstrap design trap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tailwind is a &lt;a href=&quot;https://tailwindcss.com/docs/utility-first&quot;&gt;“utility-first CSS Library,”&lt;/a&gt; From what I glean from their site, it means they tried to create a framework from a set of constrained utilities. This seems to translate into the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There are no more CSS class names to create in both HTML and CSS files as styles are implemented using low-level utility classes.&lt;/li&gt;
  &lt;li&gt;You add the styles you want into the HTML classes, which the compiler uses to generate CSS (which is attractive to me).&lt;/li&gt;
  &lt;li&gt;Your CSS files don’t grow since you’re generally not creating new styles.&lt;/li&gt;
  &lt;li&gt;The ability to create reusable styles using things like &lt;a href=&quot;https://tailwindcss.com/docs/reusing-styles#loops&quot;&gt;loops&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tailwind also gives you ways to easily extend their utilities by utilizing config files for adding things like custom colors, fonts, etc.&lt;/p&gt;

&lt;p&gt;I’ve noticed that they seem to lean into the idea of long strings of class names in HTML over regular CSS. You’ll see what I mean.&lt;/p&gt;

&lt;h3 id=&quot;setup-&quot;&gt;Setup &lt;a name=&quot;setup&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;So to try this and to learn the tech better for use in my work, I created a quick React application.&lt;/p&gt;

&lt;p&gt;After the React app creation, we can run the below commands.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tailwindcss
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will install the needed packages.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npx tailwindcss init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above command will create the config files we need, the &lt;code class=&quot;highlighter-rouge&quot;&gt;tailwind.config.js&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;postcss.config.js&lt;/code&gt; files. The &lt;code class=&quot;highlighter-rouge&quot;&gt;tailwind.config.js&lt;/code&gt; is where any customization options will go. By default, Tailwind looks for this file at the root of a project to create any customizations. For example, if you want to add colors or fonts that Tailwind does not have built-in, they will go in that config file.&lt;/p&gt;

&lt;p&gt;After that is installed, you replace everything in your &lt;code class=&quot;highlighter-rouge&quot;&gt;index.css&lt;/code&gt; file with the below lines.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@tailwind&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@tailwind&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@tailwind&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utilities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finally, to ensure that all the template files are added to the Tailwind config, make sure the &lt;code class=&quot;highlighter-rouge&quot;&gt;tailwind.config.js&lt;/code&gt; file looks like the below code.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./src/**/*.{html,js}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s a bit much, but that’s essentially it. You’re now ready to start styling stuff.&lt;/p&gt;

&lt;h3 id=&quot;using-tailwind-in-react-&quot;&gt;Using Tailwind in React &lt;a name=&quot;using-tailwind-in-react&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;After setting up our React project and installing Tailwind, I was ready to go. So I got rid of all the startup React stuff and started small.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;I'm using Tailwind!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pretty easy, and we get a simple heading tag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-02-spiking-tailwind-in-a-react-app/h1_no_style.png&quot; alt=&quot;H1 Tag with no style&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s start small and add some styling.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text-red-700 text-6xl hover:text-9xl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;I'm using Tailwind!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now I added a couple of styling classes to the JSX, and just like we were editing a CSS file, we got some results.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-02-spiking-tailwind-in-a-react-app/h1_style_no_hover.png&quot; alt=&quot;H1 tag with some basic styles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You may also notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;hover&lt;/code&gt; selector in there. Tailwind takes care of these, similar to how CSS does. You prepend the effect you want and the outcome, and it works just the same.And we can see the style change a little when we hover over the text.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-02-spiking-tailwind-in-a-react-app/h1_style_hover.png&quot; alt=&quot;Hover effect&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Adding these class names saved me from opening up VSCode and adding styles to a CSS file. I am already sold on Tailwind.&lt;/p&gt;

&lt;p&gt;You can also see the core use of Tailwind in adding class names to the HTML tags. This is a small example, but tags can have tons of styles, so adding a class name into the HTML can get overwhelming quickly. This is the language they lean into that I mentioned above.&lt;/p&gt;

&lt;h3 id=&quot;something-a-little-more-&quot;&gt;Something a Little More &lt;a name=&quot;something-a-little-more&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I am not a designer, but I find this setup easy to create components. So let’s say I broke my app into pieces. How can I style this card component I made? Tailwind makes it simple.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;p-20 bg-green-100&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h3&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;text-green-300 mb-4 text-sm font-bold&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cool&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Tailwind&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Stuff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;border-4 border-green-800 bg-white p-6 rounded-lg shadow-lg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;text-2xl font-bold mb-2 text-gray-800&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Look&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;text-gray-700&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;We&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;did&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Tailwind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the results.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-04-02-spiking-tailwind-in-a-react-app/card_styles.png&quot; alt=&quot;Basic card with styles&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I didn’t have to write a single bit of CSS for this, and now I have a perfectly usable component. There’s no ending to this rabbit hole. Design all you want.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I can’t bring myself to write CSS. It’s a doomed relationship; with too much bad blood and too much history. However, I might just get through with Tailwind as a buffer for those awkward times I have to sit with it.&lt;/p&gt;

&lt;p&gt;Hyperbole aside, Tailwind is not a replacement for CSS but a fantastic addition to CSS for easily styling web components. Coupled with React, this was how we were meant to make apps. I’m excited to continue learning and hope this helped.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Small disclaimer&lt;/strong&gt;: I am not suggesting anyone reading this who might be new to frontend development jump straight into learning Tailwind. That journey starts with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps/How_CSS_works&quot;&gt;learning how CSS works&lt;/a&gt;. Much like filmmaking, learn all the fundamentals first and then break the rules at your leisure.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Apr 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/spiking-tailwind-in-a-react-app.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/spiking-tailwind-in-a-react-app.html</guid>
        
        <category>React</category>
        
        <category>Tailwind</category>
        
        <category>JavaScript</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Using SWR for Easy API Calls in React</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-25-using-swr-for-easy-api-calls-in-react/cover.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#swr&quot;&gt;SWR&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;React gives us the ability to create powerful and scalable apps. We need to quickly implement API calls to get our data displayed in our App for them to run. That’s where &lt;a href=&quot;https://swr.vercel.app/&quot;&gt;SWR&lt;/a&gt; comes in handy.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;swr-&quot;&gt;SWR &lt;a name=&quot;swr&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;My company embarked on a journey to create a new app for stakeholders. This included React for the frontend. Since then, I’ve been working on some React side projects to reinforce my learning from work. I struggled to use some built-in hooks to no avail. Then came SWR, which was mentioned as a way to do API calls in our work app. After integrating SWR into one of my side projects, I am sold.&lt;/p&gt;

&lt;p&gt;SWR is a react library used for easily fetching information from an API endpoint. SWR stands for “stale while revalidate.” According to their site, they derive the name from the practice of invalidating the cache. They use the cache to return data then send the fetch request to get up-to-date data. This makes sense seeing how the library seems to fetch data without user intervention.&lt;/p&gt;

&lt;p&gt;I was impressed seeing what is essentially a stream of data on my app as the data seamlessly updating when adding data. Plus, it’s lightweight and easy to implement. It also boasts some features over the built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; hook as it also passes in errors for better exception handling and a more seamless experience maintaining the code.&lt;/p&gt;

&lt;h3 id=&quot;example-&quot;&gt;Example &lt;a name=&quot;example&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I’ll take us through how I implementedSWR it into my app. I already have a  React app, and I ran the install for SWR detailed below.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;swr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once that finished installing, I went to work. The first thing was to import the &lt;code class=&quot;highlighter-rouge&quot;&gt;useSWR&lt;/code&gt; function into one of the components.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-25-using-swr-for-easy-api-calls-in-react/import.png&quot; alt=&quot;Example import statement&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next was a simple fetcher function, taken right out of their docs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-25-using-swr-for-easy-api-calls-in-react/fetcher.png&quot; alt=&quot;Create fetcher function&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some notes about the fetcher. SWR takes in any fetcher object you want to pass to it. You can utilize libraries like &lt;a href=&quot;https://github.com/developit/unfetch&quot;&gt;unfetch&lt;/a&gt;, &lt;a href=&quot;https://axios-http.com/docs/intro&quot;&gt;Axios&lt;/a&gt;, or &lt;a href=&quot;https://graphql.org/&quot;&gt;GraphQL&lt;/a&gt;. I used the native fetch as I don’t have any unique logic running, and I am only returning simple JSON objects. So I configure it to use JSON for returning the data.&lt;/p&gt;

&lt;p&gt;SWR has three states for the data returned, &lt;code class=&quot;highlighter-rouge&quot;&gt;Loading&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Ready&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Error&lt;/code&gt;. These states can be used for exception handling or creating logic for loading behavior.&lt;/p&gt;

&lt;p&gt;The last thing we want to do is use the &lt;code class=&quot;highlighter-rouge&quot;&gt;useSWR&lt;/code&gt; function we imported to grab our file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-25-using-swr-for-easy-api-calls-in-react/useSWR.png&quot; alt=&quot;useSWR example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are a couple of things of note within this call. First, we’re passing in the fetcher function we created earlier and the API endpoint. Secondly, we set the results as an array with &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt; since we get back error data if we error out and want to store the message. Our returned data will go into the data variable.&lt;/p&gt;

&lt;p&gt;That’s easy. React treats the return values as an object. The data can be accessed using a &lt;code class=&quot;highlighter-rouge&quot;&gt;map()&lt;/code&gt; function and the  &lt;code class=&quot;highlighter-rouge&quot;&gt;data.&amp;lt;tag&amp;gt;&lt;/code&gt; syntax.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-25-using-swr-for-easy-api-calls-in-react/data.png&quot; alt=&quot;Data object named access&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;Conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;After some &lt;a href=&quot;https://twitter.com/georgeoffley/status/1497606201831567360?s=20&amp;amp;t=euyltPybu9OOs5SPdChQOQ&quot;&gt;documented time experimenting&lt;/a&gt;, I was resigned to React’s perceived complexity. However, as I build out more and more small accomplishments, I realized React is like anything else; it takes practice and the right tools. SWR is something I’m putting into my React utility belt. I hope this helps someone who might be struggling.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Mar 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/using-swr-for-easy-api-calls-in-react.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/using-swr-for-easy-api-calls-in-react.html</guid>
        
        <category>React</category>
        
        <category>JavaScript</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Table Resource VS Client in AWS</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-19-table-resource-vs-client-in-aws/cover.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the_problem&quot;&gt;The Problem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the_answer&quot;&gt;The Answer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;The Answer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;DynamoDB provides an excellent way to store data in a flexible and scalable way. Add it to Lambda and API Gateway, and you have a powerful group of tools, &lt;a href=&quot;https://georgeoffley.com/blog/using-api-gateway-with-lambda.html&quot;&gt;which I have written about&lt;/a&gt;. It was for these reasons that I chose to use it for a side project I am building to familiarize myself with React. It was in these features that I struggled with an issue in how &lt;a href=&quot;https://github.com/boto/boto3&quot;&gt;boto3&lt;/a&gt;, the SDK for talking with AWS in Python, implements their libraries.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;the-problem-&quot;&gt;The Problem &lt;a name=&quot;the_problem&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I have a personal rule; if it takes a certain amount of time to debug an issue, then there is something about the underlying technology that I do not understand. As it happens, I spent some time trying to get the APIs to work correctly in my side app recently. The problem boiled down to how my return data from the API was displayed in the application. It confounded me for some time. So I stepped back and challenged my assumptions about the tech. I followed the rabbit hole back to the API I wrote, where I found the problem.&lt;/p&gt;

&lt;p&gt;It turned out the problem was in using the &lt;a href=&quot;https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#client&quot;&gt;Client class&lt;/a&gt; in boto3. From their docs, Amazon calls the Client class a “low-level client representing Amazon DynamoDB.” So this made sense when I started seeing how the API would interact with my app.&lt;/p&gt;

&lt;p&gt;When making a call to the API, the JSON returned would have all these extra tags on them. Below is an example.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-19-table-resource-vs-client-in-aws/client_resp.png&quot; alt=&quot;client_resp.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It seems that DynamoDB was tagging the data types, as string types would have the type “S” for string values and “N” for number values. It made little sense to me. There are possible solutions available in the library that will help &lt;a href=&quot;https://towardsaws.com/making-use-of-boto3-out-of-the-box-dynamodb-serializers-1dffbc7deafe&quot;&gt;unmarshal the data and clean it up a little&lt;/a&gt;, but these tools are &lt;a href=&quot;https://github.com/boto/boto3/blob/e353ecc219497438b955781988ce7f5cf7efae25/boto3/dynamodb/types.py#L233&quot;&gt;buried in the source code for boto3&lt;/a&gt; and don’t seem to have official documentation. There’s a &lt;a href=&quot;https://github.com/boto/boto3/issues/1630&quot;&gt;yet unresolved GitHub issue about it&lt;/a&gt;. So I had to look deeper for a solution.&lt;/p&gt;

&lt;h3 id=&quot;the-answer-&quot;&gt;The Answer &lt;a name=&quot;the_answer&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;After a while of searching through the AWS docs and trying various solutions, I was able to come up with a fix. I rewrote my API to grab all the records using the &lt;a href=&quot;https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#table&quot;&gt;Table&lt;/a&gt; class rather than the Client class.&lt;/p&gt;

&lt;p&gt;It turns out that the Client class works precisely like a low-level abstraction should, returning all the stuff that’s stashed into DynamoDB data tags and all. Not very reader-friendly.&lt;/p&gt;

&lt;p&gt;Here you can see what the code looks like using the Client class.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-19-table-resource-vs-client-in-aws/client_code.png&quot; alt=&quot;client_code.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here is the updated code for the Table resource.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-19-table-resource-vs-client-in-aws/table_code.png&quot; alt=&quot;table_code.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Very little in the logic changed. We are still creating a connection to AWS using a Lambda function. We are still returning the response to that function.&lt;/p&gt;

&lt;p&gt;There are, however, a couple of differences. We call the Table resource a little differently from the client, and I added some pagination to the table code. As boto3 will only return everything up to 1 MB, you need to put in pagination to get all your results.&lt;/p&gt;

&lt;p&gt;Making that change makes the API returns a cleaner response.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-19-table-resource-vs-client-in-aws/table_resp.png&quot; alt=&quot;table_resp.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No data tags and no messy nesting in our API data anymore.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I like challenging my assumptions. Being outside my comfort zone is how I learn best. I’ve been making small scripts similar to that using the Client class for a while now, so it was good to understand the limitations in the tool and the tradeoffs using others. How this discomfort shakes out in the React app remains to be seen, but I am sure I’ll figure those problems out too. I hope this helps someone.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Mar 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/table-resource-vs-client-in-aws.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/table-resource-vs-client-in-aws.html</guid>
        
        <category>AWS</category>
        
        <category>Lambda</category>
        
        <category>Intermediate</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Modules in React</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/cover.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#react-modules&quot;&gt;React Modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#in-app-example&quot;&gt;In-App Example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#named-v-default&quot;&gt;Named Imports vs. Default Imports&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The organization of your apps is one of the most effortless quality of life improvements you can make. Recently I’ve been deep-diving into React for a work project, and I was able to get a crash course in how you organize one such app. Including how React treats its files and how we’re importing them. So today, I’d like to get into how React handles modules and how importing is done.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;react-modules-&quot;&gt;React Modules &lt;a name=&quot;react-modules&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://reactjs.org/docs/faq-structure.html#is-there-a-recommended-way-to-structure-react-projects&quot;&gt;React has no opinions on how you organize your code&lt;/a&gt;. This is fine as engineers usually have plenty of views on this, and the subject matter expert we’re working with was no exception. After talking it through, we decided to organize our app where each feature was organized into its own directory. This also gives us a choice to utilize &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; files to handle exports.&lt;/p&gt;

&lt;p&gt;The most straightforward analogy coming from Python was that React lets you put your files into a directory and then create an &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; file that exports everything. This is similar to how Python will utilize an &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; file to export everything into the main logic files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/react_modules.jpeg&quot; alt=&quot;React Modules diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So if I have one or more modules I need to import into the &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; file for a feature, I can utilize the &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; file to import all of them and serve as one export point for your &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; or wherever you are utilizing said feature.&lt;/p&gt;

&lt;h3 id=&quot;in-app-example-&quot;&gt;In-App Example &lt;a name=&quot;in-app-example&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Let’s go through a quick example. I created a small React application to demonstrate what I am talking about. I organized it as such.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Src
    &lt;ul&gt;
      &lt;li&gt;App Feature
        &lt;ul&gt;
          &lt;li&gt;Hello.js&lt;/li&gt;
          &lt;li&gt;Worlds.js&lt;/li&gt;
          &lt;li&gt;Index.js&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;App.js&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I created a directory named AppFeature to hold the modules I want to organize under there. The Hello and World modules look similar; they are only components that render a new div tag with some words. See the code below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/hello.png&quot; alt=&quot;hello.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/world.png&quot; alt=&quot;world.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The AppFeature directory will have an &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; file that will handle exporting. This file will be used as a “central hub” where we can export all our modules into different parts of the application. You can see the code below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/indexjs.png&quot; alt=&quot;indexjs.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the code above I put in two export statements. From here is where our modules will be exported from. This makes for cleaner imports into our &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; file. As seen below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/appjs.png&quot; alt=&quot;appjs.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the top, you can see a clean import statement where we import a list of modules from the AppFeature directory. After that, we can apply them right into our application. It comes out looking like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/app_page.png&quot; alt=&quot;app_page.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;named-imports-vs-default-imports-&quot;&gt;Named Imports vs. Default Imports &lt;a name=&quot;named-v-default&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The above example details what are referred to as Named Imports, but that is not the only way to handle exporting and importing. There are other ways to export/import your needed modules. For example, suppose we are building components with multiple modules that do not need to be imported into the main application files. In that case, we can organize them so our main module can import all it needs and serve as the main component or class module to be exported. As demonstrated below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/defualt_hello_world.png&quot; alt=&quot;defaulthelloworld.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/default_indexjs.png&quot; alt=&quot;default_index.js&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-18-modules-in-react/default_appjs.png&quot; alt=&quot;default_app.js&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we organize our code such that we want to keep internal modules internal, we can explore this type of organization. Using Default Imports, we’re still doing the same thing: we use our &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; file to handle our exports. The difference is that we’re organizing everything into one module and only exporting that one module. This makes everything even cleaner.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;One of the goals for the application we are building is to optimize our workflow. Organizing your code by utilizing modules in React is just one way in which we are meeting that goal. There are many things to consider, but I believe we are headed in the right direction. I hope this helps someone looking to organize their React projects.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Mar 2022 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/modules-in-react.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/modules-in-react.html</guid>
        
        <category>React</category>
        
        <category>Newbie</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Implementing Routing in React</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-12-implementing-routing-in-react/cover.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#react_router_dom&quot;&gt;React Router Dom&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#explainer&quot;&gt;Explainer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Implementing routing in React applications can be one of the first tasks you undertake in the coding part of the development lifecycle. This was true for my team when we sat down to a mob programming session to go through a couple of our stories for a project. We brought in some help from people who know React to help us get started. I am not a React developer, so this is the first time I had actual exposure to people with expertise, so I am grateful it was a group programming session. I don’t know what I was doing when the rest of the world learned React, but I can only guess it had something to do with playing the Sims. Regardless I use the right tool for the job, and I need to learn it now. The first thing we did was implement some routing, and I will implement a much more simplified version of what we did below to show what I learned.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;react-router-dom-&quot;&gt;React Router Dom &lt;a name=&quot;react_router_dom&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I understand React is a set of APIs and libraries used in different ways to implement cool stuff on your screen. We got more into using TypeScript on top of React, but I like to write about things even if I only have a cursory knowledge of them, and my understanding of TypeScript doesn’t even measure up to that. So I’ll stick with React only for now.&lt;/p&gt;

&lt;p&gt;Routing in a React app is what the app does when a user goes to a specific URL. As we’re dealing with React, we need to create components that make up our pages, and we’ll use a library to route to those components. In our case, we used the ever-popular &lt;a href=&quot;https://reactrouter.com/&quot;&gt;React Router Dom&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;setup-&quot;&gt;Setup &lt;a name=&quot;setup&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;An easy bit of setup. I created a new app using &lt;code class=&quot;highlighter-rouge&quot;&gt;npx create-react-app react-router&lt;/code&gt;, which gave me a basic app. I then ran &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install react-router-dom&lt;/code&gt; to install the needed package. Then I was off to the races.&lt;/p&gt;

&lt;p&gt;I created two simple page components to then import into my main App.js.&lt;/p&gt;

&lt;p&gt;The Home component.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-12-implementing-routing-in-react/home.png&quot; alt=&quot;Home component&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the About component.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-12-implementing-routing-in-react/about.png&quot; alt=&quot;About component&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, I went through some of the docs and found an easy way to get basic routing. All of which is reflected in my main App.js file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-12-implementing-routing-in-react/app.png&quot; alt=&quot;App.js file&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;explainer-&quot;&gt;Explainer &lt;a name=&quot;explainer&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This needs explaining. I created a basic component for the home and the about pages. Both of them just return a header with the name in the tag. I imported them into app.js and imported BrowserRouter, Routes, and Route from the React Router Dom package. Each of these is going to help us create routing.&lt;/p&gt;

&lt;p&gt;First, we create the router using the BrowserRouter tag. Then nested in there, we make the Routes block. The routes block, which took the place of the Switch block in v6 of the React Router Package, looks at our nested routes and tells the app where to go. Finally, we have the “links” in the Route tags. We specify the path to look for in the Route tag and which element to point at. It’s also good to remember that the element should take the form of curly brackets and an open and closing tag (the &lt;code class=&quot;highlighter-rouge&quot;&gt;{&amp;lt;Home/&amp;gt;}&lt;/code&gt; you see in my code). I mention this as most tutorials I looked up about this used Switch, Links, and the elements used the &lt;code class=&quot;highlighter-rouge&quot;&gt;{Home}&lt;/code&gt; syntax.&lt;/p&gt;

&lt;p&gt;And that is it. If I navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:3000/&lt;/code&gt;, we see the below image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-12-implementing-routing-in-react/home_page.png&quot; alt=&quot;Home Page after implementing routing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the same thing on the about page at &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:3000/about&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-12-implementing-routing-in-react/about_page.png&quot; alt=&quot;About Page after implementing routing&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;It is a simple thing but something I learned while working with a team of React people. Using React is still akin to reading an upsidedown French map of Germany. However, I am starting to grasp the basics. Everything seems just to be something that’s been imported from somewhere else. Next time I think I’ll write about how you can create React packages similar to Python for easy and clean importing.&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Mar 2022 12:00:00 -0500</pubDate>
        <link>https://georgeoffley.com/blog/implementing-routing-in-react.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/implementing-routing-in-react.html</guid>
        
        <category>React</category>
        
        <category>Newbie</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Dockerizing System Tests With Selenium</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/selenium.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#selenium_webdriver&quot;&gt;Selenium WebDriver&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#running_tests&quot;&gt;Running Tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#notes&quot;&gt;Notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;We are spinning up a new application for some end users to enter data, so we need to build a robust testing system. Unit tests are a must, but those only test to ensure that all the classes, methods, and functions do what we expect. On top of that, we also need to verify that the web app as a whole looks and behaves how we hope it does to have a complete end-to-end testing apparatus. My goal for these first few spikes in the project was to find a tool for system testing and see if we could make it modular and easily automate it to not interfere with our workflow. I believe I found the solution. &lt;a href=&quot;https://www.selenium.dev/&quot;&gt;Selenium&lt;/a&gt; is a suite of tools for creating and automating browser tests, and I think it is what I was looking for. Let’s dive in.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;selenium-webdriver-&quot;&gt;Selenium WebDriver &lt;a name=&quot;selenium_webdriver&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Selenium is a multi-language suite of tools for creating browser-based automation tests. This tool will automate opening a browser, looking for a test condition, and reporting a pass or fail. Selenium is a whole suite of tools, but I decided to focus on &lt;a href=&quot;https://www.selenium.dev/documentation/webdriver/&quot;&gt;Selenium Web Driver&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Much like in the name, the software “drives” the web browser. Much like humans, we can bring up the webpage in a browser, enter in data, look up tags, and utilize all these capabilities to write tests using the API Selenium provides. A test opens a browser, &lt;a href=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/selenium_video.mp4&quot;&gt;and like magic, many things happen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My goal is to automate as much of this process as possible. So it would not be ideal to have a bunch of browsers launch with with ghosts running tests. A better solution was to run &lt;a href=&quot;https://github.com/SeleniumHQ/docker-selenium&quot;&gt;&lt;em&gt;headless browsers&lt;/em&gt;&lt;/a&gt; using container images provided by Selenium. This solution gives us a container with a built-in web browser which we don’t see that our script runs a test against. The results we can see in the terminal.&lt;/p&gt;

&lt;p&gt;As our project utilizes &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;, the easiest way to start is to grab the &lt;a href=&quot;https://github.com/SeleniumHQ/docker-selenium&quot;&gt;Docker image for the browser&lt;/a&gt; and start making some scripts. How this will look in the final solution is still to be determined, but I can replicate what I did for the sake of this write-up.&lt;/p&gt;

&lt;h3 id=&quot;setup-&quot;&gt;Setup &lt;a name=&quot;setup&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;To begin, I set up a &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file with the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/docker-compose.png&quot; alt=&quot;docker-compose.yml file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This gave us two containers, our browser using the Chrome-based selenium image and a Ruby-based container to run the script. Our new stack uses a lot of Ruby. The system container is built using an image from the docker file in the test directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/ruby-dockerfile.png&quot; alt=&quot;Dockerfile for Ruby based system&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This build handles installing the gems we need, including selenium-webdriver and the chromedriver-helper. Both are used to run our Web Driver script and utilize Chrome capabilities.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/gemfile.png&quot; alt=&quot;Gemfile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, the last bit is the script itself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/test-script.png&quot; alt=&quot;Test Script&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;running-tests-&quot;&gt;Running Tests &lt;a name=&quot;running_tests&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Let’s look at this script. My Ruby is rusty, but I tried my best. We set all our requirements, set a timer to make the thread sleep (more on that later), and then we write our test. In the script, we are writing the tests using the &lt;a href=&quot;https://rspec.info/&quot;&gt;RSpec&lt;/a&gt;. RSpec is a &lt;a href=&quot;https://www.jetbrains.com/mps/concepts/domain-specific-languages/&quot;&gt;domain-specific language&lt;/a&gt; built using Ruby to test Ruby code. We use this to test our behaviors using the describe and it blocks.&lt;/p&gt;

&lt;p&gt;We start by defining the &lt;a href=&quot;https://www.selenium.dev/documentation/webdriver/capabilities/&quot;&gt;capabilities&lt;/a&gt; we are looking for; in this case, we are testing a chrome browser, so we need to specify that.&lt;/p&gt;

&lt;p&gt;Then we use a variant of WebDriver called the &lt;a href=&quot;https://www.selenium.dev/documentation/webdriver/remote_webdriver/&quot;&gt;Remote WebDriver&lt;/a&gt;. Remote Driver is written identically to WebDriver, just with the caveat of the driver logic looking for the browser in another system. Here we set the address for the Chrome Selenium container so that our WebDriver knows to look for this remote machine to run the test against.&lt;/p&gt;

&lt;p&gt;Both containers are in the same network provided by Docker Compose, so we use the hostnames. Also, note that we are &lt;a href=&quot;https://docs.docker.com/compose/networking/&quot;&gt;mapping port 4444&lt;/a&gt; as the WebDriver will use this port to communicate.&lt;/p&gt;

&lt;p&gt;We then set the driver to navigate to our chosen website as an action. The following line sets what we expect to see using RSpec’s handy &lt;a href=&quot;https://relishapp.com/rspec/rspec-expectations/docs/built-in-matchers&quot;&gt;&lt;em&gt;expect function&lt;/em&gt;&lt;/a&gt;. We expect the page’s title to be equal to a string we provide and fail if the title is mismatched. Then we’ll just take a screenshot and save the image to a local drive using one of the built-in save_screenshot functions. Finally, and this was important, use the &lt;em&gt;quit&lt;/em&gt; function.&lt;/p&gt;

&lt;p&gt;We run this just by running &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up&lt;/code&gt;, and we can see the test passed as going to Google does indeed yield a page title of “Google.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/test-results.png&quot; alt=&quot;Test results in terminal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can also see the screenshot taken from the remote browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-10-dockerizing-system-tests-with-selenium/test_image.png&quot; alt=&quot;Resulting image from test&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;notes-&quot;&gt;Notes &lt;a name=&quot;notes&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Using the &lt;em&gt;quit&lt;/em&gt; function was essential to kill the connection, but it also closed the browser we can’t see. Additionally, I mentioned I would come back to using the sleep function in Ruby. It turns out using the &lt;a href=&quot;https://docs.docker.com/compose/startup-order/&quot;&gt;&lt;em&gt;depends_on&lt;/em&gt;&lt;/a&gt; feature in Docker Compose is not enough to ensure services are available to each other. When I began running the network, the remote driver would continually fail to connect. It turns out we just needed a moment for everything to boot. &lt;a href=&quot;https://docs.docker.com/compose/startup-order/&quot;&gt;Docker recommends creating a wait script&lt;/a&gt; but pausing the thread for a moment worked just as well.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This was a pretty simple example, but it answered my questions. We can use this to test website behavior, make it modular, and automate the tests. That checks enough boxes for me to keep going down this rabbit hole. The next goal is to develop an automated solution and possibly clean up the deployment a little. I’m thinking of having these two containers not run with the rest of the project and boot up the containers using a bash script specifically for testing. I might write about that too.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Mar 2022 12:00:00 -0500</pubDate>
        <link>https://georgeoffley.com/blog/dockerizing-system-tests-with-selenium.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/dockerizing-system-tests-with-selenium.html</guid>
        
        <category>Docker</category>
        
        <category>Testing</category>
        
        <category>Intermediate</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Shared Memory in Docker</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-03-05-shared-memory-in-docker/cover.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#shared_memory_device&quot;&gt;Shared Memory Device&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#use_in_docker&quot;&gt;Use in Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Recently, I was experimenting with system testing on a new stack. While working with &lt;a href=&quot;https://www.selenium.dev/documentation/webdriver/remote_webdriver/&quot;&gt;Selenium Remote Driver&lt;/a&gt; to create &lt;a href=&quot;https://en.wikipedia.org/wiki/Headless_browser&quot;&gt;headless web browsers&lt;/a&gt; (more on that later) to run against my app, I came across a Docker option I had not known. This Docker feature allowed for easily accessible and fast file reading and writing between the host and the container. It was being used as a volume, but I learned it was much more. When I looked it up, it was referred to as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Shared_memory&quot;&gt;&lt;em&gt;Shared Memory Device&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;shared-memory-device-&quot;&gt;Shared Memory Device &lt;a name=&quot;shared_memory_device&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Turns out that this is an old Linux staple. The shared memory device, located in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/shm/&lt;/code&gt; directory in the file system, utilizes temporary storage using RAM rather than disk storage. Using a shared volume available on the RAM and not the disk makes for a much faster read/write speeds. These devices also allows for &lt;a href=&quot;https://en.wikipedia.org/wiki/Inter-process_communication&quot;&gt;inter-process communication&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;use-in-docker-&quot;&gt;Use in Docker &lt;a name=&quot;use_in_docker&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Docker allows for the use of this device. When conducting my testing, I used the volume mapping feature to easily map local directories with directories inside the containers we’re working on. As seen below.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /dev/shm/:/dev/shm/ &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; ubuntu ubuntu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This mapped the local shared memory device to the Docker device. Docker, by default, allows for up to 64 MB of storage space using the shared memory device. You can see the default allocation when searching for the shared storage device within the container. As seen below.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker inspect ubuntu | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; shm
            &lt;span class=&quot;s2&quot;&gt;&quot;ShmSize&quot;&lt;/span&gt;: 67108864,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I was saving screenshots just to ensure that I was looking at the thing I was hoping to look at. Although I was only doing some foundational work, I could find myself in a pickle with only 64 MB of space available if this work ends up scaling. Should we need to, Docker lets us change the size of this device using the &lt;em&gt;–shm-size&lt;/em&gt; option. As seen below.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /dev/shm/:/dev/shm &lt;span class=&quot;nt&quot;&gt;--shm-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2gb &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; ubuntu ubuntu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Above we add in the &lt;em&gt;–shm-size&lt;/em&gt; option and we can specify all the space we need! Let’s look one more time to confirm that it works.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker inspect ubuntu | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; shm
            &lt;span class=&quot;s2&quot;&gt;&quot;ShmSize&quot;&lt;/span&gt;: 2147483648,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Shazam! We have more storage in our shared memory device to play around with.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;There is more to come about my adventures in Dockerizing system testing, but for now, I was able to learn a new thing about Linux and Docker. I hope it helps someone who came across it without knowing as I did.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Mar 2022 12:00:00 -0500</pubDate>
        <link>https://georgeoffley.com/blog/shared-memory-in-docker.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/shared-memory-in-docker.html</guid>
        
        <category>Docker</category>
        
        <category>Intermediate</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Using Amazon API Gateway with Lambda</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-02-09-using-api-gateway-with-lambda/cover.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#amazon_api_gateway&quot;&gt;Amazon API Gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setting_up_an_api&quot;&gt;Setting up an API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#adding_the_trigger&quot;&gt;Adding the Trigger&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setting_the_methods&quot;&gt;Setting the Methods&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introductions-&quot;&gt;Introductions &lt;a name=&quot;Introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I follow this movie podcast where they review and talk about well movies. It’s a fantastic podcast with a diverse set of people who’ve worked in the industry a long time, and I enjoy their opinions. At the end of each episode, they do a “Staff Pick” where they pick out a movie that shares themes with the movie they just reviewed or movies they think people should see. As I don’t have time to watch all the movies they suggest every week, I need to keep a running list of these films. They offer some good stuff.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;This presented a good opportunity to get some practice using React. I could build a tiny site cataloging all the suggested films. I have no React knowledge, so I started by creating a database to store their suggested films to stick with the iterative approach. Now I need to set up something to query the database and get back a list of the movies. That is where Amazon API Gateway and Lambda come in.&lt;/p&gt;

&lt;h3 id=&quot;amazon-api-gateway-&quot;&gt;Amazon API Gateway &lt;a name=&quot;amazon_api_gateway&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://georgeoffley.com/blog/creating-a-twitter-bot-using-aws-lambda-and-go.html&quot;&gt;I’ve covered AWS Lambda before&lt;/a&gt;, so I won’t go into it much. Amazon API Gateway, however, is an AWS service that allows you to quickly spin up API endpoints for use in your web applications. When you need to request data for your website, an API endpoint is what you’ll use. An &lt;em&gt;API endpoint&lt;/em&gt; is a URL that your application can reach out to request some data. For example, &lt;a href=&quot;https://ghibliapi.herokuapp.com/films/58611129-2dbc-4a81-a72f-77ddfc1b1b49&quot;&gt;this API endpoint&lt;/a&gt; lets me look up Studio Ghibli movies.&lt;/p&gt;

&lt;p&gt;These can scale like crazy, and API Gateway lets you manage, monitor, and add endpoints to your service quickly. For this project I am spinning up, we only need to return a list of the movies in the table. So let’s begin.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-an-api-&quot;&gt;Setting up an API &lt;a name=&quot;setting_up_an_api&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The first thing is setting up something to process the request once our service reaches out via an API endpoint. AWS Lambda is what we’ll use to create the process to query our database and return all our stuff.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;So we go into the AWS Console and create our Lambda. We’re returning all our items with a simple query, so it’s an easy setup. Here’s the code:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;boto3&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lambda_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boto3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'dynamodb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;aws_access_key_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'KEY'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;aws_secret_access_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'SECRET'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_all_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;TableName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'MaxFilmStaffPicks'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;
        
        
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_all_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;adding-the-trigger-&quot;&gt;Adding the Trigger &lt;a name=&quot;adding_the_trigger&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;After we have the Lambda function up and running, we need to create something to initiate it, like a trigger.&lt;/li&gt;
  &lt;li&gt;You can see a button to &lt;em&gt;Add trigger&lt;/em&gt; at the top of the Lambda menu. You can click that and select &lt;em&gt;API Gateway&lt;/em&gt; in the proceeding menu.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-02-09-using-api-gateway-with-lambda/trigger.png&quot; alt=&quot;Trigger&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Then you can hit &lt;em&gt;Create API&lt;/em&gt;, which brings up the options for APIs. In this case, I’m making a &lt;em&gt;REST API&lt;/em&gt;, so I select that.&lt;/li&gt;
  &lt;li&gt;For security, I pick &lt;em&gt;Open&lt;/em&gt;, as this is just a practice app. You can see what I chose below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-02-09-using-api-gateway-with-lambda/create_api_screen.png&quot; alt=&quot;Create API Screen&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;setting-the-methods-&quot;&gt;Setting the Methods &lt;a name=&quot;setting_the_methods&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;I finish off by going into the API Gateway menu to check out the newly created endpoint.&lt;/li&gt;
  &lt;li&gt;After that, you’ll be greeted by a screen with all our methods. The default created method is the &lt;em&gt;ANY&lt;/em&gt; method; I want this to be a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET&quot;&gt;&lt;em&gt;GET&lt;/em&gt;&lt;/a&gt; method. The difference between HTTP messages is a bit out of scope, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods&quot;&gt;but you should know them&lt;/a&gt;. We are using this endpoint only to request information for our application, so we stick to GET.&lt;/li&gt;
  &lt;li&gt;We’ll select the ANY method, click the &lt;em&gt;Action&lt;/em&gt; menu above it, and delete the method.&lt;/li&gt;
  &lt;li&gt;Then we go back to the same menu and click Create Method.&lt;/li&gt;
  &lt;li&gt;From the dropdown, we select GET.&lt;/li&gt;
  &lt;li&gt;Following this, we enter the name of the Lambda function this is for, and we’re done.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-02-09-using-api-gateway-with-lambda/method_creation.png&quot; alt=&quot;Method Creation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Very last step is to deploy the API.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We click the same menu and click &lt;em&gt;Deploy API&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;You’ll then be asked which &lt;em&gt;Stage&lt;/em&gt; you want to deploy in. When creating APIs, you can create many stages for your APIs, which will affect how they are used—for example, setting up a dev stage or creating different versions of your API. Whatever stage you set will reflect in the endpoint. See below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-02-09-using-api-gateway-with-lambda/stage_url.png&quot; alt=&quot;Stage URL&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For this instance, it is one API endpoint, in one app, for one specific purpose. I just used the default.&lt;/li&gt;
  &lt;li&gt;Now we’re done. We test the endpoint, and we get data!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2022-02-09-using-api-gateway-with-lambda/data.png&quot; alt=&quot;Data!&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Now I have a working API for grabbing my data. React confuses me, as I thought I’d be able just to pull data like I would a Python app. However, I am sure I will learn much more as I continue. And now you also have some knowledge of setting up endpoints in Amazon API Gateway.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Feb 2022 12:00:00 -0500</pubDate>
        <link>https://georgeoffley.com/blog/using-api-gateway-with-lambda.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/using-api-gateway-with-lambda.html</guid>
        
        <category>AWS</category>
        
        <category>Lambda</category>
        
        <category>API Gateway</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Shenanigans with Shaders</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/cover.jpg&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#shaders&quot;&gt;Shaders&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup&quot;&gt;Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#shader_code&quot;&gt;Shader Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conslusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For those of you who love rabbit holes, learning graphics programming is a pretty deep one. There’s always some new thing to learn, there’s a bunch of different new languages and toolsets to know, and on top of all that, &lt;a href=&quot;https://www.youtube.com/watch?v=tt_gPXpx0eo&amp;amp;t=101s&amp;amp;ab_channel=SamwellTarly&quot;&gt;there’s math&lt;/a&gt;. Like anything else in programming, you pick up momentum with each new thing you build, so I &lt;a href=&quot;https://github.com/Xibanya/ShaderTutorials&quot;&gt;found a tutorial&lt;/a&gt; and started making shaders. I know very little about this. However, I’m writing what I’m learning, so don’t come for me if I’m off on anything.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;shaders-&quot;&gt;Shaders &lt;a name=&quot;shaders&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A shader is a program that runs on the GPU as part of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Graphics_pipeline&quot;&gt;graphics pipeline&lt;/a&gt;. We’re going to focus primarily on shaders in Unity. There are other ways to tackle this, but Unity gives an easy setup to get started quickly. For the context of Unity, a shader is a small script containing logic and calculations for determining the colors of a pixel.&lt;/p&gt;

&lt;p&gt;In Unity, we create &lt;em&gt;shader objects&lt;/em&gt; which act as wrappers for our shader program. A shader object exists in a &lt;em&gt;shader asset&lt;/em&gt; which is just the script we are writing. Creating these in Unity allows for a great deal of freedom in what we make. What we’ll focus on is adding some basic functionality to a shader. We’ll be focusing on using &lt;a href=&quot;https://docs.unity3d.com/Manual/SL-Reference.html&quot;&gt;&lt;em&gt;ShaderLab&lt;/em&gt;&lt;/a&gt; to create shaders.&lt;/p&gt;

&lt;h3 id=&quot;setup-&quot;&gt;Setup &lt;a name=&quot;setup&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The first thing to set yourself up making shaders in Unity is Unity. So &lt;a href=&quot;https://unity3d.com/get-unity/download&quot;&gt;download it&lt;/a&gt;, and create a new project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/new_scene.png&quot; alt=&quot;New Scene in Unity&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I won’t give a full rundown of Unity and the stuff you can do. I leave that to &lt;a href=&quot;https://learn.unity.com/&quot;&gt;better minds&lt;/a&gt;. In the &lt;em&gt;Hierarchy Window&lt;/em&gt;, right-click and scroll to &lt;em&gt;3D Object&lt;/em&gt; and click whichever object grabs your fancy. I always pick sphere for testing stuff. Now we have a &lt;a href=&quot;https://en.wikipedia.org/wiki/Polygon_mesh&quot;&gt;&lt;em&gt;3D Mesh&lt;/em&gt;&lt;/a&gt; on the screen that we can begin adding things to it. In the &lt;em&gt;Project Window&lt;/em&gt;, right-click on the word &lt;em&gt;Assets&lt;/em&gt; and create two new folders, &lt;em&gt;Materials&lt;/em&gt; and &lt;em&gt;Shaders&lt;/em&gt;. Double click into the Materials folder, right-click and Create is right at the top -&amp;gt; click Material. Materials are similar to skins we can apply to 3D objects. We will use this new material to add our new shader to the 3D Mesh. After that, drag our new material into the &lt;em&gt;Scene Window&lt;/em&gt; where our sphere is and onto the sphere we made. Now right-click our Shaders folder scroll to Create -&amp;gt; Shader -&amp;gt; Standard Surface Shader. Click the sphere in the Scene window to bring up the &lt;em&gt;Inspector Window&lt;/em&gt;. Finally, drag the shader file over to the inspector window with our sphere covered in our new material. We have just applied our shader to the materials. You should see this in the Inspector Window.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/test_material.png&quot; alt=&quot;Test Material inspector window&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now go back to the Project window and double click our new Shader file. Unity will launch an IDE for use to check out the code. You can configure your choice of IDE; I have VSCode configured. Open the Shader file, and let’s check out the code. I created some basic shader code you can use.&lt;/p&gt;

&lt;h3 id=&quot;shader-code-&quot;&gt;Shader Code &lt;a name=&quot;shader_code&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Here is the complete, minimal shader code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/code.png&quot; alt=&quot;Full Shader Code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It looks a bit much to anyone new to this, including myself, so let’s take it a section at a time. The first thing at the top, starting with “Shader,” is the &lt;em&gt;Shader Block&lt;/em&gt;. This is used to define our Shader Object. You can use this to define your properties, create many shaders using the &lt;em&gt;SubShader&lt;/em&gt; blocks, assign custom options, and assign a &lt;em&gt;fallback&lt;/em&gt; shader object. Here you can see the name of our shader and that it is in the “Custom” directory.&lt;/p&gt;

&lt;p&gt;Within the Shader block curly brackets, we have our other sections. The first is our &lt;em&gt;Properties&lt;/em&gt;. The properties box is where we define the properties for our materials. A material property is what Unity stores along with our materials. This allows for different configurations within Unity by creating things like sliders and inputs within the Inspector window for us to play around with. We defined two properties, the &lt;em&gt;MainColor&lt;/em&gt; and the &lt;em&gt;MainTexture&lt;/em&gt;. Using square brackets, I outlined which property was the default color and default texture. We also defined the default values for these properties. There’s a bit to these values but suffice it to say, both values are default white.&lt;/p&gt;

&lt;p&gt;The second block is our SubShader; this is where our shader logic goes. You can define multiple sub shaders for many different uses. For example, depending on the graphics hardware you want to support, you can make shaders for the various graphics APIs. Within our block, you can see some code for assigning &lt;a href=&quot;https://docs.unity3d.com/Manual/SL-SubShaderTags.html&quot;&gt;&lt;em&gt;tags&lt;/em&gt;&lt;/a&gt;, assigning &lt;a href=&quot;https://docs.unity3d.com/Manual/SL-ShaderLOD.html&quot;&gt;&lt;em&gt;levels of detail (LOD)&lt;/em&gt;&lt;/a&gt;, and the &lt;a href=&quot;https://en.wikibooks.org/wiki/Cg_Programming/Unity&quot;&gt;&lt;em&gt;CGPROGRAM&lt;/em&gt;&lt;/a&gt; block. I want to draw your attention to this section of the code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/output.png&quot; alt=&quot;Output function&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First, we define the data types for our inputs and outputs and create a function for us to serve the outputs into unity. Our Input we set up as &lt;em&gt;uv_Maintex&lt;/em&gt;; this allows for us to input a texture object. Then we create a &lt;em&gt;fixed4&lt;/em&gt; variable for our &lt;em&gt;_Color&lt;/em&gt; attribute. The &lt;em&gt;o.Albedo&lt;/em&gt; parameter is what is used to control the base color of the surface. Here we are taking the values of our texture and multiplying them by our color input. The code above gets you something similar to this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/color.png&quot; alt=&quot;Output function&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I was proud of myself the first time I made this from memory. Our coded shader lets us control the color of the material and add basic textures to it. Working in graphics does not lead to instant gratification, as anything you do requires a ton of setup. However, this and &lt;a href=&quot;https://www.shadertoy.com/&quot;&gt;ShaderToy&lt;/a&gt; get you that dopamine hit.&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Above I went through some fundamentals of shaders in Unity. I skipped over a ton of information as I’m still learning a lot, and a full informed explainer would be twenty pages long. There is a lot to programming graphics and shaders specifically. I suggest you check out stuff like &lt;a href=&quot;https://github.com/Xibanya/ShaderTutorials&quot;&gt;Team Dogpit’s shader tutorial&lt;/a&gt; for a way better deep dive. I’m excited to dig into this world. I want to learn to create some of the incredible stories I see in animation, and any first step is a step in the right direction. Thanks for reading.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Nov 2021 12:00:00 -0500</pubDate>
        <link>https://georgeoffley.com/blog/shinanigans-with-shaders-copy.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/shinanigans-with-shaders-copy.html</guid>
        
        <category>Graphics</category>
        
        <category>Unity</category>
        
        <category>ShaderLab</category>
        
        
        <category>Blog</category>
        
      </item>
    
      <item>
        <title>Messaging and Madness: Sending Messages with AMQP and Amazon MQ</title>
        <description>&lt;figure&gt;
    &lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/title_card.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;table-of-contents&quot;&gt;Table Of Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#amqp&quot;&gt;AMQP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#amqp_amazon_mq&quot;&gt;AMQP and Amazon MQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#serialization&quot;&gt;Serialization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;introduction-&quot;&gt;Introduction &lt;a name=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;How do software systems talk to each other? Back-end systems can scale into giant melted together &lt;a href=&quot;https://youtu.be/NH-8L1iZq20&quot;&gt;Cronenberg monsters&lt;/a&gt;, often making up different tools and languages. So, communicating between these services can become an untenable challenge without some shared vocabulary. We can communicate in many ways, but today I wanted to talk about asynchronous messaging protocols and figure out how AWS can help.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;amqp-&quot;&gt;AMQP &lt;a name=&quot;amqp&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;AMQP stands for Advanced Message Queuing Protocol. I’ve been working to implement it for some back-end software suites I’m building out to enable them to talk to each other. AMQP utilizes these things called &lt;em&gt;brokers&lt;/em&gt; to publish messages on, then on the other end, a receiving service subscribed to the same “channel” that we posted to can pick up that message.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/hello-world-example-routing.png&quot; alt=&quot;Hello World Visualization&quot; /&gt;
via &lt;a href=&quot;https://www.rabbitmq.com/tutorials/amqp-concepts.html&quot;&gt;Rabbit MQ Tutorials&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s dive a little further down; the &lt;em&gt;publisher&lt;/em&gt; service publishes a message to an &lt;em&gt;exchange&lt;/em&gt; on a &lt;em&gt;broker&lt;/em&gt;. This exchange has &lt;em&gt;routes&lt;/em&gt; that lead to &lt;em&gt;queues&lt;/em&gt;, or “channels,” where the payload is published. We make sure to include the sending information with our message to be routed to the correct queue. The broker cannot see the message, although it might look into any metadata attached to the message from the publisher. This workflow asynchronously sends messages. Imagine a server version of a mail sorting machine shooting letters into the correct mail slot based on the address.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/mail_sorting.gif&quot; alt=&quot;Mail Sorting Gif from MIB II&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When referring to a publisher, I mean some code that we utilize to connect and send a message. AMQP is programmable, so I can shape it to fit most situations. In this case, we need to send messages to our different software suites to trigger actions to happen. Learning this took some time, but it’s been simple to implement.&lt;/p&gt;

&lt;p&gt;There are different types of exchanges that we can use to make these services fit our needs. I’m going to explain what we use briefly.&lt;/p&gt;

&lt;p&gt;We use a &lt;em&gt;direct exchange&lt;/em&gt; utilizing &lt;em&gt;routing keys&lt;/em&gt; to bind queues to exchanges. Our code can use direct exchanges to distribute tasks to many different endpoints, but we used these direct exchanges to make direct routes between our services. Other types of exchanges can be used to broadcast messages. More information can be found &lt;a href=&quot;https://www.rabbitmq.com/tutorials/amqp-concepts.html&quot;&gt;here&lt;/a&gt;. For now, we’re going to focus on direct exchanges.&lt;/p&gt;

&lt;h3 id=&quot;amqp-and-amazon-mq-&quot;&gt;AMQP and Amazon MQ &lt;a name=&quot;amqp_amazon_mq&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;We touched on all that because I wanted to talk about &lt;a href=&quot;https://aws.amazon.com/amazon-mq/?amazon-mq.sort-by=item.additionalFields.postDateTime&amp;amp;amazon-mq.sort-order=desc&quot;&gt;Amazon MQ&lt;/a&gt;. Amazon MQ is a fully managed platform for setting up message brokers. Amazon MQ utilizes both RabbitMQ and Apache Active MQ for creating brokers. We’re sticking with Rabbit MQ for the time being.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/amazon_mq_dash.png&quot; alt=&quot;Amazon MQ Dashboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here above, you can see you can easily set up a broker in just a few clicks. I left most of the settings on default, except for choosing “RabbitMQ” for our broker engine and setting some security up for accessing our management console.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/rabbit_mq_dash.png&quot; alt=&quot;Rabbit MQ Management Console&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we get that, we have access to the RabbitMQ dashboard Amazon MQ created and is managing. Now that we have a broker set up, we can play with some code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/code.png&quot; alt=&quot;Code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Above I use the library &lt;a href=&quot;https://github.com/celery/kombu&quot;&gt;Kombu&lt;/a&gt; to create some connections and send some stuff. I started by setting up our environment variables. Then created exchange and queue objects. Finally, I made our connection object and the producer object, and then we sent a simple “Hello” message.&lt;/p&gt;

&lt;h3 id=&quot;serialization-&quot;&gt;Serialization &lt;a name=&quot;serialization&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Serialization is &lt;a href=&quot;https://www.tutorialspoint.com/object_oriented_python/object_oriented_python_serialization.htm&quot;&gt;another blog post&lt;/a&gt;, but I chose to use JSON to serialize the payload. In the production software, I use a combination of JSON and &lt;a href=&quot;https://docs.python.org/3/library/pickle.html&quot;&gt;Pickle&lt;/a&gt; to serialize things like image data.&lt;/p&gt;

&lt;p&gt;Now we can see our message published on the queue I declared in our publisher service. An identical receiving service would be set up on the other side to read out messages sent to that queue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/results.png&quot; alt=&quot;Results&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion-&quot;&gt;Conclusion &lt;a name=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;In conclusion, using Amazon MQ allows us to set up managed brokers for us to send messages. With AMQP as the broker engine, we have a lightweight message-sending workflow. Thanks for reading.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Oct 2021 12:00:00 -0400</pubDate>
        <link>https://georgeoffley.com/blog/messaging-and-madness-sending-messages-with-amqp-and-amazon-mq-copy.html</link>
        <guid isPermaLink="true">https://georgeoffley.com/blog/messaging-and-madness-sending-messages-with-amqp-and-amazon-mq-copy.html</guid>
        
        <category>AWS</category>
        
        <category>Python</category>
        
        <category>AMQP</category>
        
        
        <category>Blog</category>
        
      </item>
    
  </channel>
</rss>
